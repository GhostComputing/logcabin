// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Server/ServerStats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Server/ServerStats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* RollingStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollingStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollingStat_Exceptional_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollingStat_Exceptional_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_Raft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_Raft_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_Raft_Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_Raft_Peer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerStats_Raft_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_Storage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_Storage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_Tree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_Tree_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_StateMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_StateMachine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fServer_2fServerStats_2eproto() {
  protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Server/ServerStats.proto");
  GOOGLE_CHECK(file != NULL);
  RollingStat_descriptor_ = file->message_type(0);
  static const int RollingStat_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, average_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, ewma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, ewma4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, exceptional_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, stddev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, last_exceptional_),
  };
  RollingStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollingStat_descriptor_,
      RollingStat::default_instance_,
      RollingStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollingStat));
  RollingStat_Exceptional_descriptor_ = RollingStat_descriptor_->nested_type(0);
  static const int RollingStat_Exceptional_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat_Exceptional, when_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat_Exceptional, value_),
  };
  RollingStat_Exceptional_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollingStat_Exceptional_descriptor_,
      RollingStat_Exceptional::default_instance_,
      RollingStat_Exceptional_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat_Exceptional, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingStat_Exceptional, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollingStat_Exceptional));
  ServerStats_descriptor_ = file->message_type(1);
  static const int ServerStats_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, start_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, end_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, raft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, state_machine_),
  };
  ServerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_descriptor_,
      ServerStats::default_instance_,
      ServerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats));
  ServerStats_Raft_descriptor_ = ServerStats_descriptor_->nested_type(0);
  static const int ServerStats_Raft_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, current_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, commit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, voted_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, start_election_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, withhold_votes_until_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, cluster_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, cluster_time_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, last_snapshot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, last_snapshot_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, last_snapshot_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, last_snapshot_cluster_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, log_start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, log_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, num_entries_truncated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, peer_),
  };
  ServerStats_Raft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_Raft_descriptor_,
      ServerStats_Raft::default_instance_,
      ServerStats_Raft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats_Raft));
  ServerStats_Raft_Peer_descriptor_ = ServerStats_Raft_descriptor_->nested_type(0);
  static const int ServerStats_Raft_Peer_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, old_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, new_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, staging_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, last_synced_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, request_vote_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, have_vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, suppress_bulk_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, next_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, last_agree_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, is_caught_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, next_heartbeat_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, backoff_until_),
  };
  ServerStats_Raft_Peer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_Raft_Peer_descriptor_,
      ServerStats_Raft_Peer::default_instance_,
      ServerStats_Raft_Peer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Raft_Peer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats_Raft_Peer));
  ServerStats_Raft_State_descriptor_ = ServerStats_Raft_descriptor_->enum_type(0);
  ServerStats_Storage_descriptor_ = ServerStats_descriptor_->nested_type(1);
  static const int ServerStats_Storage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, num_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, open_segment_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, metadata_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, metadata_write_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, filesystem_ops_nanos_),
  };
  ServerStats_Storage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_Storage_descriptor_,
      ServerStats_Storage::default_instance_,
      ServerStats_Storage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Storage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats_Storage));
  ServerStats_Tree_descriptor_ = ServerStats_descriptor_->nested_type(2);
  static const int ServerStats_Tree_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_conditions_checked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_conditions_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_make_directory_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_make_directory_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_list_directory_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_list_directory_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_directory_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_directory_parent_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_directory_target_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_directory_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_directory_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_write_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_write_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_read_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_read_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_file_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_file_parent_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_file_target_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_file_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, num_remove_file_success_),
  };
  ServerStats_Tree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_Tree_descriptor_,
      ServerStats_Tree::default_instance_,
      ServerStats_Tree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_Tree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats_Tree));
  ServerStats_StateMachine_descriptor_ = ServerStats_descriptor_->nested_type(3);
  static const int ServerStats_StateMachine_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, snapshotting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, last_applied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_snapshots_attempted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_snapshots_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_redundant_advance_version_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_rejected_advance_version_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_successful_advance_version_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_total_advance_version_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, min_supported_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, max_supported_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, running_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, num_unknown_requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, may_snapshot_at_),
  };
  ServerStats_StateMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_StateMachine_descriptor_,
      ServerStats_StateMachine::default_instance_,
      ServerStats_StateMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats_StateMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats_StateMachine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fServer_2fServerStats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollingStat_descriptor_, &RollingStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollingStat_Exceptional_descriptor_, &RollingStat_Exceptional::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_descriptor_, &ServerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_Raft_descriptor_, &ServerStats_Raft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_Raft_Peer_descriptor_, &ServerStats_Raft_Peer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_Storage_descriptor_, &ServerStats_Storage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_Tree_descriptor_, &ServerStats_Tree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_StateMachine_descriptor_, &ServerStats_StateMachine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fServer_2fServerStats_2eproto() {
  delete RollingStat::default_instance_;
  delete RollingStat_reflection_;
  delete RollingStat_Exceptional::default_instance_;
  delete RollingStat_Exceptional_reflection_;
  delete ServerStats::default_instance_;
  delete ServerStats_reflection_;
  delete ServerStats_Raft::default_instance_;
  delete ServerStats_Raft_reflection_;
  delete ServerStats_Raft_Peer::default_instance_;
  delete ServerStats_Raft_Peer_reflection_;
  delete ServerStats_Storage::default_instance_;
  delete ServerStats_Storage_reflection_;
  delete ServerStats_Tree::default_instance_;
  delete ServerStats_Tree_reflection_;
  delete ServerStats_StateMachine::default_instance_;
  delete ServerStats_StateMachine_reflection_;
}

void protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!Protocol/Server/ServerStats.proto\022\021Log"
    "Cabin.Protocol\"\235\002\n\013RollingStat\022\017\n\007averag"
    "e\030\001 \001(\001\022\r\n\005count\030\002 \001(\004\022\r\n\005ewma2\030\003 \001(\001\022\r\n"
    "\005ewma4\030\004 \001(\001\022\031\n\021exceptional_count\030\005 \001(\004\022"
    "\014\n\004last\030\006 \001(\004\022\013\n\003min\030\007 \001(\004\022\013\n\003max\030\010 \001(\004\022"
    "\013\n\003sum\030\t \001(\004\022\016\n\006stddev\030\n \001(\001\022D\n\020last_exc"
    "eptional\030\013 \003(\0132*.LogCabin.Protocol.Rolli"
    "ngStat.Exceptional\032*\n\013Exceptional\022\014\n\004whe"
    "n\030\001 \001(\003\022\r\n\005value\030\002 \001(\004\"\321\024\n\013ServerStats\022\021"
    "\n\tserver_id\030\001 \001(\004\022\021\n\taddresses\030\002 \001(\t\022\020\n\010"
    "start_at\030\003 \001(\003\022\016\n\006end_at\030\004 \001(\003\0221\n\004raft\030\013"
    " \001(\0132#.LogCabin.Protocol.ServerStats.Raf"
    "t\0227\n\007storage\030\014 \001(\0132&.LogCabin.Protocol.S"
    "erverStats.Storage\022B\n\rstate_machine\030\r \001("
    "\0132+.LogCabin.Protocol.ServerStats.StateM"
    "achine\032\233\007\n\004Raft\022\024\n\014current_term\030\013 \001(\004\0228\n"
    "\005state\030\014 \001(\0162).LogCabin.Protocol.ServerS"
    "tats.Raft.State\022\024\n\014commit_index\030\r \001(\004\022\026\n"
    "\016last_log_index\030\016 \001(\004\022\021\n\tleader_id\030\017 \001(\004"
    "\022\021\n\tvoted_for\030\020 \001(\004\022\031\n\021start_election_at"
    "\030\025 \001(\003\022\034\n\024withhold_votes_until\030\026 \001(\003\022\024\n\014"
    "cluster_time\030\027 \001(\004\022\032\n\022cluster_time_epoch"
    "\030\030 \001(\004\022\033\n\023last_snapshot_index\030\037 \001(\004\022\033\n\023l"
    "ast_snapshot_bytes\030  \001(\004\022\032\n\022last_snapsho"
    "t_term\030# \001(\004\022\"\n\032last_snapshot_cluster_ti"
    "me\030$ \001(\004\022\027\n\017log_start_index\030! \001(\004\022\021\n\tlog"
    "_bytes\030\" \001(\004\022\035\n\025num_entries_truncated\030% "
    "\001(\004\0226\n\004peer\030[ \003(\0132(.LogCabin.Protocol.Se"
    "rverStats.Raft.Peer\032\307\002\n\004Peer\022\021\n\tserver_i"
    "d\030\001 \001(\004\022\021\n\taddresses\030\002 \001(\t\022\022\n\nold_member"
    "\030\025 \001(\010\022\022\n\nnew_member\030\026 \001(\010\022\026\n\016staging_me"
    "mber\030\027 \001(\010\022\031\n\021last_synced_index\030\037 \001(\004\022\031\n"
    "\021request_vote_done\030) \001(\010\022\021\n\thave_vote\030* "
    "\001(\010\022\032\n\022suppress_bulk_data\030+ \001(\010\022\022\n\nnext_"
    "index\030, \001(\004\022\030\n\020last_agree_index\030- \001(\004\022\024\n"
    "\014is_caught_up\030. \001(\010\022\031\n\021next_heartbeat_at"
    "\0303 \001(\003\022\025\n\rbackoff_until\0304 \001(\003\"=\n\005State\022\013"
    "\n\007UNKNOWN\020\000\022\014\n\010FOLLOWER\020\001\022\r\n\tCANDIDATE\020\002"
    "\022\n\n\006LEADER\020\003\032\321\001\n\007Storage\022\024\n\014num_segments"
    "\030\001 \001(\004\022\032\n\022open_segment_bytes\030\002 \001(\004\022\030\n\020me"
    "tadata_version\030\003 \001(\004\022<\n\024metadata_write_n"
    "anos\030\004 \001(\0132\036.LogCabin.Protocol.RollingSt"
    "at\022<\n\024filesystem_ops_nanos\030\005 \001(\0132\036.LogCa"
    "bin.Protocol.RollingStat\032\314\005\n\004Tree\022\036\n\026num"
    "_conditions_checked\030\001 \001(\004\022\035\n\025num_conditi"
    "ons_failed\030\002 \001(\004\022$\n\034num_make_directory_a"
    "ttempted\030\003 \001(\004\022\"\n\032num_make_directory_suc"
    "cess\030\004 \001(\004\022$\n\034num_list_directory_attempt"
    "ed\030\005 \001(\004\022\"\n\032num_list_directory_success\030\006"
    " \001(\004\022&\n\036num_remove_directory_attempted\030\007"
    " \001(\004\022-\n%num_remove_directory_parent_not_"
    "found\030\010 \001(\004\022-\n%num_remove_directory_targ"
    "et_not_found\030\t \001(\004\022!\n\031num_remove_directo"
    "ry_done\030\n \001(\004\022$\n\034num_remove_directory_su"
    "ccess\030\013 \001(\004\022\033\n\023num_write_attempted\030\014 \001(\004"
    "\022\031\n\021num_write_success\030\r \001(\004\022\032\n\022num_read_"
    "attempted\030\016 \001(\004\022\030\n\020num_read_success\030\017 \001("
    "\004\022!\n\031num_remove_file_attempted\030\020 \001(\004\022(\n "
    "num_remove_file_parent_not_found\030\021 \001(\004\022("
    "\n num_remove_file_target_not_found\030\022 \001(\004"
    "\022\034\n\024num_remove_file_done\030\023 \001(\004\022\037\n\027num_re"
    "move_file_success\030\024 \001(\004\032\210\004\n\014StateMachine"
    "\022\024\n\014snapshotting\030\001 \001(\010\022\024\n\014last_applied\030\002"
    " \001(\004\022\024\n\014num_sessions\030\003 \001(\004\022\037\n\027num_snapsh"
    "ots_attempted\030\004 \001(\004\022\034\n\024num_snapshots_fai"
    "led\030\005 \001(\004\022-\n%num_redundant_advance_versi"
    "on_entries\030\006 \001(\004\022,\n$num_rejected_advance"
    "_version_entries\030\007 \001(\004\022.\n&num_successful"
    "_advance_version_entries\030\010 \001(\004\022)\n!num_to"
    "tal_advance_version_entries\030\t \001(\004\022\035\n\025min"
    "_supported_version\030\n \001(\r\022\035\n\025max_supporte"
    "d_version\030\013 \001(\r\022\027\n\017running_version\030\014 \001(\r"
    "\0221\n\004tree\030\r \001(\0132#.LogCabin.Protocol.Serve"
    "rStats.Tree\022\034\n\024num_unknown_requests\030\016 \001("
    "\004\022\027\n\017may_snapshot_at\030\017 \001(\003", 2986);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Server/ServerStats.proto", &protobuf_RegisterTypes);
  RollingStat::default_instance_ = new RollingStat();
  RollingStat_Exceptional::default_instance_ = new RollingStat_Exceptional();
  ServerStats::default_instance_ = new ServerStats();
  ServerStats_Raft::default_instance_ = new ServerStats_Raft();
  ServerStats_Raft_Peer::default_instance_ = new ServerStats_Raft_Peer();
  ServerStats_Storage::default_instance_ = new ServerStats_Storage();
  ServerStats_Tree::default_instance_ = new ServerStats_Tree();
  ServerStats_StateMachine::default_instance_ = new ServerStats_StateMachine();
  RollingStat::default_instance_->InitAsDefaultInstance();
  RollingStat_Exceptional::default_instance_->InitAsDefaultInstance();
  ServerStats::default_instance_->InitAsDefaultInstance();
  ServerStats_Raft::default_instance_->InitAsDefaultInstance();
  ServerStats_Raft_Peer::default_instance_->InitAsDefaultInstance();
  ServerStats_Storage::default_instance_->InitAsDefaultInstance();
  ServerStats_Tree::default_instance_->InitAsDefaultInstance();
  ServerStats_StateMachine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fServer_2fServerStats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fServer_2fServerStats_2eproto {
  StaticDescriptorInitializer_Protocol_2fServer_2fServerStats_2eproto() {
    protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  }
} static_descriptor_initializer_Protocol_2fServer_2fServerStats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RollingStat_Exceptional::kWhenFieldNumber;
const int RollingStat_Exceptional::kValueFieldNumber;
#endif  // !_MSC_VER

RollingStat_Exceptional::RollingStat_Exceptional()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.RollingStat.Exceptional)
}

void RollingStat_Exceptional::InitAsDefaultInstance() {
}

RollingStat_Exceptional::RollingStat_Exceptional(const RollingStat_Exceptional& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.RollingStat.Exceptional)
}

void RollingStat_Exceptional::SharedCtor() {
  _cached_size_ = 0;
  when_ = GOOGLE_LONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollingStat_Exceptional::~RollingStat_Exceptional() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.RollingStat.Exceptional)
  SharedDtor();
}

void RollingStat_Exceptional::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RollingStat_Exceptional::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollingStat_Exceptional::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollingStat_Exceptional_descriptor_;
}

const RollingStat_Exceptional& RollingStat_Exceptional::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

RollingStat_Exceptional* RollingStat_Exceptional::default_instance_ = NULL;

RollingStat_Exceptional* RollingStat_Exceptional::New() const {
  return new RollingStat_Exceptional;
}

void RollingStat_Exceptional::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RollingStat_Exceptional*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(when_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollingStat_Exceptional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.RollingStat.Exceptional)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 when = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &when_)));
          set_has_when();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.RollingStat.Exceptional)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.RollingStat.Exceptional)
  return false;
#undef DO_
}

void RollingStat_Exceptional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.RollingStat.Exceptional)
  // optional int64 when = 1;
  if (has_when()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->when(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.RollingStat.Exceptional)
}

::google::protobuf::uint8* RollingStat_Exceptional::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.RollingStat.Exceptional)
  // optional int64 when = 1;
  if (has_when()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->when(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.RollingStat.Exceptional)
  return target;
}

int RollingStat_Exceptional::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 when = 1;
    if (has_when()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->when());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollingStat_Exceptional::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollingStat_Exceptional* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollingStat_Exceptional*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollingStat_Exceptional::MergeFrom(const RollingStat_Exceptional& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_when()) {
      set_when(from.when());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollingStat_Exceptional::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollingStat_Exceptional::CopyFrom(const RollingStat_Exceptional& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollingStat_Exceptional::IsInitialized() const {

  return true;
}

void RollingStat_Exceptional::Swap(RollingStat_Exceptional* other) {
  if (other != this) {
    std::swap(when_, other->when_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollingStat_Exceptional::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollingStat_Exceptional_descriptor_;
  metadata.reflection = RollingStat_Exceptional_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RollingStat::kAverageFieldNumber;
const int RollingStat::kCountFieldNumber;
const int RollingStat::kEwma2FieldNumber;
const int RollingStat::kEwma4FieldNumber;
const int RollingStat::kExceptionalCountFieldNumber;
const int RollingStat::kLastFieldNumber;
const int RollingStat::kMinFieldNumber;
const int RollingStat::kMaxFieldNumber;
const int RollingStat::kSumFieldNumber;
const int RollingStat::kStddevFieldNumber;
const int RollingStat::kLastExceptionalFieldNumber;
#endif  // !_MSC_VER

RollingStat::RollingStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.RollingStat)
}

void RollingStat::InitAsDefaultInstance() {
}

RollingStat::RollingStat(const RollingStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.RollingStat)
}

void RollingStat::SharedCtor() {
  _cached_size_ = 0;
  average_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ewma2_ = 0;
  ewma4_ = 0;
  exceptional_count_ = GOOGLE_ULONGLONG(0);
  last_ = GOOGLE_ULONGLONG(0);
  min_ = GOOGLE_ULONGLONG(0);
  max_ = GOOGLE_ULONGLONG(0);
  sum_ = GOOGLE_ULONGLONG(0);
  stddev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollingStat::~RollingStat() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.RollingStat)
  SharedDtor();
}

void RollingStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RollingStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollingStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollingStat_descriptor_;
}

const RollingStat& RollingStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

RollingStat* RollingStat::default_instance_ = NULL;

RollingStat* RollingStat::New() const {
  return new RollingStat;
}

void RollingStat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RollingStat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(average_, max_);
  }
  ZR_(sum_, stddev_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  last_exceptional_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollingStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.RollingStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double average = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_)));
          set_has_average();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ewma2;
        break;
      }

      // optional double ewma2 = 3;
      case 3: {
        if (tag == 25) {
         parse_ewma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ewma2_)));
          set_has_ewma2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ewma4;
        break;
      }

      // optional double ewma4 = 4;
      case 4: {
        if (tag == 33) {
         parse_ewma4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ewma4_)));
          set_has_ewma4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exceptional_count;
        break;
      }

      // optional uint64 exceptional_count = 5;
      case 5: {
        if (tag == 40) {
         parse_exceptional_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exceptional_count_)));
          set_has_exceptional_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last;
        break;
      }

      // optional uint64 last = 6;
      case 6: {
        if (tag == 48) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_min;
        break;
      }

      // optional uint64 min = 7;
      case 7: {
        if (tag == 56) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max;
        break;
      }

      // optional uint64 max = 8;
      case 8: {
        if (tag == 64) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sum;
        break;
      }

      // optional uint64 sum = 9;
      case 9: {
        if (tag == 72) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_stddev;
        break;
      }

      // optional double stddev = 10;
      case 10: {
        if (tag == 81) {
         parse_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stddev_)));
          set_has_stddev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_last_exceptional;
        break;
      }

      // repeated .LogCabin.Protocol.RollingStat.Exceptional last_exceptional = 11;
      case 11: {
        if (tag == 90) {
         parse_last_exceptional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_exceptional()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_last_exceptional;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.RollingStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.RollingStat)
  return false;
#undef DO_
}

void RollingStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.RollingStat)
  // optional double average = 1;
  if (has_average()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->average(), output);
  }

  // optional uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  // optional double ewma2 = 3;
  if (has_ewma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ewma2(), output);
  }

  // optional double ewma4 = 4;
  if (has_ewma4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ewma4(), output);
  }

  // optional uint64 exceptional_count = 5;
  if (has_exceptional_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exceptional_count(), output);
  }

  // optional uint64 last = 6;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->last(), output);
  }

  // optional uint64 min = 7;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->min(), output);
  }

  // optional uint64 max = 8;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->max(), output);
  }

  // optional uint64 sum = 9;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->sum(), output);
  }

  // optional double stddev = 10;
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->stddev(), output);
  }

  // repeated .LogCabin.Protocol.RollingStat.Exceptional last_exceptional = 11;
  for (int i = 0; i < this->last_exceptional_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->last_exceptional(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.RollingStat)
}

::google::protobuf::uint8* RollingStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.RollingStat)
  // optional double average = 1;
  if (has_average()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->average(), target);
  }

  // optional uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  // optional double ewma2 = 3;
  if (has_ewma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ewma2(), target);
  }

  // optional double ewma4 = 4;
  if (has_ewma4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ewma4(), target);
  }

  // optional uint64 exceptional_count = 5;
  if (has_exceptional_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->exceptional_count(), target);
  }

  // optional uint64 last = 6;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->last(), target);
  }

  // optional uint64 min = 7;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->min(), target);
  }

  // optional uint64 max = 8;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->max(), target);
  }

  // optional uint64 sum = 9;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->sum(), target);
  }

  // optional double stddev = 10;
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->stddev(), target);
  }

  // repeated .LogCabin.Protocol.RollingStat.Exceptional last_exceptional = 11;
  for (int i = 0; i < this->last_exceptional_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->last_exceptional(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.RollingStat)
  return target;
}

int RollingStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double average = 1;
    if (has_average()) {
      total_size += 1 + 8;
    }

    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

    // optional double ewma2 = 3;
    if (has_ewma2()) {
      total_size += 1 + 8;
    }

    // optional double ewma4 = 4;
    if (has_ewma4()) {
      total_size += 1 + 8;
    }

    // optional uint64 exceptional_count = 5;
    if (has_exceptional_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exceptional_count());
    }

    // optional uint64 last = 6;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last());
    }

    // optional uint64 min = 7;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min());
    }

    // optional uint64 max = 8;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 sum = 9;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sum());
    }

    // optional double stddev = 10;
    if (has_stddev()) {
      total_size += 1 + 8;
    }

  }
  // repeated .LogCabin.Protocol.RollingStat.Exceptional last_exceptional = 11;
  total_size += 1 * this->last_exceptional_size();
  for (int i = 0; i < this->last_exceptional_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_exceptional(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollingStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollingStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollingStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollingStat::MergeFrom(const RollingStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_exceptional_.MergeFrom(from.last_exceptional_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_average()) {
      set_average(from.average());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_ewma2()) {
      set_ewma2(from.ewma2());
    }
    if (from.has_ewma4()) {
      set_ewma4(from.ewma4());
    }
    if (from.has_exceptional_count()) {
      set_exceptional_count(from.exceptional_count());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollingStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollingStat::CopyFrom(const RollingStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollingStat::IsInitialized() const {

  return true;
}

void RollingStat::Swap(RollingStat* other) {
  if (other != this) {
    std::swap(average_, other->average_);
    std::swap(count_, other->count_);
    std::swap(ewma2_, other->ewma2_);
    std::swap(ewma4_, other->ewma4_);
    std::swap(exceptional_count_, other->exceptional_count_);
    std::swap(last_, other->last_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(sum_, other->sum_);
    std::swap(stddev_, other->stddev_);
    last_exceptional_.Swap(&other->last_exceptional_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollingStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollingStat_descriptor_;
  metadata.reflection = RollingStat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerStats_Raft_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_Raft_State_descriptor_;
}
bool ServerStats_Raft_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerStats_Raft_State ServerStats_Raft::UNKNOWN;
const ServerStats_Raft_State ServerStats_Raft::FOLLOWER;
const ServerStats_Raft_State ServerStats_Raft::CANDIDATE;
const ServerStats_Raft_State ServerStats_Raft::LEADER;
const ServerStats_Raft_State ServerStats_Raft::State_MIN;
const ServerStats_Raft_State ServerStats_Raft::State_MAX;
const int ServerStats_Raft::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerStats_Raft_Peer::kServerIdFieldNumber;
const int ServerStats_Raft_Peer::kAddressesFieldNumber;
const int ServerStats_Raft_Peer::kOldMemberFieldNumber;
const int ServerStats_Raft_Peer::kNewMemberFieldNumber;
const int ServerStats_Raft_Peer::kStagingMemberFieldNumber;
const int ServerStats_Raft_Peer::kLastSyncedIndexFieldNumber;
const int ServerStats_Raft_Peer::kRequestVoteDoneFieldNumber;
const int ServerStats_Raft_Peer::kHaveVoteFieldNumber;
const int ServerStats_Raft_Peer::kSuppressBulkDataFieldNumber;
const int ServerStats_Raft_Peer::kNextIndexFieldNumber;
const int ServerStats_Raft_Peer::kLastAgreeIndexFieldNumber;
const int ServerStats_Raft_Peer::kIsCaughtUpFieldNumber;
const int ServerStats_Raft_Peer::kNextHeartbeatAtFieldNumber;
const int ServerStats_Raft_Peer::kBackoffUntilFieldNumber;
#endif  // !_MSC_VER

ServerStats_Raft_Peer::ServerStats_Raft_Peer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerStats.Raft.Peer)
}

void ServerStats_Raft_Peer::InitAsDefaultInstance() {
}

ServerStats_Raft_Peer::ServerStats_Raft_Peer(const ServerStats_Raft_Peer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerStats.Raft.Peer)
}

void ServerStats_Raft_Peer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_member_ = false;
  new_member_ = false;
  staging_member_ = false;
  last_synced_index_ = GOOGLE_ULONGLONG(0);
  request_vote_done_ = false;
  have_vote_ = false;
  suppress_bulk_data_ = false;
  next_index_ = GOOGLE_ULONGLONG(0);
  last_agree_index_ = GOOGLE_ULONGLONG(0);
  is_caught_up_ = false;
  next_heartbeat_at_ = GOOGLE_LONGLONG(0);
  backoff_until_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats_Raft_Peer::~ServerStats_Raft_Peer() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerStats.Raft.Peer)
  SharedDtor();
}

void ServerStats_Raft_Peer::SharedDtor() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (this != default_instance_) {
  }
}

void ServerStats_Raft_Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats_Raft_Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_Raft_Peer_descriptor_;
}

const ServerStats_Raft_Peer& ServerStats_Raft_Peer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

ServerStats_Raft_Peer* ServerStats_Raft_Peer::default_instance_ = NULL;

ServerStats_Raft_Peer* ServerStats_Raft_Peer::New() const {
  return new ServerStats_Raft_Peer;
}

void ServerStats_Raft_Peer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerStats_Raft_Peer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(last_synced_index_, have_vote_);
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_addresses()) {
      if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addresses_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(suppress_bulk_data_, backoff_until_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats_Raft_Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerStats.Raft.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addresses;
        break;
      }

      // optional string addresses = 2;
      case 2: {
        if (tag == 18) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addresses().data(), this->addresses().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addresses");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_old_member;
        break;
      }

      // optional bool old_member = 21;
      case 21: {
        if (tag == 168) {
         parse_old_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &old_member_)));
          set_has_old_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_new_member;
        break;
      }

      // optional bool new_member = 22;
      case 22: {
        if (tag == 176) {
         parse_new_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_member_)));
          set_has_new_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_staging_member;
        break;
      }

      // optional bool staging_member = 23;
      case 23: {
        if (tag == 184) {
         parse_staging_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &staging_member_)));
          set_has_staging_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_last_synced_index;
        break;
      }

      // optional uint64 last_synced_index = 31;
      case 31: {
        if (tag == 248) {
         parse_last_synced_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_synced_index_)));
          set_has_last_synced_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_request_vote_done;
        break;
      }

      // optional bool request_vote_done = 41;
      case 41: {
        if (tag == 328) {
         parse_request_vote_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_vote_done_)));
          set_has_request_vote_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_have_vote;
        break;
      }

      // optional bool have_vote = 42;
      case 42: {
        if (tag == 336) {
         parse_have_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_vote_)));
          set_has_have_vote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_suppress_bulk_data;
        break;
      }

      // optional bool suppress_bulk_data = 43;
      case 43: {
        if (tag == 344) {
         parse_suppress_bulk_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_bulk_data_)));
          set_has_suppress_bulk_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_next_index;
        break;
      }

      // optional uint64 next_index = 44;
      case 44: {
        if (tag == 352) {
         parse_next_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_index_)));
          set_has_next_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_last_agree_index;
        break;
      }

      // optional uint64 last_agree_index = 45;
      case 45: {
        if (tag == 360) {
         parse_last_agree_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_agree_index_)));
          set_has_last_agree_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_is_caught_up;
        break;
      }

      // optional bool is_caught_up = 46;
      case 46: {
        if (tag == 368) {
         parse_is_caught_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_caught_up_)));
          set_has_is_caught_up();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_next_heartbeat_at;
        break;
      }

      // optional int64 next_heartbeat_at = 51;
      case 51: {
        if (tag == 408) {
         parse_next_heartbeat_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_heartbeat_at_)));
          set_has_next_heartbeat_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_backoff_until;
        break;
      }

      // optional int64 backoff_until = 52;
      case 52: {
        if (tag == 416) {
         parse_backoff_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &backoff_until_)));
          set_has_backoff_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerStats.Raft.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerStats.Raft.Peer)
  return false;
#undef DO_
}

void ServerStats_Raft_Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerStats.Raft.Peer)
  // optional uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // optional string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addresses(), output);
  }

  // optional bool old_member = 21;
  if (has_old_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->old_member(), output);
  }

  // optional bool new_member = 22;
  if (has_new_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->new_member(), output);
  }

  // optional bool staging_member = 23;
  if (has_staging_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->staging_member(), output);
  }

  // optional uint64 last_synced_index = 31;
  if (has_last_synced_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->last_synced_index(), output);
  }

  // optional bool request_vote_done = 41;
  if (has_request_vote_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->request_vote_done(), output);
  }

  // optional bool have_vote = 42;
  if (has_have_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->have_vote(), output);
  }

  // optional bool suppress_bulk_data = 43;
  if (has_suppress_bulk_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->suppress_bulk_data(), output);
  }

  // optional uint64 next_index = 44;
  if (has_next_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->next_index(), output);
  }

  // optional uint64 last_agree_index = 45;
  if (has_last_agree_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->last_agree_index(), output);
  }

  // optional bool is_caught_up = 46;
  if (has_is_caught_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->is_caught_up(), output);
  }

  // optional int64 next_heartbeat_at = 51;
  if (has_next_heartbeat_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->next_heartbeat_at(), output);
  }

  // optional int64 backoff_until = 52;
  if (has_backoff_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->backoff_until(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerStats.Raft.Peer)
}

::google::protobuf::uint8* ServerStats_Raft_Peer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerStats.Raft.Peer)
  // optional uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // optional string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addresses(), target);
  }

  // optional bool old_member = 21;
  if (has_old_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->old_member(), target);
  }

  // optional bool new_member = 22;
  if (has_new_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->new_member(), target);
  }

  // optional bool staging_member = 23;
  if (has_staging_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->staging_member(), target);
  }

  // optional uint64 last_synced_index = 31;
  if (has_last_synced_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->last_synced_index(), target);
  }

  // optional bool request_vote_done = 41;
  if (has_request_vote_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->request_vote_done(), target);
  }

  // optional bool have_vote = 42;
  if (has_have_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->have_vote(), target);
  }

  // optional bool suppress_bulk_data = 43;
  if (has_suppress_bulk_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->suppress_bulk_data(), target);
  }

  // optional uint64 next_index = 44;
  if (has_next_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->next_index(), target);
  }

  // optional uint64 last_agree_index = 45;
  if (has_last_agree_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->last_agree_index(), target);
  }

  // optional bool is_caught_up = 46;
  if (has_is_caught_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->is_caught_up(), target);
  }

  // optional int64 next_heartbeat_at = 51;
  if (has_next_heartbeat_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->next_heartbeat_at(), target);
  }

  // optional int64 backoff_until = 52;
  if (has_backoff_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->backoff_until(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerStats.Raft.Peer)
  return target;
}

int ServerStats_Raft_Peer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional string addresses = 2;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addresses());
    }

    // optional bool old_member = 21;
    if (has_old_member()) {
      total_size += 2 + 1;
    }

    // optional bool new_member = 22;
    if (has_new_member()) {
      total_size += 2 + 1;
    }

    // optional bool staging_member = 23;
    if (has_staging_member()) {
      total_size += 2 + 1;
    }

    // optional uint64 last_synced_index = 31;
    if (has_last_synced_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_synced_index());
    }

    // optional bool request_vote_done = 41;
    if (has_request_vote_done()) {
      total_size += 2 + 1;
    }

    // optional bool have_vote = 42;
    if (has_have_vote()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool suppress_bulk_data = 43;
    if (has_suppress_bulk_data()) {
      total_size += 2 + 1;
    }

    // optional uint64 next_index = 44;
    if (has_next_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_index());
    }

    // optional uint64 last_agree_index = 45;
    if (has_last_agree_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_agree_index());
    }

    // optional bool is_caught_up = 46;
    if (has_is_caught_up()) {
      total_size += 2 + 1;
    }

    // optional int64 next_heartbeat_at = 51;
    if (has_next_heartbeat_at()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_heartbeat_at());
    }

    // optional int64 backoff_until = 52;
    if (has_backoff_until()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->backoff_until());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats_Raft_Peer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats_Raft_Peer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats_Raft_Peer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats_Raft_Peer::MergeFrom(const ServerStats_Raft_Peer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_addresses()) {
      set_addresses(from.addresses());
    }
    if (from.has_old_member()) {
      set_old_member(from.old_member());
    }
    if (from.has_new_member()) {
      set_new_member(from.new_member());
    }
    if (from.has_staging_member()) {
      set_staging_member(from.staging_member());
    }
    if (from.has_last_synced_index()) {
      set_last_synced_index(from.last_synced_index());
    }
    if (from.has_request_vote_done()) {
      set_request_vote_done(from.request_vote_done());
    }
    if (from.has_have_vote()) {
      set_have_vote(from.have_vote());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_suppress_bulk_data()) {
      set_suppress_bulk_data(from.suppress_bulk_data());
    }
    if (from.has_next_index()) {
      set_next_index(from.next_index());
    }
    if (from.has_last_agree_index()) {
      set_last_agree_index(from.last_agree_index());
    }
    if (from.has_is_caught_up()) {
      set_is_caught_up(from.is_caught_up());
    }
    if (from.has_next_heartbeat_at()) {
      set_next_heartbeat_at(from.next_heartbeat_at());
    }
    if (from.has_backoff_until()) {
      set_backoff_until(from.backoff_until());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats_Raft_Peer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats_Raft_Peer::CopyFrom(const ServerStats_Raft_Peer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats_Raft_Peer::IsInitialized() const {

  return true;
}

void ServerStats_Raft_Peer::Swap(ServerStats_Raft_Peer* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(addresses_, other->addresses_);
    std::swap(old_member_, other->old_member_);
    std::swap(new_member_, other->new_member_);
    std::swap(staging_member_, other->staging_member_);
    std::swap(last_synced_index_, other->last_synced_index_);
    std::swap(request_vote_done_, other->request_vote_done_);
    std::swap(have_vote_, other->have_vote_);
    std::swap(suppress_bulk_data_, other->suppress_bulk_data_);
    std::swap(next_index_, other->next_index_);
    std::swap(last_agree_index_, other->last_agree_index_);
    std::swap(is_caught_up_, other->is_caught_up_);
    std::swap(next_heartbeat_at_, other->next_heartbeat_at_);
    std::swap(backoff_until_, other->backoff_until_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats_Raft_Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_Raft_Peer_descriptor_;
  metadata.reflection = ServerStats_Raft_Peer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStats_Raft::kCurrentTermFieldNumber;
const int ServerStats_Raft::kStateFieldNumber;
const int ServerStats_Raft::kCommitIndexFieldNumber;
const int ServerStats_Raft::kLastLogIndexFieldNumber;
const int ServerStats_Raft::kLeaderIdFieldNumber;
const int ServerStats_Raft::kVotedForFieldNumber;
const int ServerStats_Raft::kStartElectionAtFieldNumber;
const int ServerStats_Raft::kWithholdVotesUntilFieldNumber;
const int ServerStats_Raft::kClusterTimeFieldNumber;
const int ServerStats_Raft::kClusterTimeEpochFieldNumber;
const int ServerStats_Raft::kLastSnapshotIndexFieldNumber;
const int ServerStats_Raft::kLastSnapshotBytesFieldNumber;
const int ServerStats_Raft::kLastSnapshotTermFieldNumber;
const int ServerStats_Raft::kLastSnapshotClusterTimeFieldNumber;
const int ServerStats_Raft::kLogStartIndexFieldNumber;
const int ServerStats_Raft::kLogBytesFieldNumber;
const int ServerStats_Raft::kNumEntriesTruncatedFieldNumber;
const int ServerStats_Raft::kPeerFieldNumber;
#endif  // !_MSC_VER

ServerStats_Raft::ServerStats_Raft()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerStats.Raft)
}

void ServerStats_Raft::InitAsDefaultInstance() {
}

ServerStats_Raft::ServerStats_Raft(const ServerStats_Raft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerStats.Raft)
}

void ServerStats_Raft::SharedCtor() {
  _cached_size_ = 0;
  current_term_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  commit_index_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  voted_for_ = GOOGLE_ULONGLONG(0);
  start_election_at_ = GOOGLE_LONGLONG(0);
  withhold_votes_until_ = GOOGLE_LONGLONG(0);
  cluster_time_ = GOOGLE_ULONGLONG(0);
  cluster_time_epoch_ = GOOGLE_ULONGLONG(0);
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
  last_snapshot_bytes_ = GOOGLE_ULONGLONG(0);
  last_snapshot_term_ = GOOGLE_ULONGLONG(0);
  last_snapshot_cluster_time_ = GOOGLE_ULONGLONG(0);
  log_start_index_ = GOOGLE_ULONGLONG(0);
  log_bytes_ = GOOGLE_ULONGLONG(0);
  num_entries_truncated_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats_Raft::~ServerStats_Raft() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerStats.Raft)
  SharedDtor();
}

void ServerStats_Raft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStats_Raft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats_Raft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_Raft_descriptor_;
}

const ServerStats_Raft& ServerStats_Raft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

ServerStats_Raft* ServerStats_Raft::default_instance_ = NULL;

ServerStats_Raft* ServerStats_Raft::New() const {
  return new ServerStats_Raft;
}

void ServerStats_Raft::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerStats_Raft*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(current_term_, withhold_votes_until_);
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(cluster_time_, log_bytes_);
  }
  num_entries_truncated_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  peer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats_Raft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerStats.Raft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 current_term = 11;
      case 11: {
        if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
          set_has_current_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_state;
        break;
      }

      // optional .LogCabin.Protocol.ServerStats.Raft.State state = 12;
      case 12: {
        if (tag == 96) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::ServerStats_Raft_State_IsValid(value)) {
            set_state(static_cast< ::LogCabin::Protocol::ServerStats_Raft_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_commit_index;
        break;
      }

      // optional uint64 commit_index = 13;
      case 13: {
        if (tag == 104) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 14;
      case 14: {
        if (tag == 112) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_leader_id;
        break;
      }

      // optional uint64 leader_id = 15;
      case 15: {
        if (tag == 120) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_voted_for;
        break;
      }

      // optional uint64 voted_for = 16;
      case 16: {
        if (tag == 128) {
         parse_voted_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voted_for_)));
          set_has_voted_for();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_start_election_at;
        break;
      }

      // optional int64 start_election_at = 21;
      case 21: {
        if (tag == 168) {
         parse_start_election_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_election_at_)));
          set_has_start_election_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_withhold_votes_until;
        break;
      }

      // optional int64 withhold_votes_until = 22;
      case 22: {
        if (tag == 176) {
         parse_withhold_votes_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &withhold_votes_until_)));
          set_has_withhold_votes_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_cluster_time;
        break;
      }

      // optional uint64 cluster_time = 23;
      case 23: {
        if (tag == 184) {
         parse_cluster_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_time_)));
          set_has_cluster_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_cluster_time_epoch;
        break;
      }

      // optional uint64 cluster_time_epoch = 24;
      case 24: {
        if (tag == 192) {
         parse_cluster_time_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_time_epoch_)));
          set_has_cluster_time_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_last_snapshot_index;
        break;
      }

      // optional uint64 last_snapshot_index = 31;
      case 31: {
        if (tag == 248) {
         parse_last_snapshot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_index_)));
          set_has_last_snapshot_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_last_snapshot_bytes;
        break;
      }

      // optional uint64 last_snapshot_bytes = 32;
      case 32: {
        if (tag == 256) {
         parse_last_snapshot_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_bytes_)));
          set_has_last_snapshot_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_log_start_index;
        break;
      }

      // optional uint64 log_start_index = 33;
      case 33: {
        if (tag == 264) {
         parse_log_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_start_index_)));
          set_has_log_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_log_bytes;
        break;
      }

      // optional uint64 log_bytes = 34;
      case 34: {
        if (tag == 272) {
         parse_log_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_bytes_)));
          set_has_log_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_last_snapshot_term;
        break;
      }

      // optional uint64 last_snapshot_term = 35;
      case 35: {
        if (tag == 280) {
         parse_last_snapshot_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_term_)));
          set_has_last_snapshot_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_last_snapshot_cluster_time;
        break;
      }

      // optional uint64 last_snapshot_cluster_time = 36;
      case 36: {
        if (tag == 288) {
         parse_last_snapshot_cluster_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_cluster_time_)));
          set_has_last_snapshot_cluster_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_num_entries_truncated;
        break;
      }

      // optional uint64 num_entries_truncated = 37;
      case 37: {
        if (tag == 296) {
         parse_num_entries_truncated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_entries_truncated_)));
          set_has_num_entries_truncated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_peer;
        break;
      }

      // repeated .LogCabin.Protocol.ServerStats.Raft.Peer peer = 91;
      case 91: {
        if (tag == 730) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_peer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerStats.Raft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerStats.Raft)
  return false;
#undef DO_
}

void ServerStats_Raft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerStats.Raft)
  // optional uint64 current_term = 11;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->current_term(), output);
  }

  // optional .LogCabin.Protocol.ServerStats.Raft.State state = 12;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->state(), output);
  }

  // optional uint64 commit_index = 13;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->commit_index(), output);
  }

  // optional uint64 last_log_index = 14;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->last_log_index(), output);
  }

  // optional uint64 leader_id = 15;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->leader_id(), output);
  }

  // optional uint64 voted_for = 16;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->voted_for(), output);
  }

  // optional int64 start_election_at = 21;
  if (has_start_election_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->start_election_at(), output);
  }

  // optional int64 withhold_votes_until = 22;
  if (has_withhold_votes_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->withhold_votes_until(), output);
  }

  // optional uint64 cluster_time = 23;
  if (has_cluster_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->cluster_time(), output);
  }

  // optional uint64 cluster_time_epoch = 24;
  if (has_cluster_time_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->cluster_time_epoch(), output);
  }

  // optional uint64 last_snapshot_index = 31;
  if (has_last_snapshot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->last_snapshot_index(), output);
  }

  // optional uint64 last_snapshot_bytes = 32;
  if (has_last_snapshot_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->last_snapshot_bytes(), output);
  }

  // optional uint64 log_start_index = 33;
  if (has_log_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->log_start_index(), output);
  }

  // optional uint64 log_bytes = 34;
  if (has_log_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->log_bytes(), output);
  }

  // optional uint64 last_snapshot_term = 35;
  if (has_last_snapshot_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->last_snapshot_term(), output);
  }

  // optional uint64 last_snapshot_cluster_time = 36;
  if (has_last_snapshot_cluster_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->last_snapshot_cluster_time(), output);
  }

  // optional uint64 num_entries_truncated = 37;
  if (has_num_entries_truncated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->num_entries_truncated(), output);
  }

  // repeated .LogCabin.Protocol.ServerStats.Raft.Peer peer = 91;
  for (int i = 0; i < this->peer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, this->peer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerStats.Raft)
}

::google::protobuf::uint8* ServerStats_Raft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerStats.Raft)
  // optional uint64 current_term = 11;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->current_term(), target);
  }

  // optional .LogCabin.Protocol.ServerStats.Raft.State state = 12;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->state(), target);
  }

  // optional uint64 commit_index = 13;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->commit_index(), target);
  }

  // optional uint64 last_log_index = 14;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->last_log_index(), target);
  }

  // optional uint64 leader_id = 15;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->leader_id(), target);
  }

  // optional uint64 voted_for = 16;
  if (has_voted_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->voted_for(), target);
  }

  // optional int64 start_election_at = 21;
  if (has_start_election_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->start_election_at(), target);
  }

  // optional int64 withhold_votes_until = 22;
  if (has_withhold_votes_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->withhold_votes_until(), target);
  }

  // optional uint64 cluster_time = 23;
  if (has_cluster_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->cluster_time(), target);
  }

  // optional uint64 cluster_time_epoch = 24;
  if (has_cluster_time_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->cluster_time_epoch(), target);
  }

  // optional uint64 last_snapshot_index = 31;
  if (has_last_snapshot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->last_snapshot_index(), target);
  }

  // optional uint64 last_snapshot_bytes = 32;
  if (has_last_snapshot_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->last_snapshot_bytes(), target);
  }

  // optional uint64 log_start_index = 33;
  if (has_log_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->log_start_index(), target);
  }

  // optional uint64 log_bytes = 34;
  if (has_log_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->log_bytes(), target);
  }

  // optional uint64 last_snapshot_term = 35;
  if (has_last_snapshot_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->last_snapshot_term(), target);
  }

  // optional uint64 last_snapshot_cluster_time = 36;
  if (has_last_snapshot_cluster_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->last_snapshot_cluster_time(), target);
  }

  // optional uint64 num_entries_truncated = 37;
  if (has_num_entries_truncated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->num_entries_truncated(), target);
  }

  // repeated .LogCabin.Protocol.ServerStats.Raft.Peer peer = 91;
  for (int i = 0; i < this->peer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        91, this->peer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerStats.Raft)
  return target;
}

int ServerStats_Raft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 current_term = 11;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_term());
    }

    // optional .LogCabin.Protocol.ServerStats.Raft.State state = 12;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 commit_index = 13;
    if (has_commit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_index());
    }

    // optional uint64 last_log_index = 14;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // optional uint64 leader_id = 15;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_id());
    }

    // optional uint64 voted_for = 16;
    if (has_voted_for()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->voted_for());
    }

    // optional int64 start_election_at = 21;
    if (has_start_election_at()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_election_at());
    }

    // optional int64 withhold_votes_until = 22;
    if (has_withhold_votes_until()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->withhold_votes_until());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cluster_time = 23;
    if (has_cluster_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_time());
    }

    // optional uint64 cluster_time_epoch = 24;
    if (has_cluster_time_epoch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_time_epoch());
    }

    // optional uint64 last_snapshot_index = 31;
    if (has_last_snapshot_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_index());
    }

    // optional uint64 last_snapshot_bytes = 32;
    if (has_last_snapshot_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_bytes());
    }

    // optional uint64 last_snapshot_term = 35;
    if (has_last_snapshot_term()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_term());
    }

    // optional uint64 last_snapshot_cluster_time = 36;
    if (has_last_snapshot_cluster_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_cluster_time());
    }

    // optional uint64 log_start_index = 33;
    if (has_log_start_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_start_index());
    }

    // optional uint64 log_bytes = 34;
    if (has_log_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_bytes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 num_entries_truncated = 37;
    if (has_num_entries_truncated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_entries_truncated());
    }

  }
  // repeated .LogCabin.Protocol.ServerStats.Raft.Peer peer = 91;
  total_size += 2 * this->peer_size();
  for (int i = 0; i < this->peer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats_Raft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats_Raft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats_Raft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats_Raft::MergeFrom(const ServerStats_Raft& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_.MergeFrom(from.peer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_voted_for()) {
      set_voted_for(from.voted_for());
    }
    if (from.has_start_election_at()) {
      set_start_election_at(from.start_election_at());
    }
    if (from.has_withhold_votes_until()) {
      set_withhold_votes_until(from.withhold_votes_until());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cluster_time()) {
      set_cluster_time(from.cluster_time());
    }
    if (from.has_cluster_time_epoch()) {
      set_cluster_time_epoch(from.cluster_time_epoch());
    }
    if (from.has_last_snapshot_index()) {
      set_last_snapshot_index(from.last_snapshot_index());
    }
    if (from.has_last_snapshot_bytes()) {
      set_last_snapshot_bytes(from.last_snapshot_bytes());
    }
    if (from.has_last_snapshot_term()) {
      set_last_snapshot_term(from.last_snapshot_term());
    }
    if (from.has_last_snapshot_cluster_time()) {
      set_last_snapshot_cluster_time(from.last_snapshot_cluster_time());
    }
    if (from.has_log_start_index()) {
      set_log_start_index(from.log_start_index());
    }
    if (from.has_log_bytes()) {
      set_log_bytes(from.log_bytes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_num_entries_truncated()) {
      set_num_entries_truncated(from.num_entries_truncated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats_Raft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats_Raft::CopyFrom(const ServerStats_Raft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats_Raft::IsInitialized() const {

  return true;
}

void ServerStats_Raft::Swap(ServerStats_Raft* other) {
  if (other != this) {
    std::swap(current_term_, other->current_term_);
    std::swap(state_, other->state_);
    std::swap(commit_index_, other->commit_index_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(voted_for_, other->voted_for_);
    std::swap(start_election_at_, other->start_election_at_);
    std::swap(withhold_votes_until_, other->withhold_votes_until_);
    std::swap(cluster_time_, other->cluster_time_);
    std::swap(cluster_time_epoch_, other->cluster_time_epoch_);
    std::swap(last_snapshot_index_, other->last_snapshot_index_);
    std::swap(last_snapshot_bytes_, other->last_snapshot_bytes_);
    std::swap(last_snapshot_term_, other->last_snapshot_term_);
    std::swap(last_snapshot_cluster_time_, other->last_snapshot_cluster_time_);
    std::swap(log_start_index_, other->log_start_index_);
    std::swap(log_bytes_, other->log_bytes_);
    std::swap(num_entries_truncated_, other->num_entries_truncated_);
    peer_.Swap(&other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats_Raft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_Raft_descriptor_;
  metadata.reflection = ServerStats_Raft_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStats_Storage::kNumSegmentsFieldNumber;
const int ServerStats_Storage::kOpenSegmentBytesFieldNumber;
const int ServerStats_Storage::kMetadataVersionFieldNumber;
const int ServerStats_Storage::kMetadataWriteNanosFieldNumber;
const int ServerStats_Storage::kFilesystemOpsNanosFieldNumber;
#endif  // !_MSC_VER

ServerStats_Storage::ServerStats_Storage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerStats.Storage)
}

void ServerStats_Storage::InitAsDefaultInstance() {
  metadata_write_nanos_ = const_cast< ::LogCabin::Protocol::RollingStat*>(&::LogCabin::Protocol::RollingStat::default_instance());
  filesystem_ops_nanos_ = const_cast< ::LogCabin::Protocol::RollingStat*>(&::LogCabin::Protocol::RollingStat::default_instance());
}

ServerStats_Storage::ServerStats_Storage(const ServerStats_Storage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerStats.Storage)
}

void ServerStats_Storage::SharedCtor() {
  _cached_size_ = 0;
  num_segments_ = GOOGLE_ULONGLONG(0);
  open_segment_bytes_ = GOOGLE_ULONGLONG(0);
  metadata_version_ = GOOGLE_ULONGLONG(0);
  metadata_write_nanos_ = NULL;
  filesystem_ops_nanos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats_Storage::~ServerStats_Storage() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerStats.Storage)
  SharedDtor();
}

void ServerStats_Storage::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_write_nanos_;
    delete filesystem_ops_nanos_;
  }
}

void ServerStats_Storage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats_Storage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_Storage_descriptor_;
}

const ServerStats_Storage& ServerStats_Storage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

ServerStats_Storage* ServerStats_Storage::default_instance_ = NULL;

ServerStats_Storage* ServerStats_Storage::New() const {
  return new ServerStats_Storage;
}

void ServerStats_Storage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerStats_Storage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(num_segments_, metadata_version_);
    if (has_metadata_write_nanos()) {
      if (metadata_write_nanos_ != NULL) metadata_write_nanos_->::LogCabin::Protocol::RollingStat::Clear();
    }
    if (has_filesystem_ops_nanos()) {
      if (filesystem_ops_nanos_ != NULL) filesystem_ops_nanos_->::LogCabin::Protocol::RollingStat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats_Storage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerStats.Storage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 num_segments = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_segments_)));
          set_has_num_segments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open_segment_bytes;
        break;
      }

      // optional uint64 open_segment_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_open_segment_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_segment_bytes_)));
          set_has_open_segment_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_metadata_version;
        break;
      }

      // optional uint64 metadata_version = 3;
      case 3: {
        if (tag == 24) {
         parse_metadata_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &metadata_version_)));
          set_has_metadata_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metadata_write_nanos;
        break;
      }

      // optional .LogCabin.Protocol.RollingStat metadata_write_nanos = 4;
      case 4: {
        if (tag == 34) {
         parse_metadata_write_nanos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata_write_nanos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filesystem_ops_nanos;
        break;
      }

      // optional .LogCabin.Protocol.RollingStat filesystem_ops_nanos = 5;
      case 5: {
        if (tag == 42) {
         parse_filesystem_ops_nanos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filesystem_ops_nanos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerStats.Storage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerStats.Storage)
  return false;
#undef DO_
}

void ServerStats_Storage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerStats.Storage)
  // optional uint64 num_segments = 1;
  if (has_num_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->num_segments(), output);
  }

  // optional uint64 open_segment_bytes = 2;
  if (has_open_segment_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->open_segment_bytes(), output);
  }

  // optional uint64 metadata_version = 3;
  if (has_metadata_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->metadata_version(), output);
  }

  // optional .LogCabin.Protocol.RollingStat metadata_write_nanos = 4;
  if (has_metadata_write_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metadata_write_nanos(), output);
  }

  // optional .LogCabin.Protocol.RollingStat filesystem_ops_nanos = 5;
  if (has_filesystem_ops_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filesystem_ops_nanos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerStats.Storage)
}

::google::protobuf::uint8* ServerStats_Storage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerStats.Storage)
  // optional uint64 num_segments = 1;
  if (has_num_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->num_segments(), target);
  }

  // optional uint64 open_segment_bytes = 2;
  if (has_open_segment_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->open_segment_bytes(), target);
  }

  // optional uint64 metadata_version = 3;
  if (has_metadata_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->metadata_version(), target);
  }

  // optional .LogCabin.Protocol.RollingStat metadata_write_nanos = 4;
  if (has_metadata_write_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->metadata_write_nanos(), target);
  }

  // optional .LogCabin.Protocol.RollingStat filesystem_ops_nanos = 5;
  if (has_filesystem_ops_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filesystem_ops_nanos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerStats.Storage)
  return target;
}

int ServerStats_Storage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 num_segments = 1;
    if (has_num_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_segments());
    }

    // optional uint64 open_segment_bytes = 2;
    if (has_open_segment_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_segment_bytes());
    }

    // optional uint64 metadata_version = 3;
    if (has_metadata_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->metadata_version());
    }

    // optional .LogCabin.Protocol.RollingStat metadata_write_nanos = 4;
    if (has_metadata_write_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata_write_nanos());
    }

    // optional .LogCabin.Protocol.RollingStat filesystem_ops_nanos = 5;
    if (has_filesystem_ops_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filesystem_ops_nanos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats_Storage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats_Storage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats_Storage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats_Storage::MergeFrom(const ServerStats_Storage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_segments()) {
      set_num_segments(from.num_segments());
    }
    if (from.has_open_segment_bytes()) {
      set_open_segment_bytes(from.open_segment_bytes());
    }
    if (from.has_metadata_version()) {
      set_metadata_version(from.metadata_version());
    }
    if (from.has_metadata_write_nanos()) {
      mutable_metadata_write_nanos()->::LogCabin::Protocol::RollingStat::MergeFrom(from.metadata_write_nanos());
    }
    if (from.has_filesystem_ops_nanos()) {
      mutable_filesystem_ops_nanos()->::LogCabin::Protocol::RollingStat::MergeFrom(from.filesystem_ops_nanos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats_Storage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats_Storage::CopyFrom(const ServerStats_Storage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats_Storage::IsInitialized() const {

  return true;
}

void ServerStats_Storage::Swap(ServerStats_Storage* other) {
  if (other != this) {
    std::swap(num_segments_, other->num_segments_);
    std::swap(open_segment_bytes_, other->open_segment_bytes_);
    std::swap(metadata_version_, other->metadata_version_);
    std::swap(metadata_write_nanos_, other->metadata_write_nanos_);
    std::swap(filesystem_ops_nanos_, other->filesystem_ops_nanos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats_Storage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_Storage_descriptor_;
  metadata.reflection = ServerStats_Storage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStats_Tree::kNumConditionsCheckedFieldNumber;
const int ServerStats_Tree::kNumConditionsFailedFieldNumber;
const int ServerStats_Tree::kNumMakeDirectoryAttemptedFieldNumber;
const int ServerStats_Tree::kNumMakeDirectorySuccessFieldNumber;
const int ServerStats_Tree::kNumListDirectoryAttemptedFieldNumber;
const int ServerStats_Tree::kNumListDirectorySuccessFieldNumber;
const int ServerStats_Tree::kNumRemoveDirectoryAttemptedFieldNumber;
const int ServerStats_Tree::kNumRemoveDirectoryParentNotFoundFieldNumber;
const int ServerStats_Tree::kNumRemoveDirectoryTargetNotFoundFieldNumber;
const int ServerStats_Tree::kNumRemoveDirectoryDoneFieldNumber;
const int ServerStats_Tree::kNumRemoveDirectorySuccessFieldNumber;
const int ServerStats_Tree::kNumWriteAttemptedFieldNumber;
const int ServerStats_Tree::kNumWriteSuccessFieldNumber;
const int ServerStats_Tree::kNumReadAttemptedFieldNumber;
const int ServerStats_Tree::kNumReadSuccessFieldNumber;
const int ServerStats_Tree::kNumRemoveFileAttemptedFieldNumber;
const int ServerStats_Tree::kNumRemoveFileParentNotFoundFieldNumber;
const int ServerStats_Tree::kNumRemoveFileTargetNotFoundFieldNumber;
const int ServerStats_Tree::kNumRemoveFileDoneFieldNumber;
const int ServerStats_Tree::kNumRemoveFileSuccessFieldNumber;
#endif  // !_MSC_VER

ServerStats_Tree::ServerStats_Tree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerStats.Tree)
}

void ServerStats_Tree::InitAsDefaultInstance() {
}

ServerStats_Tree::ServerStats_Tree(const ServerStats_Tree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerStats.Tree)
}

void ServerStats_Tree::SharedCtor() {
  _cached_size_ = 0;
  num_conditions_checked_ = GOOGLE_ULONGLONG(0);
  num_conditions_failed_ = GOOGLE_ULONGLONG(0);
  num_make_directory_attempted_ = GOOGLE_ULONGLONG(0);
  num_make_directory_success_ = GOOGLE_ULONGLONG(0);
  num_list_directory_attempted_ = GOOGLE_ULONGLONG(0);
  num_list_directory_success_ = GOOGLE_ULONGLONG(0);
  num_remove_directory_attempted_ = GOOGLE_ULONGLONG(0);
  num_remove_directory_parent_not_found_ = GOOGLE_ULONGLONG(0);
  num_remove_directory_target_not_found_ = GOOGLE_ULONGLONG(0);
  num_remove_directory_done_ = GOOGLE_ULONGLONG(0);
  num_remove_directory_success_ = GOOGLE_ULONGLONG(0);
  num_write_attempted_ = GOOGLE_ULONGLONG(0);
  num_write_success_ = GOOGLE_ULONGLONG(0);
  num_read_attempted_ = GOOGLE_ULONGLONG(0);
  num_read_success_ = GOOGLE_ULONGLONG(0);
  num_remove_file_attempted_ = GOOGLE_ULONGLONG(0);
  num_remove_file_parent_not_found_ = GOOGLE_ULONGLONG(0);
  num_remove_file_target_not_found_ = GOOGLE_ULONGLONG(0);
  num_remove_file_done_ = GOOGLE_ULONGLONG(0);
  num_remove_file_success_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats_Tree::~ServerStats_Tree() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerStats.Tree)
  SharedDtor();
}

void ServerStats_Tree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStats_Tree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats_Tree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_Tree_descriptor_;
}

const ServerStats_Tree& ServerStats_Tree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

ServerStats_Tree* ServerStats_Tree::default_instance_ = NULL;

ServerStats_Tree* ServerStats_Tree::New() const {
  return new ServerStats_Tree;
}

void ServerStats_Tree::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerStats_Tree*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(num_conditions_checked_, num_remove_directory_parent_not_found_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(num_remove_directory_target_not_found_, num_remove_file_attempted_);
  }
  ZR_(num_remove_file_parent_not_found_, num_remove_file_success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats_Tree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerStats.Tree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 num_conditions_checked = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_conditions_checked_)));
          set_has_num_conditions_checked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_conditions_failed;
        break;
      }

      // optional uint64 num_conditions_failed = 2;
      case 2: {
        if (tag == 16) {
         parse_num_conditions_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_conditions_failed_)));
          set_has_num_conditions_failed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_make_directory_attempted;
        break;
      }

      // optional uint64 num_make_directory_attempted = 3;
      case 3: {
        if (tag == 24) {
         parse_num_make_directory_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_make_directory_attempted_)));
          set_has_num_make_directory_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_make_directory_success;
        break;
      }

      // optional uint64 num_make_directory_success = 4;
      case 4: {
        if (tag == 32) {
         parse_num_make_directory_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_make_directory_success_)));
          set_has_num_make_directory_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_list_directory_attempted;
        break;
      }

      // optional uint64 num_list_directory_attempted = 5;
      case 5: {
        if (tag == 40) {
         parse_num_list_directory_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_list_directory_attempted_)));
          set_has_num_list_directory_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_list_directory_success;
        break;
      }

      // optional uint64 num_list_directory_success = 6;
      case 6: {
        if (tag == 48) {
         parse_num_list_directory_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_list_directory_success_)));
          set_has_num_list_directory_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_remove_directory_attempted;
        break;
      }

      // optional uint64 num_remove_directory_attempted = 7;
      case 7: {
        if (tag == 56) {
         parse_num_remove_directory_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_directory_attempted_)));
          set_has_num_remove_directory_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_remove_directory_parent_not_found;
        break;
      }

      // optional uint64 num_remove_directory_parent_not_found = 8;
      case 8: {
        if (tag == 64) {
         parse_num_remove_directory_parent_not_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_directory_parent_not_found_)));
          set_has_num_remove_directory_parent_not_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_remove_directory_target_not_found;
        break;
      }

      // optional uint64 num_remove_directory_target_not_found = 9;
      case 9: {
        if (tag == 72) {
         parse_num_remove_directory_target_not_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_directory_target_not_found_)));
          set_has_num_remove_directory_target_not_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_remove_directory_done;
        break;
      }

      // optional uint64 num_remove_directory_done = 10;
      case 10: {
        if (tag == 80) {
         parse_num_remove_directory_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_directory_done_)));
          set_has_num_remove_directory_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num_remove_directory_success;
        break;
      }

      // optional uint64 num_remove_directory_success = 11;
      case 11: {
        if (tag == 88) {
         parse_num_remove_directory_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_directory_success_)));
          set_has_num_remove_directory_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_num_write_attempted;
        break;
      }

      // optional uint64 num_write_attempted = 12;
      case 12: {
        if (tag == 96) {
         parse_num_write_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_write_attempted_)));
          set_has_num_write_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_num_write_success;
        break;
      }

      // optional uint64 num_write_success = 13;
      case 13: {
        if (tag == 104) {
         parse_num_write_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_write_success_)));
          set_has_num_write_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_num_read_attempted;
        break;
      }

      // optional uint64 num_read_attempted = 14;
      case 14: {
        if (tag == 112) {
         parse_num_read_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_read_attempted_)));
          set_has_num_read_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_num_read_success;
        break;
      }

      // optional uint64 num_read_success = 15;
      case 15: {
        if (tag == 120) {
         parse_num_read_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_read_success_)));
          set_has_num_read_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_num_remove_file_attempted;
        break;
      }

      // optional uint64 num_remove_file_attempted = 16;
      case 16: {
        if (tag == 128) {
         parse_num_remove_file_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_file_attempted_)));
          set_has_num_remove_file_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_num_remove_file_parent_not_found;
        break;
      }

      // optional uint64 num_remove_file_parent_not_found = 17;
      case 17: {
        if (tag == 136) {
         parse_num_remove_file_parent_not_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_file_parent_not_found_)));
          set_has_num_remove_file_parent_not_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_num_remove_file_target_not_found;
        break;
      }

      // optional uint64 num_remove_file_target_not_found = 18;
      case 18: {
        if (tag == 144) {
         parse_num_remove_file_target_not_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_file_target_not_found_)));
          set_has_num_remove_file_target_not_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_num_remove_file_done;
        break;
      }

      // optional uint64 num_remove_file_done = 19;
      case 19: {
        if (tag == 152) {
         parse_num_remove_file_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_file_done_)));
          set_has_num_remove_file_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_num_remove_file_success;
        break;
      }

      // optional uint64 num_remove_file_success = 20;
      case 20: {
        if (tag == 160) {
         parse_num_remove_file_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_remove_file_success_)));
          set_has_num_remove_file_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerStats.Tree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerStats.Tree)
  return false;
#undef DO_
}

void ServerStats_Tree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerStats.Tree)
  // optional uint64 num_conditions_checked = 1;
  if (has_num_conditions_checked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->num_conditions_checked(), output);
  }

  // optional uint64 num_conditions_failed = 2;
  if (has_num_conditions_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_conditions_failed(), output);
  }

  // optional uint64 num_make_directory_attempted = 3;
  if (has_num_make_directory_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->num_make_directory_attempted(), output);
  }

  // optional uint64 num_make_directory_success = 4;
  if (has_num_make_directory_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->num_make_directory_success(), output);
  }

  // optional uint64 num_list_directory_attempted = 5;
  if (has_num_list_directory_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->num_list_directory_attempted(), output);
  }

  // optional uint64 num_list_directory_success = 6;
  if (has_num_list_directory_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_list_directory_success(), output);
  }

  // optional uint64 num_remove_directory_attempted = 7;
  if (has_num_remove_directory_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->num_remove_directory_attempted(), output);
  }

  // optional uint64 num_remove_directory_parent_not_found = 8;
  if (has_num_remove_directory_parent_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->num_remove_directory_parent_not_found(), output);
  }

  // optional uint64 num_remove_directory_target_not_found = 9;
  if (has_num_remove_directory_target_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->num_remove_directory_target_not_found(), output);
  }

  // optional uint64 num_remove_directory_done = 10;
  if (has_num_remove_directory_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->num_remove_directory_done(), output);
  }

  // optional uint64 num_remove_directory_success = 11;
  if (has_num_remove_directory_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->num_remove_directory_success(), output);
  }

  // optional uint64 num_write_attempted = 12;
  if (has_num_write_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->num_write_attempted(), output);
  }

  // optional uint64 num_write_success = 13;
  if (has_num_write_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->num_write_success(), output);
  }

  // optional uint64 num_read_attempted = 14;
  if (has_num_read_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->num_read_attempted(), output);
  }

  // optional uint64 num_read_success = 15;
  if (has_num_read_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->num_read_success(), output);
  }

  // optional uint64 num_remove_file_attempted = 16;
  if (has_num_remove_file_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->num_remove_file_attempted(), output);
  }

  // optional uint64 num_remove_file_parent_not_found = 17;
  if (has_num_remove_file_parent_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->num_remove_file_parent_not_found(), output);
  }

  // optional uint64 num_remove_file_target_not_found = 18;
  if (has_num_remove_file_target_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->num_remove_file_target_not_found(), output);
  }

  // optional uint64 num_remove_file_done = 19;
  if (has_num_remove_file_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->num_remove_file_done(), output);
  }

  // optional uint64 num_remove_file_success = 20;
  if (has_num_remove_file_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->num_remove_file_success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerStats.Tree)
}

::google::protobuf::uint8* ServerStats_Tree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerStats.Tree)
  // optional uint64 num_conditions_checked = 1;
  if (has_num_conditions_checked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->num_conditions_checked(), target);
  }

  // optional uint64 num_conditions_failed = 2;
  if (has_num_conditions_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_conditions_failed(), target);
  }

  // optional uint64 num_make_directory_attempted = 3;
  if (has_num_make_directory_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->num_make_directory_attempted(), target);
  }

  // optional uint64 num_make_directory_success = 4;
  if (has_num_make_directory_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->num_make_directory_success(), target);
  }

  // optional uint64 num_list_directory_attempted = 5;
  if (has_num_list_directory_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_list_directory_attempted(), target);
  }

  // optional uint64 num_list_directory_success = 6;
  if (has_num_list_directory_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_list_directory_success(), target);
  }

  // optional uint64 num_remove_directory_attempted = 7;
  if (has_num_remove_directory_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->num_remove_directory_attempted(), target);
  }

  // optional uint64 num_remove_directory_parent_not_found = 8;
  if (has_num_remove_directory_parent_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->num_remove_directory_parent_not_found(), target);
  }

  // optional uint64 num_remove_directory_target_not_found = 9;
  if (has_num_remove_directory_target_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->num_remove_directory_target_not_found(), target);
  }

  // optional uint64 num_remove_directory_done = 10;
  if (has_num_remove_directory_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->num_remove_directory_done(), target);
  }

  // optional uint64 num_remove_directory_success = 11;
  if (has_num_remove_directory_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->num_remove_directory_success(), target);
  }

  // optional uint64 num_write_attempted = 12;
  if (has_num_write_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->num_write_attempted(), target);
  }

  // optional uint64 num_write_success = 13;
  if (has_num_write_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->num_write_success(), target);
  }

  // optional uint64 num_read_attempted = 14;
  if (has_num_read_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->num_read_attempted(), target);
  }

  // optional uint64 num_read_success = 15;
  if (has_num_read_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->num_read_success(), target);
  }

  // optional uint64 num_remove_file_attempted = 16;
  if (has_num_remove_file_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->num_remove_file_attempted(), target);
  }

  // optional uint64 num_remove_file_parent_not_found = 17;
  if (has_num_remove_file_parent_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->num_remove_file_parent_not_found(), target);
  }

  // optional uint64 num_remove_file_target_not_found = 18;
  if (has_num_remove_file_target_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->num_remove_file_target_not_found(), target);
  }

  // optional uint64 num_remove_file_done = 19;
  if (has_num_remove_file_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->num_remove_file_done(), target);
  }

  // optional uint64 num_remove_file_success = 20;
  if (has_num_remove_file_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->num_remove_file_success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerStats.Tree)
  return target;
}

int ServerStats_Tree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 num_conditions_checked = 1;
    if (has_num_conditions_checked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_conditions_checked());
    }

    // optional uint64 num_conditions_failed = 2;
    if (has_num_conditions_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_conditions_failed());
    }

    // optional uint64 num_make_directory_attempted = 3;
    if (has_num_make_directory_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_make_directory_attempted());
    }

    // optional uint64 num_make_directory_success = 4;
    if (has_num_make_directory_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_make_directory_success());
    }

    // optional uint64 num_list_directory_attempted = 5;
    if (has_num_list_directory_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_list_directory_attempted());
    }

    // optional uint64 num_list_directory_success = 6;
    if (has_num_list_directory_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_list_directory_success());
    }

    // optional uint64 num_remove_directory_attempted = 7;
    if (has_num_remove_directory_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_directory_attempted());
    }

    // optional uint64 num_remove_directory_parent_not_found = 8;
    if (has_num_remove_directory_parent_not_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_directory_parent_not_found());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 num_remove_directory_target_not_found = 9;
    if (has_num_remove_directory_target_not_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_directory_target_not_found());
    }

    // optional uint64 num_remove_directory_done = 10;
    if (has_num_remove_directory_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_directory_done());
    }

    // optional uint64 num_remove_directory_success = 11;
    if (has_num_remove_directory_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_directory_success());
    }

    // optional uint64 num_write_attempted = 12;
    if (has_num_write_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_write_attempted());
    }

    // optional uint64 num_write_success = 13;
    if (has_num_write_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_write_success());
    }

    // optional uint64 num_read_attempted = 14;
    if (has_num_read_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_read_attempted());
    }

    // optional uint64 num_read_success = 15;
    if (has_num_read_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_read_success());
    }

    // optional uint64 num_remove_file_attempted = 16;
    if (has_num_remove_file_attempted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_file_attempted());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 num_remove_file_parent_not_found = 17;
    if (has_num_remove_file_parent_not_found()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_file_parent_not_found());
    }

    // optional uint64 num_remove_file_target_not_found = 18;
    if (has_num_remove_file_target_not_found()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_file_target_not_found());
    }

    // optional uint64 num_remove_file_done = 19;
    if (has_num_remove_file_done()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_file_done());
    }

    // optional uint64 num_remove_file_success = 20;
    if (has_num_remove_file_success()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_remove_file_success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats_Tree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats_Tree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats_Tree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats_Tree::MergeFrom(const ServerStats_Tree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_conditions_checked()) {
      set_num_conditions_checked(from.num_conditions_checked());
    }
    if (from.has_num_conditions_failed()) {
      set_num_conditions_failed(from.num_conditions_failed());
    }
    if (from.has_num_make_directory_attempted()) {
      set_num_make_directory_attempted(from.num_make_directory_attempted());
    }
    if (from.has_num_make_directory_success()) {
      set_num_make_directory_success(from.num_make_directory_success());
    }
    if (from.has_num_list_directory_attempted()) {
      set_num_list_directory_attempted(from.num_list_directory_attempted());
    }
    if (from.has_num_list_directory_success()) {
      set_num_list_directory_success(from.num_list_directory_success());
    }
    if (from.has_num_remove_directory_attempted()) {
      set_num_remove_directory_attempted(from.num_remove_directory_attempted());
    }
    if (from.has_num_remove_directory_parent_not_found()) {
      set_num_remove_directory_parent_not_found(from.num_remove_directory_parent_not_found());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_remove_directory_target_not_found()) {
      set_num_remove_directory_target_not_found(from.num_remove_directory_target_not_found());
    }
    if (from.has_num_remove_directory_done()) {
      set_num_remove_directory_done(from.num_remove_directory_done());
    }
    if (from.has_num_remove_directory_success()) {
      set_num_remove_directory_success(from.num_remove_directory_success());
    }
    if (from.has_num_write_attempted()) {
      set_num_write_attempted(from.num_write_attempted());
    }
    if (from.has_num_write_success()) {
      set_num_write_success(from.num_write_success());
    }
    if (from.has_num_read_attempted()) {
      set_num_read_attempted(from.num_read_attempted());
    }
    if (from.has_num_read_success()) {
      set_num_read_success(from.num_read_success());
    }
    if (from.has_num_remove_file_attempted()) {
      set_num_remove_file_attempted(from.num_remove_file_attempted());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_num_remove_file_parent_not_found()) {
      set_num_remove_file_parent_not_found(from.num_remove_file_parent_not_found());
    }
    if (from.has_num_remove_file_target_not_found()) {
      set_num_remove_file_target_not_found(from.num_remove_file_target_not_found());
    }
    if (from.has_num_remove_file_done()) {
      set_num_remove_file_done(from.num_remove_file_done());
    }
    if (from.has_num_remove_file_success()) {
      set_num_remove_file_success(from.num_remove_file_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats_Tree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats_Tree::CopyFrom(const ServerStats_Tree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats_Tree::IsInitialized() const {

  return true;
}

void ServerStats_Tree::Swap(ServerStats_Tree* other) {
  if (other != this) {
    std::swap(num_conditions_checked_, other->num_conditions_checked_);
    std::swap(num_conditions_failed_, other->num_conditions_failed_);
    std::swap(num_make_directory_attempted_, other->num_make_directory_attempted_);
    std::swap(num_make_directory_success_, other->num_make_directory_success_);
    std::swap(num_list_directory_attempted_, other->num_list_directory_attempted_);
    std::swap(num_list_directory_success_, other->num_list_directory_success_);
    std::swap(num_remove_directory_attempted_, other->num_remove_directory_attempted_);
    std::swap(num_remove_directory_parent_not_found_, other->num_remove_directory_parent_not_found_);
    std::swap(num_remove_directory_target_not_found_, other->num_remove_directory_target_not_found_);
    std::swap(num_remove_directory_done_, other->num_remove_directory_done_);
    std::swap(num_remove_directory_success_, other->num_remove_directory_success_);
    std::swap(num_write_attempted_, other->num_write_attempted_);
    std::swap(num_write_success_, other->num_write_success_);
    std::swap(num_read_attempted_, other->num_read_attempted_);
    std::swap(num_read_success_, other->num_read_success_);
    std::swap(num_remove_file_attempted_, other->num_remove_file_attempted_);
    std::swap(num_remove_file_parent_not_found_, other->num_remove_file_parent_not_found_);
    std::swap(num_remove_file_target_not_found_, other->num_remove_file_target_not_found_);
    std::swap(num_remove_file_done_, other->num_remove_file_done_);
    std::swap(num_remove_file_success_, other->num_remove_file_success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats_Tree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_Tree_descriptor_;
  metadata.reflection = ServerStats_Tree_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStats_StateMachine::kSnapshottingFieldNumber;
const int ServerStats_StateMachine::kLastAppliedFieldNumber;
const int ServerStats_StateMachine::kNumSessionsFieldNumber;
const int ServerStats_StateMachine::kNumSnapshotsAttemptedFieldNumber;
const int ServerStats_StateMachine::kNumSnapshotsFailedFieldNumber;
const int ServerStats_StateMachine::kNumRedundantAdvanceVersionEntriesFieldNumber;
const int ServerStats_StateMachine::kNumRejectedAdvanceVersionEntriesFieldNumber;
const int ServerStats_StateMachine::kNumSuccessfulAdvanceVersionEntriesFieldNumber;
const int ServerStats_StateMachine::kNumTotalAdvanceVersionEntriesFieldNumber;
const int ServerStats_StateMachine::kMinSupportedVersionFieldNumber;
const int ServerStats_StateMachine::kMaxSupportedVersionFieldNumber;
const int ServerStats_StateMachine::kRunningVersionFieldNumber;
const int ServerStats_StateMachine::kTreeFieldNumber;
const int ServerStats_StateMachine::kNumUnknownRequestsFieldNumber;
const int ServerStats_StateMachine::kMaySnapshotAtFieldNumber;
#endif  // !_MSC_VER

ServerStats_StateMachine::ServerStats_StateMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerStats.StateMachine)
}

void ServerStats_StateMachine::InitAsDefaultInstance() {
  tree_ = const_cast< ::LogCabin::Protocol::ServerStats_Tree*>(&::LogCabin::Protocol::ServerStats_Tree::default_instance());
}

ServerStats_StateMachine::ServerStats_StateMachine(const ServerStats_StateMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerStats.StateMachine)
}

void ServerStats_StateMachine::SharedCtor() {
  _cached_size_ = 0;
  snapshotting_ = false;
  last_applied_ = GOOGLE_ULONGLONG(0);
  num_sessions_ = GOOGLE_ULONGLONG(0);
  num_snapshots_attempted_ = GOOGLE_ULONGLONG(0);
  num_snapshots_failed_ = GOOGLE_ULONGLONG(0);
  num_redundant_advance_version_entries_ = GOOGLE_ULONGLONG(0);
  num_rejected_advance_version_entries_ = GOOGLE_ULONGLONG(0);
  num_successful_advance_version_entries_ = GOOGLE_ULONGLONG(0);
  num_total_advance_version_entries_ = GOOGLE_ULONGLONG(0);
  min_supported_version_ = 0u;
  max_supported_version_ = 0u;
  running_version_ = 0u;
  tree_ = NULL;
  num_unknown_requests_ = GOOGLE_ULONGLONG(0);
  may_snapshot_at_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats_StateMachine::~ServerStats_StateMachine() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerStats.StateMachine)
  SharedDtor();
}

void ServerStats_StateMachine::SharedDtor() {
  if (this != default_instance_) {
    delete tree_;
  }
}

void ServerStats_StateMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats_StateMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_StateMachine_descriptor_;
}

const ServerStats_StateMachine& ServerStats_StateMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

ServerStats_StateMachine* ServerStats_StateMachine::default_instance_ = NULL;

ServerStats_StateMachine* ServerStats_StateMachine::New() const {
  return new ServerStats_StateMachine;
}

void ServerStats_StateMachine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerStats_StateMachine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(last_applied_, snapshotting_);
    ZR_(num_redundant_advance_version_entries_, num_successful_advance_version_entries_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(num_total_advance_version_entries_, running_version_);
    ZR_(num_unknown_requests_, may_snapshot_at_);
    min_supported_version_ = 0u;
    if (has_tree()) {
      if (tree_ != NULL) tree_->::LogCabin::Protocol::ServerStats_Tree::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats_StateMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerStats.StateMachine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool snapshotting = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshotting_)));
          set_has_snapshotting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_applied;
        break;
      }

      // optional uint64 last_applied = 2;
      case 2: {
        if (tag == 16) {
         parse_last_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_applied_)));
          set_has_last_applied();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_sessions;
        break;
      }

      // optional uint64 num_sessions = 3;
      case 3: {
        if (tag == 24) {
         parse_num_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_sessions_)));
          set_has_num_sessions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_snapshots_attempted;
        break;
      }

      // optional uint64 num_snapshots_attempted = 4;
      case 4: {
        if (tag == 32) {
         parse_num_snapshots_attempted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_snapshots_attempted_)));
          set_has_num_snapshots_attempted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_snapshots_failed;
        break;
      }

      // optional uint64 num_snapshots_failed = 5;
      case 5: {
        if (tag == 40) {
         parse_num_snapshots_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_snapshots_failed_)));
          set_has_num_snapshots_failed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_redundant_advance_version_entries;
        break;
      }

      // optional uint64 num_redundant_advance_version_entries = 6;
      case 6: {
        if (tag == 48) {
         parse_num_redundant_advance_version_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_redundant_advance_version_entries_)));
          set_has_num_redundant_advance_version_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_rejected_advance_version_entries;
        break;
      }

      // optional uint64 num_rejected_advance_version_entries = 7;
      case 7: {
        if (tag == 56) {
         parse_num_rejected_advance_version_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_rejected_advance_version_entries_)));
          set_has_num_rejected_advance_version_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_successful_advance_version_entries;
        break;
      }

      // optional uint64 num_successful_advance_version_entries = 8;
      case 8: {
        if (tag == 64) {
         parse_num_successful_advance_version_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_successful_advance_version_entries_)));
          set_has_num_successful_advance_version_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_total_advance_version_entries;
        break;
      }

      // optional uint64 num_total_advance_version_entries = 9;
      case 9: {
        if (tag == 72) {
         parse_num_total_advance_version_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_total_advance_version_entries_)));
          set_has_num_total_advance_version_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_min_supported_version;
        break;
      }

      // optional uint32 min_supported_version = 10;
      case 10: {
        if (tag == 80) {
         parse_min_supported_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_supported_version_)));
          set_has_min_supported_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_supported_version;
        break;
      }

      // optional uint32 max_supported_version = 11;
      case 11: {
        if (tag == 88) {
         parse_max_supported_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_supported_version_)));
          set_has_max_supported_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_running_version;
        break;
      }

      // optional uint32 running_version = 12;
      case 12: {
        if (tag == 96) {
         parse_running_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_version_)));
          set_has_running_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tree;
        break;
      }

      // optional .LogCabin.Protocol.ServerStats.Tree tree = 13;
      case 13: {
        if (tag == 106) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_num_unknown_requests;
        break;
      }

      // optional uint64 num_unknown_requests = 14;
      case 14: {
        if (tag == 112) {
         parse_num_unknown_requests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_unknown_requests_)));
          set_has_num_unknown_requests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_may_snapshot_at;
        break;
      }

      // optional int64 may_snapshot_at = 15;
      case 15: {
        if (tag == 120) {
         parse_may_snapshot_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &may_snapshot_at_)));
          set_has_may_snapshot_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerStats.StateMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerStats.StateMachine)
  return false;
#undef DO_
}

void ServerStats_StateMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerStats.StateMachine)
  // optional bool snapshotting = 1;
  if (has_snapshotting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->snapshotting(), output);
  }

  // optional uint64 last_applied = 2;
  if (has_last_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_applied(), output);
  }

  // optional uint64 num_sessions = 3;
  if (has_num_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->num_sessions(), output);
  }

  // optional uint64 num_snapshots_attempted = 4;
  if (has_num_snapshots_attempted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->num_snapshots_attempted(), output);
  }

  // optional uint64 num_snapshots_failed = 5;
  if (has_num_snapshots_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->num_snapshots_failed(), output);
  }

  // optional uint64 num_redundant_advance_version_entries = 6;
  if (has_num_redundant_advance_version_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_redundant_advance_version_entries(), output);
  }

  // optional uint64 num_rejected_advance_version_entries = 7;
  if (has_num_rejected_advance_version_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->num_rejected_advance_version_entries(), output);
  }

  // optional uint64 num_successful_advance_version_entries = 8;
  if (has_num_successful_advance_version_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->num_successful_advance_version_entries(), output);
  }

  // optional uint64 num_total_advance_version_entries = 9;
  if (has_num_total_advance_version_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->num_total_advance_version_entries(), output);
  }

  // optional uint32 min_supported_version = 10;
  if (has_min_supported_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min_supported_version(), output);
  }

  // optional uint32 max_supported_version = 11;
  if (has_max_supported_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_supported_version(), output);
  }

  // optional uint32 running_version = 12;
  if (has_running_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->running_version(), output);
  }

  // optional .LogCabin.Protocol.ServerStats.Tree tree = 13;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tree(), output);
  }

  // optional uint64 num_unknown_requests = 14;
  if (has_num_unknown_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->num_unknown_requests(), output);
  }

  // optional int64 may_snapshot_at = 15;
  if (has_may_snapshot_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->may_snapshot_at(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerStats.StateMachine)
}

::google::protobuf::uint8* ServerStats_StateMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerStats.StateMachine)
  // optional bool snapshotting = 1;
  if (has_snapshotting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->snapshotting(), target);
  }

  // optional uint64 last_applied = 2;
  if (has_last_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_applied(), target);
  }

  // optional uint64 num_sessions = 3;
  if (has_num_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->num_sessions(), target);
  }

  // optional uint64 num_snapshots_attempted = 4;
  if (has_num_snapshots_attempted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->num_snapshots_attempted(), target);
  }

  // optional uint64 num_snapshots_failed = 5;
  if (has_num_snapshots_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_snapshots_failed(), target);
  }

  // optional uint64 num_redundant_advance_version_entries = 6;
  if (has_num_redundant_advance_version_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_redundant_advance_version_entries(), target);
  }

  // optional uint64 num_rejected_advance_version_entries = 7;
  if (has_num_rejected_advance_version_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->num_rejected_advance_version_entries(), target);
  }

  // optional uint64 num_successful_advance_version_entries = 8;
  if (has_num_successful_advance_version_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->num_successful_advance_version_entries(), target);
  }

  // optional uint64 num_total_advance_version_entries = 9;
  if (has_num_total_advance_version_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->num_total_advance_version_entries(), target);
  }

  // optional uint32 min_supported_version = 10;
  if (has_min_supported_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min_supported_version(), target);
  }

  // optional uint32 max_supported_version = 11;
  if (has_max_supported_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_supported_version(), target);
  }

  // optional uint32 running_version = 12;
  if (has_running_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->running_version(), target);
  }

  // optional .LogCabin.Protocol.ServerStats.Tree tree = 13;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tree(), target);
  }

  // optional uint64 num_unknown_requests = 14;
  if (has_num_unknown_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->num_unknown_requests(), target);
  }

  // optional int64 may_snapshot_at = 15;
  if (has_may_snapshot_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->may_snapshot_at(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerStats.StateMachine)
  return target;
}

int ServerStats_StateMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool snapshotting = 1;
    if (has_snapshotting()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_applied = 2;
    if (has_last_applied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_applied());
    }

    // optional uint64 num_sessions = 3;
    if (has_num_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_sessions());
    }

    // optional uint64 num_snapshots_attempted = 4;
    if (has_num_snapshots_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_snapshots_attempted());
    }

    // optional uint64 num_snapshots_failed = 5;
    if (has_num_snapshots_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_snapshots_failed());
    }

    // optional uint64 num_redundant_advance_version_entries = 6;
    if (has_num_redundant_advance_version_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_redundant_advance_version_entries());
    }

    // optional uint64 num_rejected_advance_version_entries = 7;
    if (has_num_rejected_advance_version_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_rejected_advance_version_entries());
    }

    // optional uint64 num_successful_advance_version_entries = 8;
    if (has_num_successful_advance_version_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_successful_advance_version_entries());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 num_total_advance_version_entries = 9;
    if (has_num_total_advance_version_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_total_advance_version_entries());
    }

    // optional uint32 min_supported_version = 10;
    if (has_min_supported_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_supported_version());
    }

    // optional uint32 max_supported_version = 11;
    if (has_max_supported_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_supported_version());
    }

    // optional uint32 running_version = 12;
    if (has_running_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->running_version());
    }

    // optional .LogCabin.Protocol.ServerStats.Tree tree = 13;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

    // optional uint64 num_unknown_requests = 14;
    if (has_num_unknown_requests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_unknown_requests());
    }

    // optional int64 may_snapshot_at = 15;
    if (has_may_snapshot_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->may_snapshot_at());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats_StateMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats_StateMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats_StateMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats_StateMachine::MergeFrom(const ServerStats_StateMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotting()) {
      set_snapshotting(from.snapshotting());
    }
    if (from.has_last_applied()) {
      set_last_applied(from.last_applied());
    }
    if (from.has_num_sessions()) {
      set_num_sessions(from.num_sessions());
    }
    if (from.has_num_snapshots_attempted()) {
      set_num_snapshots_attempted(from.num_snapshots_attempted());
    }
    if (from.has_num_snapshots_failed()) {
      set_num_snapshots_failed(from.num_snapshots_failed());
    }
    if (from.has_num_redundant_advance_version_entries()) {
      set_num_redundant_advance_version_entries(from.num_redundant_advance_version_entries());
    }
    if (from.has_num_rejected_advance_version_entries()) {
      set_num_rejected_advance_version_entries(from.num_rejected_advance_version_entries());
    }
    if (from.has_num_successful_advance_version_entries()) {
      set_num_successful_advance_version_entries(from.num_successful_advance_version_entries());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_total_advance_version_entries()) {
      set_num_total_advance_version_entries(from.num_total_advance_version_entries());
    }
    if (from.has_min_supported_version()) {
      set_min_supported_version(from.min_supported_version());
    }
    if (from.has_max_supported_version()) {
      set_max_supported_version(from.max_supported_version());
    }
    if (from.has_running_version()) {
      set_running_version(from.running_version());
    }
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::ServerStats_Tree::MergeFrom(from.tree());
    }
    if (from.has_num_unknown_requests()) {
      set_num_unknown_requests(from.num_unknown_requests());
    }
    if (from.has_may_snapshot_at()) {
      set_may_snapshot_at(from.may_snapshot_at());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats_StateMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats_StateMachine::CopyFrom(const ServerStats_StateMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats_StateMachine::IsInitialized() const {

  return true;
}

void ServerStats_StateMachine::Swap(ServerStats_StateMachine* other) {
  if (other != this) {
    std::swap(snapshotting_, other->snapshotting_);
    std::swap(last_applied_, other->last_applied_);
    std::swap(num_sessions_, other->num_sessions_);
    std::swap(num_snapshots_attempted_, other->num_snapshots_attempted_);
    std::swap(num_snapshots_failed_, other->num_snapshots_failed_);
    std::swap(num_redundant_advance_version_entries_, other->num_redundant_advance_version_entries_);
    std::swap(num_rejected_advance_version_entries_, other->num_rejected_advance_version_entries_);
    std::swap(num_successful_advance_version_entries_, other->num_successful_advance_version_entries_);
    std::swap(num_total_advance_version_entries_, other->num_total_advance_version_entries_);
    std::swap(min_supported_version_, other->min_supported_version_);
    std::swap(max_supported_version_, other->max_supported_version_);
    std::swap(running_version_, other->running_version_);
    std::swap(tree_, other->tree_);
    std::swap(num_unknown_requests_, other->num_unknown_requests_);
    std::swap(may_snapshot_at_, other->may_snapshot_at_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats_StateMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_StateMachine_descriptor_;
  metadata.reflection = ServerStats_StateMachine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStats::kServerIdFieldNumber;
const int ServerStats::kAddressesFieldNumber;
const int ServerStats::kStartAtFieldNumber;
const int ServerStats::kEndAtFieldNumber;
const int ServerStats::kRaftFieldNumber;
const int ServerStats::kStorageFieldNumber;
const int ServerStats::kStateMachineFieldNumber;
#endif  // !_MSC_VER

ServerStats::ServerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerStats)
}

void ServerStats::InitAsDefaultInstance() {
  raft_ = const_cast< ::LogCabin::Protocol::ServerStats_Raft*>(&::LogCabin::Protocol::ServerStats_Raft::default_instance());
  storage_ = const_cast< ::LogCabin::Protocol::ServerStats_Storage*>(&::LogCabin::Protocol::ServerStats_Storage::default_instance());
  state_machine_ = const_cast< ::LogCabin::Protocol::ServerStats_StateMachine*>(&::LogCabin::Protocol::ServerStats_StateMachine::default_instance());
}

ServerStats::ServerStats(const ServerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerStats)
}

void ServerStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_at_ = GOOGLE_LONGLONG(0);
  end_at_ = GOOGLE_LONGLONG(0);
  raft_ = NULL;
  storage_ = NULL;
  state_machine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats::~ServerStats() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerStats)
  SharedDtor();
}

void ServerStats::SharedDtor() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (this != default_instance_) {
    delete raft_;
    delete storage_;
    delete state_machine_;
  }
}

void ServerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_descriptor_;
}

const ServerStats& ServerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  return *default_instance_;
}

ServerStats* ServerStats::default_instance_ = NULL;

ServerStats* ServerStats::New() const {
  return new ServerStats;
}

void ServerStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(start_at_, end_at_);
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_addresses()) {
      if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addresses_->clear();
      }
    }
    if (has_raft()) {
      if (raft_ != NULL) raft_->::LogCabin::Protocol::ServerStats_Raft::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::LogCabin::Protocol::ServerStats_Storage::Clear();
    }
    if (has_state_machine()) {
      if (state_machine_ != NULL) state_machine_->::LogCabin::Protocol::ServerStats_StateMachine::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addresses;
        break;
      }

      // optional string addresses = 2;
      case 2: {
        if (tag == 18) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addresses().data(), this->addresses().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addresses");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_at;
        break;
      }

      // optional int64 start_at = 3;
      case 3: {
        if (tag == 24) {
         parse_start_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_at_)));
          set_has_start_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_at;
        break;
      }

      // optional int64 end_at = 4;
      case 4: {
        if (tag == 32) {
         parse_end_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_at_)));
          set_has_end_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_raft;
        break;
      }

      // optional .LogCabin.Protocol.ServerStats.Raft raft = 11;
      case 11: {
        if (tag == 90) {
         parse_raft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_storage;
        break;
      }

      // optional .LogCabin.Protocol.ServerStats.Storage storage = 12;
      case 12: {
        if (tag == 98) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_state_machine;
        break;
      }

      // optional .LogCabin.Protocol.ServerStats.StateMachine state_machine = 13;
      case 13: {
        if (tag == 106) {
         parse_state_machine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerStats)
  return false;
#undef DO_
}

void ServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerStats)
  // optional uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // optional string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addresses(), output);
  }

  // optional int64 start_at = 3;
  if (has_start_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_at(), output);
  }

  // optional int64 end_at = 4;
  if (has_end_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_at(), output);
  }

  // optional .LogCabin.Protocol.ServerStats.Raft raft = 11;
  if (has_raft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->raft(), output);
  }

  // optional .LogCabin.Protocol.ServerStats.Storage storage = 12;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->storage(), output);
  }

  // optional .LogCabin.Protocol.ServerStats.StateMachine state_machine = 13;
  if (has_state_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->state_machine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerStats)
}

::google::protobuf::uint8* ServerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerStats)
  // optional uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // optional string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addresses(), target);
  }

  // optional int64 start_at = 3;
  if (has_start_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_at(), target);
  }

  // optional int64 end_at = 4;
  if (has_end_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_at(), target);
  }

  // optional .LogCabin.Protocol.ServerStats.Raft raft = 11;
  if (has_raft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->raft(), target);
  }

  // optional .LogCabin.Protocol.ServerStats.Storage storage = 12;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->storage(), target);
  }

  // optional .LogCabin.Protocol.ServerStats.StateMachine state_machine = 13;
  if (has_state_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->state_machine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerStats)
  return target;
}

int ServerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional string addresses = 2;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addresses());
    }

    // optional int64 start_at = 3;
    if (has_start_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_at());
    }

    // optional int64 end_at = 4;
    if (has_end_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_at());
    }

    // optional .LogCabin.Protocol.ServerStats.Raft raft = 11;
    if (has_raft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raft());
    }

    // optional .LogCabin.Protocol.ServerStats.Storage storage = 12;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .LogCabin.Protocol.ServerStats.StateMachine state_machine = 13;
    if (has_state_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_machine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats::MergeFrom(const ServerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_addresses()) {
      set_addresses(from.addresses());
    }
    if (from.has_start_at()) {
      set_start_at(from.start_at());
    }
    if (from.has_end_at()) {
      set_end_at(from.end_at());
    }
    if (from.has_raft()) {
      mutable_raft()->::LogCabin::Protocol::ServerStats_Raft::MergeFrom(from.raft());
    }
    if (from.has_storage()) {
      mutable_storage()->::LogCabin::Protocol::ServerStats_Storage::MergeFrom(from.storage());
    }
    if (from.has_state_machine()) {
      mutable_state_machine()->::LogCabin::Protocol::ServerStats_StateMachine::MergeFrom(from.state_machine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats::CopyFrom(const ServerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats::IsInitialized() const {

  return true;
}

void ServerStats::Swap(ServerStats* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(addresses_, other->addresses_);
    std::swap(start_at_, other->start_at_);
    std::swap(end_at_, other->end_at_);
    std::swap(raft_, other->raft_);
    std::swap(storage_, other->storage_);
    std::swap(state_machine_, other->state_machine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_descriptor_;
  metadata.reflection = ServerStats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
