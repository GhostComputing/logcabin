// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Server/ServerControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Server/ServerControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {
namespace ServerControl {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugFilenameGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugFilenameGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugFilenameGet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugFilenameGet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugFilenameGet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugFilenameGet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugFilenameSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugFilenameSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugFilenameSet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugFilenameSet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugFilenameSet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugFilenameSet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPolicyGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPolicyGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPolicyGet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPolicyGet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPolicyGet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPolicyGet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPolicySet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPolicySet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPolicySet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPolicySet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPolicySet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPolicySet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugRotate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugRotate_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugRotate_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugRotate_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugRotate_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugRotate_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoGet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoGet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoGet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoGet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatsDump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatsDump_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatsDump_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatsDump_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatsDump_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatsDump_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatsGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatsGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatsGet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatsGet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatsGet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatsGet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotControl_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotControl_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotControl_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotControl_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotInhibitGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotInhibitGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotInhibitGet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotInhibitGet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotInhibitGet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotInhibitGet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotInhibitSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotInhibitSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotInhibitSet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotInhibitSet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotInhibitSet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotInhibitSet_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SnapshotCommand_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fServer_2fServerControl_2eproto() {
  protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Server/ServerControl.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[1] = {
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  DebugFilenameGet_descriptor_ = file->message_type(1);
  static const int DebugFilenameGet_offsets_[1] = {
  };
  DebugFilenameGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugFilenameGet_descriptor_,
      DebugFilenameGet::default_instance_,
      DebugFilenameGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugFilenameGet));
  DebugFilenameGet_Request_descriptor_ = DebugFilenameGet_descriptor_->nested_type(0);
  static const int DebugFilenameGet_Request_offsets_[1] = {
  };
  DebugFilenameGet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugFilenameGet_Request_descriptor_,
      DebugFilenameGet_Request::default_instance_,
      DebugFilenameGet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugFilenameGet_Request));
  DebugFilenameGet_Response_descriptor_ = DebugFilenameGet_descriptor_->nested_type(1);
  static const int DebugFilenameGet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet_Response, filename_),
  };
  DebugFilenameGet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugFilenameGet_Response_descriptor_,
      DebugFilenameGet_Response::default_instance_,
      DebugFilenameGet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameGet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugFilenameGet_Response));
  DebugFilenameSet_descriptor_ = file->message_type(2);
  static const int DebugFilenameSet_offsets_[1] = {
  };
  DebugFilenameSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugFilenameSet_descriptor_,
      DebugFilenameSet::default_instance_,
      DebugFilenameSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugFilenameSet));
  DebugFilenameSet_Request_descriptor_ = DebugFilenameSet_descriptor_->nested_type(0);
  static const int DebugFilenameSet_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet_Request, filename_),
  };
  DebugFilenameSet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugFilenameSet_Request_descriptor_,
      DebugFilenameSet_Request::default_instance_,
      DebugFilenameSet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugFilenameSet_Request));
  DebugFilenameSet_Response_descriptor_ = DebugFilenameSet_descriptor_->nested_type(1);
  static const int DebugFilenameSet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet_Response, error_),
  };
  DebugFilenameSet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugFilenameSet_Response_descriptor_,
      DebugFilenameSet_Response::default_instance_,
      DebugFilenameSet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugFilenameSet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugFilenameSet_Response));
  DebugPolicyGet_descriptor_ = file->message_type(3);
  static const int DebugPolicyGet_offsets_[1] = {
  };
  DebugPolicyGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPolicyGet_descriptor_,
      DebugPolicyGet::default_instance_,
      DebugPolicyGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPolicyGet));
  DebugPolicyGet_Request_descriptor_ = DebugPolicyGet_descriptor_->nested_type(0);
  static const int DebugPolicyGet_Request_offsets_[1] = {
  };
  DebugPolicyGet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPolicyGet_Request_descriptor_,
      DebugPolicyGet_Request::default_instance_,
      DebugPolicyGet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPolicyGet_Request));
  DebugPolicyGet_Response_descriptor_ = DebugPolicyGet_descriptor_->nested_type(1);
  static const int DebugPolicyGet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet_Response, policy_),
  };
  DebugPolicyGet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPolicyGet_Response_descriptor_,
      DebugPolicyGet_Response::default_instance_,
      DebugPolicyGet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicyGet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPolicyGet_Response));
  DebugPolicySet_descriptor_ = file->message_type(4);
  static const int DebugPolicySet_offsets_[1] = {
  };
  DebugPolicySet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPolicySet_descriptor_,
      DebugPolicySet::default_instance_,
      DebugPolicySet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPolicySet));
  DebugPolicySet_Request_descriptor_ = DebugPolicySet_descriptor_->nested_type(0);
  static const int DebugPolicySet_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet_Request, policy_),
  };
  DebugPolicySet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPolicySet_Request_descriptor_,
      DebugPolicySet_Request::default_instance_,
      DebugPolicySet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPolicySet_Request));
  DebugPolicySet_Response_descriptor_ = DebugPolicySet_descriptor_->nested_type(1);
  static const int DebugPolicySet_Response_offsets_[1] = {
  };
  DebugPolicySet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPolicySet_Response_descriptor_,
      DebugPolicySet_Response::default_instance_,
      DebugPolicySet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPolicySet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPolicySet_Response));
  DebugRotate_descriptor_ = file->message_type(5);
  static const int DebugRotate_offsets_[1] = {
  };
  DebugRotate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugRotate_descriptor_,
      DebugRotate::default_instance_,
      DebugRotate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugRotate));
  DebugRotate_Request_descriptor_ = DebugRotate_descriptor_->nested_type(0);
  static const int DebugRotate_Request_offsets_[1] = {
  };
  DebugRotate_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugRotate_Request_descriptor_,
      DebugRotate_Request::default_instance_,
      DebugRotate_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugRotate_Request));
  DebugRotate_Response_descriptor_ = DebugRotate_descriptor_->nested_type(1);
  static const int DebugRotate_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate_Response, error_),
  };
  DebugRotate_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugRotate_Response_descriptor_,
      DebugRotate_Response::default_instance_,
      DebugRotate_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugRotate_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugRotate_Response));
  ServerInfoGet_descriptor_ = file->message_type(6);
  static const int ServerInfoGet_offsets_[1] = {
  };
  ServerInfoGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoGet_descriptor_,
      ServerInfoGet::default_instance_,
      ServerInfoGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoGet));
  ServerInfoGet_Request_descriptor_ = ServerInfoGet_descriptor_->nested_type(0);
  static const int ServerInfoGet_Request_offsets_[1] = {
  };
  ServerInfoGet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoGet_Request_descriptor_,
      ServerInfoGet_Request::default_instance_,
      ServerInfoGet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoGet_Request));
  ServerInfoGet_Response_descriptor_ = ServerInfoGet_descriptor_->nested_type(1);
  static const int ServerInfoGet_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Response, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Response, addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Response, process_id_),
  };
  ServerInfoGet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoGet_Response_descriptor_,
      ServerInfoGet_Response::default_instance_,
      ServerInfoGet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoGet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoGet_Response));
  ServerStatsDump_descriptor_ = file->message_type(7);
  static const int ServerStatsDump_offsets_[1] = {
  };
  ServerStatsDump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatsDump_descriptor_,
      ServerStatsDump::default_instance_,
      ServerStatsDump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsDump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsDump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatsDump));
  ServerStatsDump_Request_descriptor_ = ServerStatsDump_descriptor_->nested_type(0);
  static const int ServerStatsDump_Request_offsets_[1] = {
  };
  ServerStatsDump_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatsDump_Request_descriptor_,
      ServerStatsDump_Request::default_instance_,
      ServerStatsDump_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsDump_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsDump_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatsDump_Request));
  ServerStatsDump_Response_descriptor_ = ServerStatsDump_descriptor_->nested_type(1);
  static const int ServerStatsDump_Response_offsets_[1] = {
  };
  ServerStatsDump_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatsDump_Response_descriptor_,
      ServerStatsDump_Response::default_instance_,
      ServerStatsDump_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsDump_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsDump_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatsDump_Response));
  ServerStatsGet_descriptor_ = file->message_type(8);
  static const int ServerStatsGet_offsets_[1] = {
  };
  ServerStatsGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatsGet_descriptor_,
      ServerStatsGet::default_instance_,
      ServerStatsGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatsGet));
  ServerStatsGet_Request_descriptor_ = ServerStatsGet_descriptor_->nested_type(0);
  static const int ServerStatsGet_Request_offsets_[1] = {
  };
  ServerStatsGet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatsGet_Request_descriptor_,
      ServerStatsGet_Request::default_instance_,
      ServerStatsGet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatsGet_Request));
  ServerStatsGet_Response_descriptor_ = ServerStatsGet_descriptor_->nested_type(1);
  static const int ServerStatsGet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet_Response, server_stats_),
  };
  ServerStatsGet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatsGet_Response_descriptor_,
      ServerStatsGet_Response::default_instance_,
      ServerStatsGet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatsGet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatsGet_Response));
  SnapshotControl_descriptor_ = file->message_type(9);
  static const int SnapshotControl_offsets_[1] = {
  };
  SnapshotControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotControl_descriptor_,
      SnapshotControl::default_instance_,
      SnapshotControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotControl));
  SnapshotControl_Request_descriptor_ = SnapshotControl_descriptor_->nested_type(0);
  static const int SnapshotControl_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl_Request, command_),
  };
  SnapshotControl_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotControl_Request_descriptor_,
      SnapshotControl_Request::default_instance_,
      SnapshotControl_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotControl_Request));
  SnapshotControl_Response_descriptor_ = SnapshotControl_descriptor_->nested_type(1);
  static const int SnapshotControl_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl_Response, error_),
  };
  SnapshotControl_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotControl_Response_descriptor_,
      SnapshotControl_Response::default_instance_,
      SnapshotControl_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotControl_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotControl_Response));
  SnapshotInhibitGet_descriptor_ = file->message_type(10);
  static const int SnapshotInhibitGet_offsets_[1] = {
  };
  SnapshotInhibitGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotInhibitGet_descriptor_,
      SnapshotInhibitGet::default_instance_,
      SnapshotInhibitGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotInhibitGet));
  SnapshotInhibitGet_Request_descriptor_ = SnapshotInhibitGet_descriptor_->nested_type(0);
  static const int SnapshotInhibitGet_Request_offsets_[1] = {
  };
  SnapshotInhibitGet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotInhibitGet_Request_descriptor_,
      SnapshotInhibitGet_Request::default_instance_,
      SnapshotInhibitGet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotInhibitGet_Request));
  SnapshotInhibitGet_Response_descriptor_ = SnapshotInhibitGet_descriptor_->nested_type(1);
  static const int SnapshotInhibitGet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet_Response, nanoseconds_),
  };
  SnapshotInhibitGet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotInhibitGet_Response_descriptor_,
      SnapshotInhibitGet_Response::default_instance_,
      SnapshotInhibitGet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitGet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotInhibitGet_Response));
  SnapshotInhibitSet_descriptor_ = file->message_type(11);
  static const int SnapshotInhibitSet_offsets_[1] = {
  };
  SnapshotInhibitSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotInhibitSet_descriptor_,
      SnapshotInhibitSet::default_instance_,
      SnapshotInhibitSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotInhibitSet));
  SnapshotInhibitSet_Request_descriptor_ = SnapshotInhibitSet_descriptor_->nested_type(0);
  static const int SnapshotInhibitSet_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet_Request, nanoseconds_),
  };
  SnapshotInhibitSet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotInhibitSet_Request_descriptor_,
      SnapshotInhibitSet_Request::default_instance_,
      SnapshotInhibitSet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotInhibitSet_Request));
  SnapshotInhibitSet_Response_descriptor_ = SnapshotInhibitSet_descriptor_->nested_type(1);
  static const int SnapshotInhibitSet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet_Response, error_),
  };
  SnapshotInhibitSet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotInhibitSet_Response_descriptor_,
      SnapshotInhibitSet_Response::default_instance_,
      SnapshotInhibitSet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotInhibitSet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotInhibitSet_Response));
  OpCode_descriptor_ = file->enum_type(0);
  SnapshotCommand_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fServer_2fServerControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugFilenameGet_descriptor_, &DebugFilenameGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugFilenameGet_Request_descriptor_, &DebugFilenameGet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugFilenameGet_Response_descriptor_, &DebugFilenameGet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugFilenameSet_descriptor_, &DebugFilenameSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugFilenameSet_Request_descriptor_, &DebugFilenameSet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugFilenameSet_Response_descriptor_, &DebugFilenameSet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPolicyGet_descriptor_, &DebugPolicyGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPolicyGet_Request_descriptor_, &DebugPolicyGet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPolicyGet_Response_descriptor_, &DebugPolicyGet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPolicySet_descriptor_, &DebugPolicySet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPolicySet_Request_descriptor_, &DebugPolicySet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPolicySet_Response_descriptor_, &DebugPolicySet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugRotate_descriptor_, &DebugRotate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugRotate_Request_descriptor_, &DebugRotate_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugRotate_Response_descriptor_, &DebugRotate_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoGet_descriptor_, &ServerInfoGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoGet_Request_descriptor_, &ServerInfoGet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoGet_Response_descriptor_, &ServerInfoGet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatsDump_descriptor_, &ServerStatsDump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatsDump_Request_descriptor_, &ServerStatsDump_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatsDump_Response_descriptor_, &ServerStatsDump_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatsGet_descriptor_, &ServerStatsGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatsGet_Request_descriptor_, &ServerStatsGet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatsGet_Response_descriptor_, &ServerStatsGet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotControl_descriptor_, &SnapshotControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotControl_Request_descriptor_, &SnapshotControl_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotControl_Response_descriptor_, &SnapshotControl_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotInhibitGet_descriptor_, &SnapshotInhibitGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotInhibitGet_Request_descriptor_, &SnapshotInhibitGet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotInhibitGet_Response_descriptor_, &SnapshotInhibitGet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotInhibitSet_descriptor_, &SnapshotInhibitSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotInhibitSet_Request_descriptor_, &SnapshotInhibitSet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotInhibitSet_Response_descriptor_, &SnapshotInhibitSet_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fServer_2fServerControl_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete DebugFilenameGet::default_instance_;
  delete DebugFilenameGet_reflection_;
  delete DebugFilenameGet_Request::default_instance_;
  delete DebugFilenameGet_Request_reflection_;
  delete DebugFilenameGet_Response::default_instance_;
  delete DebugFilenameGet_Response_reflection_;
  delete DebugFilenameSet::default_instance_;
  delete DebugFilenameSet_reflection_;
  delete DebugFilenameSet_Request::default_instance_;
  delete DebugFilenameSet_Request_reflection_;
  delete DebugFilenameSet_Response::default_instance_;
  delete DebugFilenameSet_Response_reflection_;
  delete DebugPolicyGet::default_instance_;
  delete DebugPolicyGet_reflection_;
  delete DebugPolicyGet_Request::default_instance_;
  delete DebugPolicyGet_Request_reflection_;
  delete DebugPolicyGet_Response::default_instance_;
  delete DebugPolicyGet_Response_reflection_;
  delete DebugPolicySet::default_instance_;
  delete DebugPolicySet_reflection_;
  delete DebugPolicySet_Request::default_instance_;
  delete DebugPolicySet_Request_reflection_;
  delete DebugPolicySet_Response::default_instance_;
  delete DebugPolicySet_Response_reflection_;
  delete DebugRotate::default_instance_;
  delete DebugRotate_reflection_;
  delete DebugRotate_Request::default_instance_;
  delete DebugRotate_Request_reflection_;
  delete DebugRotate_Response::default_instance_;
  delete DebugRotate_Response_reflection_;
  delete ServerInfoGet::default_instance_;
  delete ServerInfoGet_reflection_;
  delete ServerInfoGet_Request::default_instance_;
  delete ServerInfoGet_Request_reflection_;
  delete ServerInfoGet_Response::default_instance_;
  delete ServerInfoGet_Response_reflection_;
  delete ServerStatsDump::default_instance_;
  delete ServerStatsDump_reflection_;
  delete ServerStatsDump_Request::default_instance_;
  delete ServerStatsDump_Request_reflection_;
  delete ServerStatsDump_Response::default_instance_;
  delete ServerStatsDump_Response_reflection_;
  delete ServerStatsGet::default_instance_;
  delete ServerStatsGet_reflection_;
  delete ServerStatsGet_Request::default_instance_;
  delete ServerStatsGet_Request_reflection_;
  delete ServerStatsGet_Response::default_instance_;
  delete ServerStatsGet_Response_reflection_;
  delete SnapshotControl::default_instance_;
  delete SnapshotControl_reflection_;
  delete SnapshotControl_Request::default_instance_;
  delete SnapshotControl_Request_reflection_;
  delete SnapshotControl_Response::default_instance_;
  delete SnapshotControl_Response_reflection_;
  delete SnapshotInhibitGet::default_instance_;
  delete SnapshotInhibitGet_reflection_;
  delete SnapshotInhibitGet_Request::default_instance_;
  delete SnapshotInhibitGet_Request_reflection_;
  delete SnapshotInhibitGet_Response::default_instance_;
  delete SnapshotInhibitGet_Response_reflection_;
  delete SnapshotInhibitSet::default_instance_;
  delete SnapshotInhibitSet_reflection_;
  delete SnapshotInhibitSet_Request::default_instance_;
  delete SnapshotInhibitSet_Request_reflection_;
  delete SnapshotInhibitSet_Response::default_instance_;
  delete SnapshotInhibitSet_Response_reflection_;
}

void protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogCabin::Protocol::protobuf_AddDesc_Protocol_2fServer_2fServerStats_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#Protocol/Server/ServerControl.proto\022\037L"
    "ogCabin.Protocol.ServerControl\032!Protocol"
    "/Server/ServerStats.proto\"\007\n\005Error\";\n\020De"
    "bugFilenameGet\032\t\n\007Request\032\034\n\010Response\022\020\n"
    "\010filename\030\001 \001(\t\"J\n\020DebugFilenameSet\032\033\n\007R"
    "equest\022\020\n\010filename\030\001 \001(\t\032\031\n\010Response\022\r\n\005"
    "error\030\001 \001(\t\"7\n\016DebugPolicyGet\032\t\n\007Request"
    "\032\032\n\010Response\022\016\n\006policy\030\001 \001(\t\"7\n\016DebugPol"
    "icySet\032\031\n\007Request\022\016\n\006policy\030\001 \001(\t\032\n\n\010Res"
    "ponse\"3\n\013DebugRotate\032\t\n\007Request\032\031\n\010Respo"
    "nse\022\r\n\005error\030\001 \001(\t\"`\n\rServerInfoGet\032\t\n\007R"
    "equest\032D\n\010Response\022\021\n\tserver_id\030\001 \001(\004\022\021\n"
    "\taddresses\030\002 \001(\t\022\022\n\nprocess_id\030\003 \001(\004\"(\n\017"
    "ServerStatsDump\032\t\n\007Request\032\n\n\010Response\"]"
    "\n\016ServerStatsGet\032\t\n\007Request\032@\n\010Response\022"
    "4\n\014server_stats\030\001 \001(\0132\036.LogCabin.Protoco"
    "l.ServerStats\"z\n\017SnapshotControl\032L\n\007Requ"
    "est\022A\n\007command\030\001 \002(\01620.LogCabin.Protocol"
    ".ServerControl.SnapshotCommand\032\031\n\010Respon"
    "se\022\r\n\005error\030\001 \001(\t\"@\n\022SnapshotInhibitGet\032"
    "\t\n\007Request\032\037\n\010Response\022\023\n\013nanoseconds\030\001 "
    "\001(\004\"O\n\022SnapshotInhibitSet\032\036\n\007Request\022\023\n\013"
    "nanoseconds\030\001 \001(\004\032\031\n\010Response\022\r\n\005error\030\001"
    " \001(\t*\202\002\n\006OpCode\022\026\n\022DEBUG_FILENAME_GET\020\001\022"
    "\026\n\022DEBUG_FILENAME_SET\020\002\022\024\n\020DEBUG_POLICY_"
    "GET\020\003\022\024\n\020DEBUG_POLICY_SET\020\004\022\020\n\014DEBUG_ROT"
    "ATE\020\005\022\023\n\017SERVER_INFO_GET\020\006\022\025\n\021SERVER_STA"
    "TS_DUMP\020\007\022\024\n\020SERVER_STATS_GET\020\010\022\024\n\020SNAPS"
    "HOT_CONTROL\020\t\022\030\n\024SNAPSHOT_INHIBIT_GET\020\n\022"
    "\030\n\024SNAPSHOT_INHIBIT_SET\020\013*l\n\017SnapshotCom"
    "mand\022\034\n\030UNKNOWN_SNAPSHOT_COMMAND\020\000\022\022\n\016ST"
    "ART_SNAPSHOT\020\001\022\021\n\rSTOP_SNAPSHOT\020\002\022\024\n\020RES"
    "TART_SNAPSHOT\020\003", 1295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Server/ServerControl.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  DebugFilenameGet::default_instance_ = new DebugFilenameGet();
  DebugFilenameGet_Request::default_instance_ = new DebugFilenameGet_Request();
  DebugFilenameGet_Response::default_instance_ = new DebugFilenameGet_Response();
  DebugFilenameSet::default_instance_ = new DebugFilenameSet();
  DebugFilenameSet_Request::default_instance_ = new DebugFilenameSet_Request();
  DebugFilenameSet_Response::default_instance_ = new DebugFilenameSet_Response();
  DebugPolicyGet::default_instance_ = new DebugPolicyGet();
  DebugPolicyGet_Request::default_instance_ = new DebugPolicyGet_Request();
  DebugPolicyGet_Response::default_instance_ = new DebugPolicyGet_Response();
  DebugPolicySet::default_instance_ = new DebugPolicySet();
  DebugPolicySet_Request::default_instance_ = new DebugPolicySet_Request();
  DebugPolicySet_Response::default_instance_ = new DebugPolicySet_Response();
  DebugRotate::default_instance_ = new DebugRotate();
  DebugRotate_Request::default_instance_ = new DebugRotate_Request();
  DebugRotate_Response::default_instance_ = new DebugRotate_Response();
  ServerInfoGet::default_instance_ = new ServerInfoGet();
  ServerInfoGet_Request::default_instance_ = new ServerInfoGet_Request();
  ServerInfoGet_Response::default_instance_ = new ServerInfoGet_Response();
  ServerStatsDump::default_instance_ = new ServerStatsDump();
  ServerStatsDump_Request::default_instance_ = new ServerStatsDump_Request();
  ServerStatsDump_Response::default_instance_ = new ServerStatsDump_Response();
  ServerStatsGet::default_instance_ = new ServerStatsGet();
  ServerStatsGet_Request::default_instance_ = new ServerStatsGet_Request();
  ServerStatsGet_Response::default_instance_ = new ServerStatsGet_Response();
  SnapshotControl::default_instance_ = new SnapshotControl();
  SnapshotControl_Request::default_instance_ = new SnapshotControl_Request();
  SnapshotControl_Response::default_instance_ = new SnapshotControl_Response();
  SnapshotInhibitGet::default_instance_ = new SnapshotInhibitGet();
  SnapshotInhibitGet_Request::default_instance_ = new SnapshotInhibitGet_Request();
  SnapshotInhibitGet_Response::default_instance_ = new SnapshotInhibitGet_Response();
  SnapshotInhibitSet::default_instance_ = new SnapshotInhibitSet();
  SnapshotInhibitSet_Request::default_instance_ = new SnapshotInhibitSet_Request();
  SnapshotInhibitSet_Response::default_instance_ = new SnapshotInhibitSet_Response();
  Error::default_instance_->InitAsDefaultInstance();
  DebugFilenameGet::default_instance_->InitAsDefaultInstance();
  DebugFilenameGet_Request::default_instance_->InitAsDefaultInstance();
  DebugFilenameGet_Response::default_instance_->InitAsDefaultInstance();
  DebugFilenameSet::default_instance_->InitAsDefaultInstance();
  DebugFilenameSet_Request::default_instance_->InitAsDefaultInstance();
  DebugFilenameSet_Response::default_instance_->InitAsDefaultInstance();
  DebugPolicyGet::default_instance_->InitAsDefaultInstance();
  DebugPolicyGet_Request::default_instance_->InitAsDefaultInstance();
  DebugPolicyGet_Response::default_instance_->InitAsDefaultInstance();
  DebugPolicySet::default_instance_->InitAsDefaultInstance();
  DebugPolicySet_Request::default_instance_->InitAsDefaultInstance();
  DebugPolicySet_Response::default_instance_->InitAsDefaultInstance();
  DebugRotate::default_instance_->InitAsDefaultInstance();
  DebugRotate_Request::default_instance_->InitAsDefaultInstance();
  DebugRotate_Response::default_instance_->InitAsDefaultInstance();
  ServerInfoGet::default_instance_->InitAsDefaultInstance();
  ServerInfoGet_Request::default_instance_->InitAsDefaultInstance();
  ServerInfoGet_Response::default_instance_->InitAsDefaultInstance();
  ServerStatsDump::default_instance_->InitAsDefaultInstance();
  ServerStatsDump_Request::default_instance_->InitAsDefaultInstance();
  ServerStatsDump_Response::default_instance_->InitAsDefaultInstance();
  ServerStatsGet::default_instance_->InitAsDefaultInstance();
  ServerStatsGet_Request::default_instance_->InitAsDefaultInstance();
  ServerStatsGet_Response::default_instance_->InitAsDefaultInstance();
  SnapshotControl::default_instance_->InitAsDefaultInstance();
  SnapshotControl_Request::default_instance_->InitAsDefaultInstance();
  SnapshotControl_Response::default_instance_->InitAsDefaultInstance();
  SnapshotInhibitGet::default_instance_->InitAsDefaultInstance();
  SnapshotInhibitGet_Request::default_instance_->InitAsDefaultInstance();
  SnapshotInhibitGet_Response::default_instance_->InitAsDefaultInstance();
  SnapshotInhibitSet::default_instance_->InitAsDefaultInstance();
  SnapshotInhibitSet_Request::default_instance_->InitAsDefaultInstance();
  SnapshotInhibitSet_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fServer_2fServerControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fServer_2fServerControl_2eproto {
  StaticDescriptorInitializer_Protocol_2fServer_2fServerControl_2eproto() {
    protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  }
} static_descriptor_initializer_Protocol_2fServer_2fServerControl_2eproto_;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCode_descriptor_;
}
bool OpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SnapshotCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotCommand_descriptor_;
}
bool SnapshotCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.Error)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.Error)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugFilenameGet_Request::DebugFilenameGet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
}

void DebugFilenameGet_Request::InitAsDefaultInstance() {
}

DebugFilenameGet_Request::DebugFilenameGet_Request(const DebugFilenameGet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
}

void DebugFilenameGet_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugFilenameGet_Request::~DebugFilenameGet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  SharedDtor();
}

void DebugFilenameGet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugFilenameGet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugFilenameGet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugFilenameGet_Request_descriptor_;
}

const DebugFilenameGet_Request& DebugFilenameGet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugFilenameGet_Request* DebugFilenameGet_Request::default_instance_ = NULL;

DebugFilenameGet_Request* DebugFilenameGet_Request::New() const {
  return new DebugFilenameGet_Request;
}

void DebugFilenameGet_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugFilenameGet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  return false;
#undef DO_
}

void DebugFilenameGet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
}

::google::protobuf::uint8* DebugFilenameGet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugFilenameGet.Request)
  return target;
}

int DebugFilenameGet_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugFilenameGet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugFilenameGet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugFilenameGet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugFilenameGet_Request::MergeFrom(const DebugFilenameGet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugFilenameGet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugFilenameGet_Request::CopyFrom(const DebugFilenameGet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugFilenameGet_Request::IsInitialized() const {

  return true;
}

void DebugFilenameGet_Request::Swap(DebugFilenameGet_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugFilenameGet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugFilenameGet_Request_descriptor_;
  metadata.reflection = DebugFilenameGet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DebugFilenameGet_Response::kFilenameFieldNumber;
#endif  // !_MSC_VER

DebugFilenameGet_Response::DebugFilenameGet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
}

void DebugFilenameGet_Response::InitAsDefaultInstance() {
}

DebugFilenameGet_Response::DebugFilenameGet_Response(const DebugFilenameGet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
}

void DebugFilenameGet_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugFilenameGet_Response::~DebugFilenameGet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  SharedDtor();
}

void DebugFilenameGet_Response::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DebugFilenameGet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugFilenameGet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugFilenameGet_Response_descriptor_;
}

const DebugFilenameGet_Response& DebugFilenameGet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugFilenameGet_Response* DebugFilenameGet_Response::default_instance_ = NULL;

DebugFilenameGet_Response* DebugFilenameGet_Response::New() const {
  return new DebugFilenameGet_Response;
}

void DebugFilenameGet_Response::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugFilenameGet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  return false;
#undef DO_
}

void DebugFilenameGet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
}

::google::protobuf::uint8* DebugFilenameGet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugFilenameGet.Response)
  return target;
}

int DebugFilenameGet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugFilenameGet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugFilenameGet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugFilenameGet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugFilenameGet_Response::MergeFrom(const DebugFilenameGet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugFilenameGet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugFilenameGet_Response::CopyFrom(const DebugFilenameGet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugFilenameGet_Response::IsInitialized() const {

  return true;
}

void DebugFilenameGet_Response::Swap(DebugFilenameGet_Response* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugFilenameGet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugFilenameGet_Response_descriptor_;
  metadata.reflection = DebugFilenameGet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugFilenameGet::DebugFilenameGet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugFilenameGet)
}

void DebugFilenameGet::InitAsDefaultInstance() {
}

DebugFilenameGet::DebugFilenameGet(const DebugFilenameGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugFilenameGet)
}

void DebugFilenameGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugFilenameGet::~DebugFilenameGet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  SharedDtor();
}

void DebugFilenameGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugFilenameGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugFilenameGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugFilenameGet_descriptor_;
}

const DebugFilenameGet& DebugFilenameGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugFilenameGet* DebugFilenameGet::default_instance_ = NULL;

DebugFilenameGet* DebugFilenameGet::New() const {
  return new DebugFilenameGet;
}

void DebugFilenameGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugFilenameGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  return false;
#undef DO_
}

void DebugFilenameGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugFilenameGet)
}

::google::protobuf::uint8* DebugFilenameGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugFilenameGet)
  return target;
}

int DebugFilenameGet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugFilenameGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugFilenameGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugFilenameGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugFilenameGet::MergeFrom(const DebugFilenameGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugFilenameGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugFilenameGet::CopyFrom(const DebugFilenameGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugFilenameGet::IsInitialized() const {

  return true;
}

void DebugFilenameGet::Swap(DebugFilenameGet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugFilenameGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugFilenameGet_descriptor_;
  metadata.reflection = DebugFilenameGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugFilenameSet_Request::kFilenameFieldNumber;
#endif  // !_MSC_VER

DebugFilenameSet_Request::DebugFilenameSet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
}

void DebugFilenameSet_Request::InitAsDefaultInstance() {
}

DebugFilenameSet_Request::DebugFilenameSet_Request(const DebugFilenameSet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
}

void DebugFilenameSet_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugFilenameSet_Request::~DebugFilenameSet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  SharedDtor();
}

void DebugFilenameSet_Request::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DebugFilenameSet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugFilenameSet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugFilenameSet_Request_descriptor_;
}

const DebugFilenameSet_Request& DebugFilenameSet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugFilenameSet_Request* DebugFilenameSet_Request::default_instance_ = NULL;

DebugFilenameSet_Request* DebugFilenameSet_Request::New() const {
  return new DebugFilenameSet_Request;
}

void DebugFilenameSet_Request::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugFilenameSet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  return false;
#undef DO_
}

void DebugFilenameSet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
}

::google::protobuf::uint8* DebugFilenameSet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugFilenameSet.Request)
  return target;
}

int DebugFilenameSet_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugFilenameSet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugFilenameSet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugFilenameSet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugFilenameSet_Request::MergeFrom(const DebugFilenameSet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugFilenameSet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugFilenameSet_Request::CopyFrom(const DebugFilenameSet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugFilenameSet_Request::IsInitialized() const {

  return true;
}

void DebugFilenameSet_Request::Swap(DebugFilenameSet_Request* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugFilenameSet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugFilenameSet_Request_descriptor_;
  metadata.reflection = DebugFilenameSet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DebugFilenameSet_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

DebugFilenameSet_Response::DebugFilenameSet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
}

void DebugFilenameSet_Response::InitAsDefaultInstance() {
}

DebugFilenameSet_Response::DebugFilenameSet_Response(const DebugFilenameSet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
}

void DebugFilenameSet_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugFilenameSet_Response::~DebugFilenameSet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  SharedDtor();
}

void DebugFilenameSet_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void DebugFilenameSet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugFilenameSet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugFilenameSet_Response_descriptor_;
}

const DebugFilenameSet_Response& DebugFilenameSet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugFilenameSet_Response* DebugFilenameSet_Response::default_instance_ = NULL;

DebugFilenameSet_Response* DebugFilenameSet_Response::New() const {
  return new DebugFilenameSet_Response;
}

void DebugFilenameSet_Response::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugFilenameSet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  return false;
#undef DO_
}

void DebugFilenameSet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
}

::google::protobuf::uint8* DebugFilenameSet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugFilenameSet.Response)
  return target;
}

int DebugFilenameSet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugFilenameSet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugFilenameSet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugFilenameSet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugFilenameSet_Response::MergeFrom(const DebugFilenameSet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugFilenameSet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugFilenameSet_Response::CopyFrom(const DebugFilenameSet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugFilenameSet_Response::IsInitialized() const {

  return true;
}

void DebugFilenameSet_Response::Swap(DebugFilenameSet_Response* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugFilenameSet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugFilenameSet_Response_descriptor_;
  metadata.reflection = DebugFilenameSet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugFilenameSet::DebugFilenameSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugFilenameSet)
}

void DebugFilenameSet::InitAsDefaultInstance() {
}

DebugFilenameSet::DebugFilenameSet(const DebugFilenameSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugFilenameSet)
}

void DebugFilenameSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugFilenameSet::~DebugFilenameSet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  SharedDtor();
}

void DebugFilenameSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugFilenameSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugFilenameSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugFilenameSet_descriptor_;
}

const DebugFilenameSet& DebugFilenameSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugFilenameSet* DebugFilenameSet::default_instance_ = NULL;

DebugFilenameSet* DebugFilenameSet::New() const {
  return new DebugFilenameSet;
}

void DebugFilenameSet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugFilenameSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  return false;
#undef DO_
}

void DebugFilenameSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugFilenameSet)
}

::google::protobuf::uint8* DebugFilenameSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugFilenameSet)
  return target;
}

int DebugFilenameSet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugFilenameSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugFilenameSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugFilenameSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugFilenameSet::MergeFrom(const DebugFilenameSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugFilenameSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugFilenameSet::CopyFrom(const DebugFilenameSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugFilenameSet::IsInitialized() const {

  return true;
}

void DebugFilenameSet::Swap(DebugFilenameSet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugFilenameSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugFilenameSet_descriptor_;
  metadata.reflection = DebugFilenameSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugPolicyGet_Request::DebugPolicyGet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
}

void DebugPolicyGet_Request::InitAsDefaultInstance() {
}

DebugPolicyGet_Request::DebugPolicyGet_Request(const DebugPolicyGet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
}

void DebugPolicyGet_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPolicyGet_Request::~DebugPolicyGet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  SharedDtor();
}

void DebugPolicyGet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugPolicyGet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPolicyGet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPolicyGet_Request_descriptor_;
}

const DebugPolicyGet_Request& DebugPolicyGet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugPolicyGet_Request* DebugPolicyGet_Request::default_instance_ = NULL;

DebugPolicyGet_Request* DebugPolicyGet_Request::New() const {
  return new DebugPolicyGet_Request;
}

void DebugPolicyGet_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPolicyGet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  return false;
#undef DO_
}

void DebugPolicyGet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
}

::google::protobuf::uint8* DebugPolicyGet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugPolicyGet.Request)
  return target;
}

int DebugPolicyGet_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPolicyGet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPolicyGet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPolicyGet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPolicyGet_Request::MergeFrom(const DebugPolicyGet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPolicyGet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPolicyGet_Request::CopyFrom(const DebugPolicyGet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPolicyGet_Request::IsInitialized() const {

  return true;
}

void DebugPolicyGet_Request::Swap(DebugPolicyGet_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPolicyGet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPolicyGet_Request_descriptor_;
  metadata.reflection = DebugPolicyGet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DebugPolicyGet_Response::kPolicyFieldNumber;
#endif  // !_MSC_VER

DebugPolicyGet_Response::DebugPolicyGet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
}

void DebugPolicyGet_Response::InitAsDefaultInstance() {
}

DebugPolicyGet_Response::DebugPolicyGet_Response(const DebugPolicyGet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
}

void DebugPolicyGet_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPolicyGet_Response::~DebugPolicyGet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  SharedDtor();
}

void DebugPolicyGet_Response::SharedDtor() {
  if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete policy_;
  }
  if (this != default_instance_) {
  }
}

void DebugPolicyGet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPolicyGet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPolicyGet_Response_descriptor_;
}

const DebugPolicyGet_Response& DebugPolicyGet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugPolicyGet_Response* DebugPolicyGet_Response::default_instance_ = NULL;

DebugPolicyGet_Response* DebugPolicyGet_Response::New() const {
  return new DebugPolicyGet_Response;
}

void DebugPolicyGet_Response::Clear() {
  if (has_policy()) {
    if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      policy_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPolicyGet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  return false;
#undef DO_
}

void DebugPolicyGet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  // optional string policy = 1;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
}

::google::protobuf::uint8* DebugPolicyGet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  // optional string policy = 1;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->policy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugPolicyGet.Response)
  return target;
}

int DebugPolicyGet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string policy = 1;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPolicyGet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPolicyGet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPolicyGet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPolicyGet_Response::MergeFrom(const DebugPolicyGet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_policy()) {
      set_policy(from.policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPolicyGet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPolicyGet_Response::CopyFrom(const DebugPolicyGet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPolicyGet_Response::IsInitialized() const {

  return true;
}

void DebugPolicyGet_Response::Swap(DebugPolicyGet_Response* other) {
  if (other != this) {
    std::swap(policy_, other->policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPolicyGet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPolicyGet_Response_descriptor_;
  metadata.reflection = DebugPolicyGet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugPolicyGet::DebugPolicyGet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugPolicyGet)
}

void DebugPolicyGet::InitAsDefaultInstance() {
}

DebugPolicyGet::DebugPolicyGet(const DebugPolicyGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugPolicyGet)
}

void DebugPolicyGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPolicyGet::~DebugPolicyGet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  SharedDtor();
}

void DebugPolicyGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugPolicyGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPolicyGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPolicyGet_descriptor_;
}

const DebugPolicyGet& DebugPolicyGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugPolicyGet* DebugPolicyGet::default_instance_ = NULL;

DebugPolicyGet* DebugPolicyGet::New() const {
  return new DebugPolicyGet;
}

void DebugPolicyGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPolicyGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  return false;
#undef DO_
}

void DebugPolicyGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugPolicyGet)
}

::google::protobuf::uint8* DebugPolicyGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugPolicyGet)
  return target;
}

int DebugPolicyGet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPolicyGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPolicyGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPolicyGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPolicyGet::MergeFrom(const DebugPolicyGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPolicyGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPolicyGet::CopyFrom(const DebugPolicyGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPolicyGet::IsInitialized() const {

  return true;
}

void DebugPolicyGet::Swap(DebugPolicyGet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPolicyGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPolicyGet_descriptor_;
  metadata.reflection = DebugPolicyGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugPolicySet_Request::kPolicyFieldNumber;
#endif  // !_MSC_VER

DebugPolicySet_Request::DebugPolicySet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
}

void DebugPolicySet_Request::InitAsDefaultInstance() {
}

DebugPolicySet_Request::DebugPolicySet_Request(const DebugPolicySet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
}

void DebugPolicySet_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPolicySet_Request::~DebugPolicySet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  SharedDtor();
}

void DebugPolicySet_Request::SharedDtor() {
  if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete policy_;
  }
  if (this != default_instance_) {
  }
}

void DebugPolicySet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPolicySet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPolicySet_Request_descriptor_;
}

const DebugPolicySet_Request& DebugPolicySet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugPolicySet_Request* DebugPolicySet_Request::default_instance_ = NULL;

DebugPolicySet_Request* DebugPolicySet_Request::New() const {
  return new DebugPolicySet_Request;
}

void DebugPolicySet_Request::Clear() {
  if (has_policy()) {
    if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      policy_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPolicySet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  return false;
#undef DO_
}

void DebugPolicySet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  // optional string policy = 1;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
}

::google::protobuf::uint8* DebugPolicySet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  // optional string policy = 1;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->policy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugPolicySet.Request)
  return target;
}

int DebugPolicySet_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string policy = 1;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPolicySet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPolicySet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPolicySet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPolicySet_Request::MergeFrom(const DebugPolicySet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_policy()) {
      set_policy(from.policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPolicySet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPolicySet_Request::CopyFrom(const DebugPolicySet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPolicySet_Request::IsInitialized() const {

  return true;
}

void DebugPolicySet_Request::Swap(DebugPolicySet_Request* other) {
  if (other != this) {
    std::swap(policy_, other->policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPolicySet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPolicySet_Request_descriptor_;
  metadata.reflection = DebugPolicySet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugPolicySet_Response::DebugPolicySet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
}

void DebugPolicySet_Response::InitAsDefaultInstance() {
}

DebugPolicySet_Response::DebugPolicySet_Response(const DebugPolicySet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
}

void DebugPolicySet_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPolicySet_Response::~DebugPolicySet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  SharedDtor();
}

void DebugPolicySet_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugPolicySet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPolicySet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPolicySet_Response_descriptor_;
}

const DebugPolicySet_Response& DebugPolicySet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugPolicySet_Response* DebugPolicySet_Response::default_instance_ = NULL;

DebugPolicySet_Response* DebugPolicySet_Response::New() const {
  return new DebugPolicySet_Response;
}

void DebugPolicySet_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPolicySet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  return false;
#undef DO_
}

void DebugPolicySet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
}

::google::protobuf::uint8* DebugPolicySet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugPolicySet.Response)
  return target;
}

int DebugPolicySet_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPolicySet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPolicySet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPolicySet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPolicySet_Response::MergeFrom(const DebugPolicySet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPolicySet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPolicySet_Response::CopyFrom(const DebugPolicySet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPolicySet_Response::IsInitialized() const {

  return true;
}

void DebugPolicySet_Response::Swap(DebugPolicySet_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPolicySet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPolicySet_Response_descriptor_;
  metadata.reflection = DebugPolicySet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugPolicySet::DebugPolicySet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugPolicySet)
}

void DebugPolicySet::InitAsDefaultInstance() {
}

DebugPolicySet::DebugPolicySet(const DebugPolicySet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugPolicySet)
}

void DebugPolicySet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPolicySet::~DebugPolicySet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugPolicySet)
  SharedDtor();
}

void DebugPolicySet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugPolicySet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPolicySet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPolicySet_descriptor_;
}

const DebugPolicySet& DebugPolicySet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugPolicySet* DebugPolicySet::default_instance_ = NULL;

DebugPolicySet* DebugPolicySet::New() const {
  return new DebugPolicySet;
}

void DebugPolicySet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPolicySet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugPolicySet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugPolicySet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugPolicySet)
  return false;
#undef DO_
}

void DebugPolicySet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugPolicySet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugPolicySet)
}

::google::protobuf::uint8* DebugPolicySet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugPolicySet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugPolicySet)
  return target;
}

int DebugPolicySet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPolicySet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPolicySet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPolicySet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPolicySet::MergeFrom(const DebugPolicySet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPolicySet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPolicySet::CopyFrom(const DebugPolicySet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPolicySet::IsInitialized() const {

  return true;
}

void DebugPolicySet::Swap(DebugPolicySet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPolicySet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPolicySet_descriptor_;
  metadata.reflection = DebugPolicySet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugRotate_Request::DebugRotate_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugRotate.Request)
}

void DebugRotate_Request::InitAsDefaultInstance() {
}

DebugRotate_Request::DebugRotate_Request(const DebugRotate_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugRotate.Request)
}

void DebugRotate_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugRotate_Request::~DebugRotate_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  SharedDtor();
}

void DebugRotate_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugRotate_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugRotate_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugRotate_Request_descriptor_;
}

const DebugRotate_Request& DebugRotate_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugRotate_Request* DebugRotate_Request::default_instance_ = NULL;

DebugRotate_Request* DebugRotate_Request::New() const {
  return new DebugRotate_Request;
}

void DebugRotate_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugRotate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  return false;
#undef DO_
}

void DebugRotate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugRotate.Request)
}

::google::protobuf::uint8* DebugRotate_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugRotate.Request)
  return target;
}

int DebugRotate_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugRotate_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugRotate_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugRotate_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugRotate_Request::MergeFrom(const DebugRotate_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugRotate_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugRotate_Request::CopyFrom(const DebugRotate_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugRotate_Request::IsInitialized() const {

  return true;
}

void DebugRotate_Request::Swap(DebugRotate_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugRotate_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugRotate_Request_descriptor_;
  metadata.reflection = DebugRotate_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DebugRotate_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

DebugRotate_Response::DebugRotate_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugRotate.Response)
}

void DebugRotate_Response::InitAsDefaultInstance() {
}

DebugRotate_Response::DebugRotate_Response(const DebugRotate_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugRotate.Response)
}

void DebugRotate_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugRotate_Response::~DebugRotate_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  SharedDtor();
}

void DebugRotate_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void DebugRotate_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugRotate_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugRotate_Response_descriptor_;
}

const DebugRotate_Response& DebugRotate_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugRotate_Response* DebugRotate_Response::default_instance_ = NULL;

DebugRotate_Response* DebugRotate_Response::New() const {
  return new DebugRotate_Response;
}

void DebugRotate_Response::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugRotate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  return false;
#undef DO_
}

void DebugRotate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugRotate.Response)
}

::google::protobuf::uint8* DebugRotate_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugRotate.Response)
  return target;
}

int DebugRotate_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugRotate_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugRotate_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugRotate_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugRotate_Response::MergeFrom(const DebugRotate_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugRotate_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugRotate_Response::CopyFrom(const DebugRotate_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugRotate_Response::IsInitialized() const {

  return true;
}

void DebugRotate_Response::Swap(DebugRotate_Response* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugRotate_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugRotate_Response_descriptor_;
  metadata.reflection = DebugRotate_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

DebugRotate::DebugRotate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.DebugRotate)
}

void DebugRotate::InitAsDefaultInstance() {
}

DebugRotate::DebugRotate(const DebugRotate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.DebugRotate)
}

void DebugRotate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugRotate::~DebugRotate() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.DebugRotate)
  SharedDtor();
}

void DebugRotate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugRotate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugRotate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugRotate_descriptor_;
}

const DebugRotate& DebugRotate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

DebugRotate* DebugRotate::default_instance_ = NULL;

DebugRotate* DebugRotate::New() const {
  return new DebugRotate;
}

void DebugRotate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugRotate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.DebugRotate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.DebugRotate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.DebugRotate)
  return false;
#undef DO_
}

void DebugRotate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.DebugRotate)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.DebugRotate)
}

::google::protobuf::uint8* DebugRotate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.DebugRotate)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.DebugRotate)
  return target;
}

int DebugRotate::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugRotate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugRotate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugRotate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugRotate::MergeFrom(const DebugRotate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugRotate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugRotate::CopyFrom(const DebugRotate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugRotate::IsInitialized() const {

  return true;
}

void DebugRotate::Swap(DebugRotate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugRotate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugRotate_descriptor_;
  metadata.reflection = DebugRotate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerInfoGet_Request::ServerInfoGet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
}

void ServerInfoGet_Request::InitAsDefaultInstance() {
}

ServerInfoGet_Request::ServerInfoGet_Request(const ServerInfoGet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
}

void ServerInfoGet_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoGet_Request::~ServerInfoGet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  SharedDtor();
}

void ServerInfoGet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoGet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoGet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoGet_Request_descriptor_;
}

const ServerInfoGet_Request& ServerInfoGet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerInfoGet_Request* ServerInfoGet_Request::default_instance_ = NULL;

ServerInfoGet_Request* ServerInfoGet_Request::New() const {
  return new ServerInfoGet_Request;
}

void ServerInfoGet_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoGet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  return false;
#undef DO_
}

void ServerInfoGet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
}

::google::protobuf::uint8* ServerInfoGet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerInfoGet.Request)
  return target;
}

int ServerInfoGet_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoGet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoGet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoGet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoGet_Request::MergeFrom(const ServerInfoGet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoGet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoGet_Request::CopyFrom(const ServerInfoGet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoGet_Request::IsInitialized() const {

  return true;
}

void ServerInfoGet_Request::Swap(ServerInfoGet_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoGet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoGet_Request_descriptor_;
  metadata.reflection = ServerInfoGet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerInfoGet_Response::kServerIdFieldNumber;
const int ServerInfoGet_Response::kAddressesFieldNumber;
const int ServerInfoGet_Response::kProcessIdFieldNumber;
#endif  // !_MSC_VER

ServerInfoGet_Response::ServerInfoGet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
}

void ServerInfoGet_Response::InitAsDefaultInstance() {
}

ServerInfoGet_Response::ServerInfoGet_Response(const ServerInfoGet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
}

void ServerInfoGet_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoGet_Response::~ServerInfoGet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  SharedDtor();
}

void ServerInfoGet_Response::SharedDtor() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfoGet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoGet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoGet_Response_descriptor_;
}

const ServerInfoGet_Response& ServerInfoGet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerInfoGet_Response* ServerInfoGet_Response::default_instance_ = NULL;

ServerInfoGet_Response* ServerInfoGet_Response::New() const {
  return new ServerInfoGet_Response;
}

void ServerInfoGet_Response::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_addresses()) {
      if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addresses_->clear();
      }
    }
    process_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoGet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addresses;
        break;
      }

      // optional string addresses = 2;
      case 2: {
        if (tag == 18) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addresses().data(), this->addresses().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addresses");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process_id;
        break;
      }

      // optional uint64 process_id = 3;
      case 3: {
        if (tag == 24) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  return false;
#undef DO_
}

void ServerInfoGet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  // optional uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // optional string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addresses(), output);
  }

  // optional uint64 process_id = 3;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->process_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
}

::google::protobuf::uint8* ServerInfoGet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  // optional uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // optional string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addresses(), target);
  }

  // optional uint64 process_id = 3;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->process_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerInfoGet.Response)
  return target;
}

int ServerInfoGet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional string addresses = 2;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addresses());
    }

    // optional uint64 process_id = 3;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->process_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoGet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoGet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoGet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoGet_Response::MergeFrom(const ServerInfoGet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_addresses()) {
      set_addresses(from.addresses());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoGet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoGet_Response::CopyFrom(const ServerInfoGet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoGet_Response::IsInitialized() const {

  return true;
}

void ServerInfoGet_Response::Swap(ServerInfoGet_Response* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(addresses_, other->addresses_);
    std::swap(process_id_, other->process_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoGet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoGet_Response_descriptor_;
  metadata.reflection = ServerInfoGet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerInfoGet::ServerInfoGet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerInfoGet)
}

void ServerInfoGet::InitAsDefaultInstance() {
}

ServerInfoGet::ServerInfoGet(const ServerInfoGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerInfoGet)
}

void ServerInfoGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoGet::~ServerInfoGet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerInfoGet)
  SharedDtor();
}

void ServerInfoGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoGet_descriptor_;
}

const ServerInfoGet& ServerInfoGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerInfoGet* ServerInfoGet::default_instance_ = NULL;

ServerInfoGet* ServerInfoGet::New() const {
  return new ServerInfoGet;
}

void ServerInfoGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerInfoGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerInfoGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerInfoGet)
  return false;
#undef DO_
}

void ServerInfoGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerInfoGet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerInfoGet)
}

::google::protobuf::uint8* ServerInfoGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerInfoGet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerInfoGet)
  return target;
}

int ServerInfoGet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoGet::MergeFrom(const ServerInfoGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoGet::CopyFrom(const ServerInfoGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoGet::IsInitialized() const {

  return true;
}

void ServerInfoGet::Swap(ServerInfoGet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoGet_descriptor_;
  metadata.reflection = ServerInfoGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatsDump_Request::ServerStatsDump_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
}

void ServerStatsDump_Request::InitAsDefaultInstance() {
}

ServerStatsDump_Request::ServerStatsDump_Request(const ServerStatsDump_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
}

void ServerStatsDump_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatsDump_Request::~ServerStatsDump_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  SharedDtor();
}

void ServerStatsDump_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatsDump_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatsDump_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatsDump_Request_descriptor_;
}

const ServerStatsDump_Request& ServerStatsDump_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerStatsDump_Request* ServerStatsDump_Request::default_instance_ = NULL;

ServerStatsDump_Request* ServerStatsDump_Request::New() const {
  return new ServerStatsDump_Request;
}

void ServerStatsDump_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatsDump_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  return false;
#undef DO_
}

void ServerStatsDump_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
}

::google::protobuf::uint8* ServerStatsDump_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerStatsDump.Request)
  return target;
}

int ServerStatsDump_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatsDump_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatsDump_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatsDump_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatsDump_Request::MergeFrom(const ServerStatsDump_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatsDump_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatsDump_Request::CopyFrom(const ServerStatsDump_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatsDump_Request::IsInitialized() const {

  return true;
}

void ServerStatsDump_Request::Swap(ServerStatsDump_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatsDump_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatsDump_Request_descriptor_;
  metadata.reflection = ServerStatsDump_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatsDump_Response::ServerStatsDump_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
}

void ServerStatsDump_Response::InitAsDefaultInstance() {
}

ServerStatsDump_Response::ServerStatsDump_Response(const ServerStatsDump_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
}

void ServerStatsDump_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatsDump_Response::~ServerStatsDump_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  SharedDtor();
}

void ServerStatsDump_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatsDump_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatsDump_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatsDump_Response_descriptor_;
}

const ServerStatsDump_Response& ServerStatsDump_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerStatsDump_Response* ServerStatsDump_Response::default_instance_ = NULL;

ServerStatsDump_Response* ServerStatsDump_Response::New() const {
  return new ServerStatsDump_Response;
}

void ServerStatsDump_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatsDump_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  return false;
#undef DO_
}

void ServerStatsDump_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
}

::google::protobuf::uint8* ServerStatsDump_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerStatsDump.Response)
  return target;
}

int ServerStatsDump_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatsDump_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatsDump_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatsDump_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatsDump_Response::MergeFrom(const ServerStatsDump_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatsDump_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatsDump_Response::CopyFrom(const ServerStatsDump_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatsDump_Response::IsInitialized() const {

  return true;
}

void ServerStatsDump_Response::Swap(ServerStatsDump_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatsDump_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatsDump_Response_descriptor_;
  metadata.reflection = ServerStatsDump_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatsDump::ServerStatsDump()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerStatsDump)
}

void ServerStatsDump::InitAsDefaultInstance() {
}

ServerStatsDump::ServerStatsDump(const ServerStatsDump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerStatsDump)
}

void ServerStatsDump::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatsDump::~ServerStatsDump() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerStatsDump)
  SharedDtor();
}

void ServerStatsDump::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatsDump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatsDump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatsDump_descriptor_;
}

const ServerStatsDump& ServerStatsDump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerStatsDump* ServerStatsDump::default_instance_ = NULL;

ServerStatsDump* ServerStatsDump::New() const {
  return new ServerStatsDump;
}

void ServerStatsDump::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatsDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerStatsDump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerStatsDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerStatsDump)
  return false;
#undef DO_
}

void ServerStatsDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerStatsDump)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerStatsDump)
}

::google::protobuf::uint8* ServerStatsDump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerStatsDump)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerStatsDump)
  return target;
}

int ServerStatsDump::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatsDump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatsDump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatsDump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatsDump::MergeFrom(const ServerStatsDump& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatsDump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatsDump::CopyFrom(const ServerStatsDump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatsDump::IsInitialized() const {

  return true;
}

void ServerStatsDump::Swap(ServerStatsDump* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatsDump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatsDump_descriptor_;
  metadata.reflection = ServerStatsDump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatsGet_Request::ServerStatsGet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
}

void ServerStatsGet_Request::InitAsDefaultInstance() {
}

ServerStatsGet_Request::ServerStatsGet_Request(const ServerStatsGet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
}

void ServerStatsGet_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatsGet_Request::~ServerStatsGet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  SharedDtor();
}

void ServerStatsGet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatsGet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatsGet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatsGet_Request_descriptor_;
}

const ServerStatsGet_Request& ServerStatsGet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerStatsGet_Request* ServerStatsGet_Request::default_instance_ = NULL;

ServerStatsGet_Request* ServerStatsGet_Request::New() const {
  return new ServerStatsGet_Request;
}

void ServerStatsGet_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatsGet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  return false;
#undef DO_
}

void ServerStatsGet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
}

::google::protobuf::uint8* ServerStatsGet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerStatsGet.Request)
  return target;
}

int ServerStatsGet_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatsGet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatsGet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatsGet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatsGet_Request::MergeFrom(const ServerStatsGet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatsGet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatsGet_Request::CopyFrom(const ServerStatsGet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatsGet_Request::IsInitialized() const {

  return true;
}

void ServerStatsGet_Request::Swap(ServerStatsGet_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatsGet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatsGet_Request_descriptor_;
  metadata.reflection = ServerStatsGet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerStatsGet_Response::kServerStatsFieldNumber;
#endif  // !_MSC_VER

ServerStatsGet_Response::ServerStatsGet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
}

void ServerStatsGet_Response::InitAsDefaultInstance() {
  server_stats_ = const_cast< ::LogCabin::Protocol::ServerStats*>(&::LogCabin::Protocol::ServerStats::default_instance());
}

ServerStatsGet_Response::ServerStatsGet_Response(const ServerStatsGet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
}

void ServerStatsGet_Response::SharedCtor() {
  _cached_size_ = 0;
  server_stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatsGet_Response::~ServerStatsGet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  SharedDtor();
}

void ServerStatsGet_Response::SharedDtor() {
  if (this != default_instance_) {
    delete server_stats_;
  }
}

void ServerStatsGet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatsGet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatsGet_Response_descriptor_;
}

const ServerStatsGet_Response& ServerStatsGet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerStatsGet_Response* ServerStatsGet_Response::default_instance_ = NULL;

ServerStatsGet_Response* ServerStatsGet_Response::New() const {
  return new ServerStatsGet_Response;
}

void ServerStatsGet_Response::Clear() {
  if (has_server_stats()) {
    if (server_stats_ != NULL) server_stats_->::LogCabin::Protocol::ServerStats::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatsGet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.ServerStats server_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  return false;
#undef DO_
}

void ServerStatsGet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  // optional .LogCabin.Protocol.ServerStats server_stats = 1;
  if (has_server_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
}

::google::protobuf::uint8* ServerStatsGet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  // optional .LogCabin.Protocol.ServerStats server_stats = 1;
  if (has_server_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerStatsGet.Response)
  return target;
}

int ServerStatsGet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.ServerStats server_stats = 1;
    if (has_server_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatsGet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatsGet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatsGet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatsGet_Response::MergeFrom(const ServerStatsGet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_stats()) {
      mutable_server_stats()->::LogCabin::Protocol::ServerStats::MergeFrom(from.server_stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatsGet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatsGet_Response::CopyFrom(const ServerStatsGet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatsGet_Response::IsInitialized() const {

  return true;
}

void ServerStatsGet_Response::Swap(ServerStatsGet_Response* other) {
  if (other != this) {
    std::swap(server_stats_, other->server_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatsGet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatsGet_Response_descriptor_;
  metadata.reflection = ServerStatsGet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatsGet::ServerStatsGet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.ServerStatsGet)
}

void ServerStatsGet::InitAsDefaultInstance() {
}

ServerStatsGet::ServerStatsGet(const ServerStatsGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.ServerStatsGet)
}

void ServerStatsGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatsGet::~ServerStatsGet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.ServerStatsGet)
  SharedDtor();
}

void ServerStatsGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatsGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatsGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatsGet_descriptor_;
}

const ServerStatsGet& ServerStatsGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

ServerStatsGet* ServerStatsGet::default_instance_ = NULL;

ServerStatsGet* ServerStatsGet::New() const {
  return new ServerStatsGet;
}

void ServerStatsGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatsGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.ServerStatsGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.ServerStatsGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.ServerStatsGet)
  return false;
#undef DO_
}

void ServerStatsGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.ServerStatsGet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.ServerStatsGet)
}

::google::protobuf::uint8* ServerStatsGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.ServerStatsGet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.ServerStatsGet)
  return target;
}

int ServerStatsGet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatsGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatsGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatsGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatsGet::MergeFrom(const ServerStatsGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatsGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatsGet::CopyFrom(const ServerStatsGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatsGet::IsInitialized() const {

  return true;
}

void ServerStatsGet::Swap(ServerStatsGet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatsGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatsGet_descriptor_;
  metadata.reflection = ServerStatsGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotControl_Request::kCommandFieldNumber;
#endif  // !_MSC_VER

SnapshotControl_Request::SnapshotControl_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
}

void SnapshotControl_Request::InitAsDefaultInstance() {
}

SnapshotControl_Request::SnapshotControl_Request(const SnapshotControl_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
}

void SnapshotControl_Request::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotControl_Request::~SnapshotControl_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  SharedDtor();
}

void SnapshotControl_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotControl_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotControl_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotControl_Request_descriptor_;
}

const SnapshotControl_Request& SnapshotControl_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotControl_Request* SnapshotControl_Request::default_instance_ = NULL;

SnapshotControl_Request* SnapshotControl_Request::New() const {
  return new SnapshotControl_Request;
}

void SnapshotControl_Request::Clear() {
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotControl_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogCabin.Protocol.ServerControl.SnapshotCommand command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::ServerControl::SnapshotCommand_IsValid(value)) {
            set_command(static_cast< ::LogCabin::Protocol::ServerControl::SnapshotCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  return false;
#undef DO_
}

void SnapshotControl_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  // required .LogCabin.Protocol.ServerControl.SnapshotCommand command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
}

::google::protobuf::uint8* SnapshotControl_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  // required .LogCabin.Protocol.ServerControl.SnapshotCommand command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotControl.Request)
  return target;
}

int SnapshotControl_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.ServerControl.SnapshotCommand command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotControl_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotControl_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotControl_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotControl_Request::MergeFrom(const SnapshotControl_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotControl_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotControl_Request::CopyFrom(const SnapshotControl_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotControl_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SnapshotControl_Request::Swap(SnapshotControl_Request* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotControl_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotControl_Request_descriptor_;
  metadata.reflection = SnapshotControl_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SnapshotControl_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

SnapshotControl_Response::SnapshotControl_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
}

void SnapshotControl_Response::InitAsDefaultInstance() {
}

SnapshotControl_Response::SnapshotControl_Response(const SnapshotControl_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
}

void SnapshotControl_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotControl_Response::~SnapshotControl_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  SharedDtor();
}

void SnapshotControl_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotControl_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotControl_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotControl_Response_descriptor_;
}

const SnapshotControl_Response& SnapshotControl_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotControl_Response* SnapshotControl_Response::default_instance_ = NULL;

SnapshotControl_Response* SnapshotControl_Response::New() const {
  return new SnapshotControl_Response;
}

void SnapshotControl_Response::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotControl_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  return false;
#undef DO_
}

void SnapshotControl_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
}

::google::protobuf::uint8* SnapshotControl_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotControl.Response)
  return target;
}

int SnapshotControl_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotControl_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotControl_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotControl_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotControl_Response::MergeFrom(const SnapshotControl_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotControl_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotControl_Response::CopyFrom(const SnapshotControl_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotControl_Response::IsInitialized() const {

  return true;
}

void SnapshotControl_Response::Swap(SnapshotControl_Response* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotControl_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotControl_Response_descriptor_;
  metadata.reflection = SnapshotControl_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapshotControl::SnapshotControl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotControl)
}

void SnapshotControl::InitAsDefaultInstance() {
}

SnapshotControl::SnapshotControl(const SnapshotControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotControl)
}

void SnapshotControl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotControl::~SnapshotControl() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotControl)
  SharedDtor();
}

void SnapshotControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotControl_descriptor_;
}

const SnapshotControl& SnapshotControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotControl* SnapshotControl::default_instance_ = NULL;

SnapshotControl* SnapshotControl::New() const {
  return new SnapshotControl;
}

void SnapshotControl::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotControl)
  return false;
#undef DO_
}

void SnapshotControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotControl)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotControl)
}

::google::protobuf::uint8* SnapshotControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotControl)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotControl)
  return target;
}

int SnapshotControl::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotControl::MergeFrom(const SnapshotControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotControl::CopyFrom(const SnapshotControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotControl::IsInitialized() const {

  return true;
}

void SnapshotControl::Swap(SnapshotControl* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotControl_descriptor_;
  metadata.reflection = SnapshotControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapshotInhibitGet_Request::SnapshotInhibitGet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
}

void SnapshotInhibitGet_Request::InitAsDefaultInstance() {
}

SnapshotInhibitGet_Request::SnapshotInhibitGet_Request(const SnapshotInhibitGet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
}

void SnapshotInhibitGet_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotInhibitGet_Request::~SnapshotInhibitGet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  SharedDtor();
}

void SnapshotInhibitGet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotInhibitGet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotInhibitGet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotInhibitGet_Request_descriptor_;
}

const SnapshotInhibitGet_Request& SnapshotInhibitGet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotInhibitGet_Request* SnapshotInhibitGet_Request::default_instance_ = NULL;

SnapshotInhibitGet_Request* SnapshotInhibitGet_Request::New() const {
  return new SnapshotInhibitGet_Request;
}

void SnapshotInhibitGet_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotInhibitGet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  return false;
#undef DO_
}

void SnapshotInhibitGet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
}

::google::protobuf::uint8* SnapshotInhibitGet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Request)
  return target;
}

int SnapshotInhibitGet_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotInhibitGet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotInhibitGet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotInhibitGet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotInhibitGet_Request::MergeFrom(const SnapshotInhibitGet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotInhibitGet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotInhibitGet_Request::CopyFrom(const SnapshotInhibitGet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotInhibitGet_Request::IsInitialized() const {

  return true;
}

void SnapshotInhibitGet_Request::Swap(SnapshotInhibitGet_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotInhibitGet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotInhibitGet_Request_descriptor_;
  metadata.reflection = SnapshotInhibitGet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SnapshotInhibitGet_Response::kNanosecondsFieldNumber;
#endif  // !_MSC_VER

SnapshotInhibitGet_Response::SnapshotInhibitGet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
}

void SnapshotInhibitGet_Response::InitAsDefaultInstance() {
}

SnapshotInhibitGet_Response::SnapshotInhibitGet_Response(const SnapshotInhibitGet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
}

void SnapshotInhibitGet_Response::SharedCtor() {
  _cached_size_ = 0;
  nanoseconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotInhibitGet_Response::~SnapshotInhibitGet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  SharedDtor();
}

void SnapshotInhibitGet_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotInhibitGet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotInhibitGet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotInhibitGet_Response_descriptor_;
}

const SnapshotInhibitGet_Response& SnapshotInhibitGet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotInhibitGet_Response* SnapshotInhibitGet_Response::default_instance_ = NULL;

SnapshotInhibitGet_Response* SnapshotInhibitGet_Response::New() const {
  return new SnapshotInhibitGet_Response;
}

void SnapshotInhibitGet_Response::Clear() {
  nanoseconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotInhibitGet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nanoseconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanoseconds_)));
          set_has_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  return false;
#undef DO_
}

void SnapshotInhibitGet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  // optional uint64 nanoseconds = 1;
  if (has_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nanoseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
}

::google::protobuf::uint8* SnapshotInhibitGet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  // optional uint64 nanoseconds = 1;
  if (has_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nanoseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotInhibitGet.Response)
  return target;
}

int SnapshotInhibitGet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nanoseconds = 1;
    if (has_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nanoseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotInhibitGet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotInhibitGet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotInhibitGet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotInhibitGet_Response::MergeFrom(const SnapshotInhibitGet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nanoseconds()) {
      set_nanoseconds(from.nanoseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotInhibitGet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotInhibitGet_Response::CopyFrom(const SnapshotInhibitGet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotInhibitGet_Response::IsInitialized() const {

  return true;
}

void SnapshotInhibitGet_Response::Swap(SnapshotInhibitGet_Response* other) {
  if (other != this) {
    std::swap(nanoseconds_, other->nanoseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotInhibitGet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotInhibitGet_Response_descriptor_;
  metadata.reflection = SnapshotInhibitGet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapshotInhibitGet::SnapshotInhibitGet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
}

void SnapshotInhibitGet::InitAsDefaultInstance() {
}

SnapshotInhibitGet::SnapshotInhibitGet(const SnapshotInhibitGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
}

void SnapshotInhibitGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotInhibitGet::~SnapshotInhibitGet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  SharedDtor();
}

void SnapshotInhibitGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotInhibitGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotInhibitGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotInhibitGet_descriptor_;
}

const SnapshotInhibitGet& SnapshotInhibitGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotInhibitGet* SnapshotInhibitGet::default_instance_ = NULL;

SnapshotInhibitGet* SnapshotInhibitGet::New() const {
  return new SnapshotInhibitGet;
}

void SnapshotInhibitGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotInhibitGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  return false;
#undef DO_
}

void SnapshotInhibitGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
}

::google::protobuf::uint8* SnapshotInhibitGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotInhibitGet)
  return target;
}

int SnapshotInhibitGet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotInhibitGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotInhibitGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotInhibitGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotInhibitGet::MergeFrom(const SnapshotInhibitGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotInhibitGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotInhibitGet::CopyFrom(const SnapshotInhibitGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotInhibitGet::IsInitialized() const {

  return true;
}

void SnapshotInhibitGet::Swap(SnapshotInhibitGet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotInhibitGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotInhibitGet_descriptor_;
  metadata.reflection = SnapshotInhibitGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotInhibitSet_Request::kNanosecondsFieldNumber;
#endif  // !_MSC_VER

SnapshotInhibitSet_Request::SnapshotInhibitSet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
}

void SnapshotInhibitSet_Request::InitAsDefaultInstance() {
}

SnapshotInhibitSet_Request::SnapshotInhibitSet_Request(const SnapshotInhibitSet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
}

void SnapshotInhibitSet_Request::SharedCtor() {
  _cached_size_ = 0;
  nanoseconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotInhibitSet_Request::~SnapshotInhibitSet_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  SharedDtor();
}

void SnapshotInhibitSet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotInhibitSet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotInhibitSet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotInhibitSet_Request_descriptor_;
}

const SnapshotInhibitSet_Request& SnapshotInhibitSet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotInhibitSet_Request* SnapshotInhibitSet_Request::default_instance_ = NULL;

SnapshotInhibitSet_Request* SnapshotInhibitSet_Request::New() const {
  return new SnapshotInhibitSet_Request;
}

void SnapshotInhibitSet_Request::Clear() {
  nanoseconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotInhibitSet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nanoseconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanoseconds_)));
          set_has_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  return false;
#undef DO_
}

void SnapshotInhibitSet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  // optional uint64 nanoseconds = 1;
  if (has_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nanoseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
}

::google::protobuf::uint8* SnapshotInhibitSet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  // optional uint64 nanoseconds = 1;
  if (has_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nanoseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Request)
  return target;
}

int SnapshotInhibitSet_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nanoseconds = 1;
    if (has_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nanoseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotInhibitSet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotInhibitSet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotInhibitSet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotInhibitSet_Request::MergeFrom(const SnapshotInhibitSet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nanoseconds()) {
      set_nanoseconds(from.nanoseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotInhibitSet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotInhibitSet_Request::CopyFrom(const SnapshotInhibitSet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotInhibitSet_Request::IsInitialized() const {

  return true;
}

void SnapshotInhibitSet_Request::Swap(SnapshotInhibitSet_Request* other) {
  if (other != this) {
    std::swap(nanoseconds_, other->nanoseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotInhibitSet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotInhibitSet_Request_descriptor_;
  metadata.reflection = SnapshotInhibitSet_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SnapshotInhibitSet_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

SnapshotInhibitSet_Response::SnapshotInhibitSet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
}

void SnapshotInhibitSet_Response::InitAsDefaultInstance() {
}

SnapshotInhibitSet_Response::SnapshotInhibitSet_Response(const SnapshotInhibitSet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
}

void SnapshotInhibitSet_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotInhibitSet_Response::~SnapshotInhibitSet_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  SharedDtor();
}

void SnapshotInhibitSet_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotInhibitSet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotInhibitSet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotInhibitSet_Response_descriptor_;
}

const SnapshotInhibitSet_Response& SnapshotInhibitSet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotInhibitSet_Response* SnapshotInhibitSet_Response::default_instance_ = NULL;

SnapshotInhibitSet_Response* SnapshotInhibitSet_Response::New() const {
  return new SnapshotInhibitSet_Response;
}

void SnapshotInhibitSet_Response::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotInhibitSet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  return false;
#undef DO_
}

void SnapshotInhibitSet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
}

::google::protobuf::uint8* SnapshotInhibitSet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotInhibitSet.Response)
  return target;
}

int SnapshotInhibitSet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotInhibitSet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotInhibitSet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotInhibitSet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotInhibitSet_Response::MergeFrom(const SnapshotInhibitSet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotInhibitSet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotInhibitSet_Response::CopyFrom(const SnapshotInhibitSet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotInhibitSet_Response::IsInitialized() const {

  return true;
}

void SnapshotInhibitSet_Response::Swap(SnapshotInhibitSet_Response* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotInhibitSet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotInhibitSet_Response_descriptor_;
  metadata.reflection = SnapshotInhibitSet_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapshotInhibitSet::SnapshotInhibitSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
}

void SnapshotInhibitSet::InitAsDefaultInstance() {
}

SnapshotInhibitSet::SnapshotInhibitSet(const SnapshotInhibitSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
}

void SnapshotInhibitSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotInhibitSet::~SnapshotInhibitSet() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  SharedDtor();
}

void SnapshotInhibitSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotInhibitSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotInhibitSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotInhibitSet_descriptor_;
}

const SnapshotInhibitSet& SnapshotInhibitSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fServer_2fServerControl_2eproto();
  return *default_instance_;
}

SnapshotInhibitSet* SnapshotInhibitSet::default_instance_ = NULL;

SnapshotInhibitSet* SnapshotInhibitSet::New() const {
  return new SnapshotInhibitSet;
}

void SnapshotInhibitSet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotInhibitSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  return false;
#undef DO_
}

void SnapshotInhibitSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
}

::google::protobuf::uint8* SnapshotInhibitSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.ServerControl.SnapshotInhibitSet)
  return target;
}

int SnapshotInhibitSet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotInhibitSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotInhibitSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotInhibitSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotInhibitSet::MergeFrom(const SnapshotInhibitSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotInhibitSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotInhibitSet::CopyFrom(const SnapshotInhibitSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotInhibitSet::IsInitialized() const {

  return true;
}

void SnapshotInhibitSet::Swap(SnapshotInhibitSet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotInhibitSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotInhibitSet_descriptor_;
  metadata.reflection = SnapshotInhibitSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerControl
}  // namespace Protocol
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
