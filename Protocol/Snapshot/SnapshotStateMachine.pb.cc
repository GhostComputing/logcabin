// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Snapshot/SnapshotStateMachine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Snapshot/SnapshotStateMachine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Server {
namespace SnapshotStateMachine {

namespace {

const ::google::protobuf::Descriptor* VersionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto() {
  protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Snapshot/SnapshotStateMachine.proto");
  GOOGLE_CHECK(file != NULL);
  VersionUpdate_descriptor_ = file->message_type(0);
  static const int VersionUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionUpdate, log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionUpdate, version_),
  };
  VersionUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionUpdate_descriptor_,
      VersionUpdate::default_instance_,
      VersionUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionUpdate));
  Session_descriptor_ = file->message_type(1);
  static const int Session_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, last_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, first_outstanding_rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, rpc_response_),
  };
  Session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Session_descriptor_,
      Session::default_instance_,
      Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Session));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, rpc_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Header_descriptor_ = file->message_type(3);
  static const int Header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, session_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionUpdate_descriptor_, &VersionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Session_descriptor_, &Session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto() {
  delete VersionUpdate::default_instance_;
  delete VersionUpdate_reflection_;
  delete Session::default_instance_;
  delete Session_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
}

void protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogCabin::Protocol::Client::protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,Protocol/Snapshot/SnapshotStateMachine"
    ".proto\022$LogCabin.Server.SnapshotStateMac"
    "hine\032\034Protocol/Client/Client.proto\"3\n\rVe"
    "rsionUpdate\022\021\n\tlog_index\030\001 \002(\004\022\017\n\007versio"
    "n\030\002 \002(\r\"\230\001\n\007Session\022\021\n\tclient_id\030\001 \002(\004\022\025"
    "\n\rlast_modified\030\002 \002(\004\022\035\n\025first_outstandi"
    "ng_rpc\030\003 \002(\004\022D\n\014rpc_response\030\004 \003(\0132..Log"
    "Cabin.Server.SnapshotStateMachine.Respon"
    "se\"h\n\010Response\022\022\n\nrpc_number\030\001 \002(\004\022H\n\010re"
    "sponse\030\002 \002(\01326.LogCabin.Protocol.Client."
    "StateMachineCommand.Response\"\225\001\n\006Header\022"
    "K\n\016version_update\030\001 \003(\01323.LogCabin.Serve"
    "r.SnapshotStateMachine.VersionUpdate\022>\n\007"
    "session\030\002 \003(\0132-.LogCabin.Server.Snapshot"
    "StateMachine.Session", 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Snapshot/SnapshotStateMachine.proto", &protobuf_RegisterTypes);
  VersionUpdate::default_instance_ = new VersionUpdate();
  Session::default_instance_ = new Session();
  Response::default_instance_ = new Response();
  Header::default_instance_ = new Header();
  VersionUpdate::default_instance_->InitAsDefaultInstance();
  Session::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto {
  StaticDescriptorInitializer_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto() {
    protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto();
  }
} static_descriptor_initializer_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VersionUpdate::kLogIndexFieldNumber;
const int VersionUpdate::kVersionFieldNumber;
#endif  // !_MSC_VER

VersionUpdate::VersionUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
}

void VersionUpdate::InitAsDefaultInstance() {
}

VersionUpdate::VersionUpdate(const VersionUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
}

void VersionUpdate::SharedCtor() {
  _cached_size_ = 0;
  log_index_ = GOOGLE_ULONGLONG(0);
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionUpdate::~VersionUpdate() {
  // @@protoc_insertion_point(destructor:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  SharedDtor();
}

void VersionUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VersionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionUpdate_descriptor_;
}

const VersionUpdate& VersionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto();
  return *default_instance_;
}

VersionUpdate* VersionUpdate::default_instance_ = NULL;

VersionUpdate* VersionUpdate::New() const {
  return new VersionUpdate;
}

void VersionUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VersionUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(log_index_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 log_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_index_)));
          set_has_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  return false;
#undef DO_
}

void VersionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  // required uint64 log_index = 1;
  if (has_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->log_index(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
}

::google::protobuf::uint8* VersionUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  // required uint64 log_index = 1;
  if (has_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->log_index(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Server.SnapshotStateMachine.VersionUpdate)
  return target;
}

int VersionUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 log_index = 1;
    if (has_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_index());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionUpdate::MergeFrom(const VersionUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_index()) {
      set_log_index(from.log_index());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionUpdate::CopyFrom(const VersionUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VersionUpdate::Swap(VersionUpdate* other) {
  if (other != this) {
    std::swap(log_index_, other->log_index_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionUpdate_descriptor_;
  metadata.reflection = VersionUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Session::kClientIdFieldNumber;
const int Session::kLastModifiedFieldNumber;
const int Session::kFirstOutstandingRpcFieldNumber;
const int Session::kRpcResponseFieldNumber;
#endif  // !_MSC_VER

Session::Session()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Server.SnapshotStateMachine.Session)
}

void Session::InitAsDefaultInstance() {
}

Session::Session(const Session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Server.SnapshotStateMachine.Session)
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  last_modified_ = GOOGLE_ULONGLONG(0);
  first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:LogCabin.Server.SnapshotStateMachine.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Session_descriptor_;
}

const Session& Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto();
  return *default_instance_;
}

Session* Session::default_instance_ = NULL;

Session* Session::New() const {
  return new Session;
}

void Session::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Session*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(client_id_, first_outstanding_rpc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rpc_response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Server.SnapshotStateMachine.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_modified;
        break;
      }

      // required uint64 last_modified = 2;
      case 2: {
        if (tag == 16) {
         parse_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_modified_)));
          set_has_last_modified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_first_outstanding_rpc;
        break;
      }

      // required uint64 first_outstanding_rpc = 3;
      case 3: {
        if (tag == 24) {
         parse_first_outstanding_rpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_outstanding_rpc_)));
          set_has_first_outstanding_rpc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rpc_response;
        break;
      }

      // repeated .LogCabin.Server.SnapshotStateMachine.Response rpc_response = 4;
      case 4: {
        if (tag == 34) {
         parse_rpc_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpc_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rpc_response;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Server.SnapshotStateMachine.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Server.SnapshotStateMachine.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Server.SnapshotStateMachine.Session)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // required uint64 last_modified = 2;
  if (has_last_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_modified(), output);
  }

  // required uint64 first_outstanding_rpc = 3;
  if (has_first_outstanding_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->first_outstanding_rpc(), output);
  }

  // repeated .LogCabin.Server.SnapshotStateMachine.Response rpc_response = 4;
  for (int i = 0; i < this->rpc_response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rpc_response(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Server.SnapshotStateMachine.Session)
}

::google::protobuf::uint8* Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Server.SnapshotStateMachine.Session)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // required uint64 last_modified = 2;
  if (has_last_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_modified(), target);
  }

  // required uint64 first_outstanding_rpc = 3;
  if (has_first_outstanding_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->first_outstanding_rpc(), target);
  }

  // repeated .LogCabin.Server.SnapshotStateMachine.Response rpc_response = 4;
  for (int i = 0; i < this->rpc_response_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rpc_response(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Server.SnapshotStateMachine.Session)
  return target;
}

int Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // required uint64 last_modified = 2;
    if (has_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_modified());
    }

    // required uint64 first_outstanding_rpc = 3;
    if (has_first_outstanding_rpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_outstanding_rpc());
    }

  }
  // repeated .LogCabin.Server.SnapshotStateMachine.Response rpc_response = 4;
  total_size += 1 * this->rpc_response_size();
  for (int i = 0; i < this->rpc_response_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpc_response(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpc_response_.MergeFrom(from.rpc_response_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_last_modified()) {
      set_last_modified(from.last_modified());
    }
    if (from.has_first_outstanding_rpc()) {
      set_first_outstanding_rpc(from.first_outstanding_rpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rpc_response())) return false;
  return true;
}

void Session::Swap(Session* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(last_modified_, other->last_modified_);
    std::swap(first_outstanding_rpc_, other->first_outstanding_rpc_);
    rpc_response_.Swap(&other->rpc_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Session_descriptor_;
  metadata.reflection = Session_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kRpcNumberFieldNumber;
const int Response::kResponseFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Server.SnapshotStateMachine.Response)
}

void Response::InitAsDefaultInstance() {
  response_ = const_cast< ::LogCabin::Protocol::Client::StateMachineCommand_Response*>(&::LogCabin::Protocol::Client::StateMachineCommand_Response::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Server.SnapshotStateMachine.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  rpc_number_ = GOOGLE_ULONGLONG(0);
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Server.SnapshotStateMachine.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    rpc_number_ = GOOGLE_ULONGLONG(0);
    if (has_response()) {
      if (response_ != NULL) response_->::LogCabin::Protocol::Client::StateMachineCommand_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Server.SnapshotStateMachine.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rpc_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rpc_number_)));
          set_has_rpc_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // required .LogCabin.Protocol.Client.StateMachineCommand.Response response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Server.SnapshotStateMachine.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Server.SnapshotStateMachine.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Server.SnapshotStateMachine.Response)
  // required uint64 rpc_number = 1;
  if (has_rpc_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rpc_number(), output);
  }

  // required .LogCabin.Protocol.Client.StateMachineCommand.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Server.SnapshotStateMachine.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Server.SnapshotStateMachine.Response)
  // required uint64 rpc_number = 1;
  if (has_rpc_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rpc_number(), target);
  }

  // required .LogCabin.Protocol.Client.StateMachineCommand.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Server.SnapshotStateMachine.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 rpc_number = 1;
    if (has_rpc_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rpc_number());
    }

    // required .LogCabin.Protocol.Client.StateMachineCommand.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_number()) {
      set_rpc_number(from.rpc_number());
    }
    if (from.has_response()) {
      mutable_response()->::LogCabin::Protocol::Client::StateMachineCommand_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(rpc_number_, other->rpc_number_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kVersionUpdateFieldNumber;
const int Header::kSessionFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Server.SnapshotStateMachine.Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Server.SnapshotStateMachine.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:LogCabin.Server.SnapshotStateMachine.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStateMachine_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  version_update_.Clear();
  session_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Server.SnapshotStateMachine.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LogCabin.Server.SnapshotStateMachine.VersionUpdate version_update = 1;
      case 1: {
        if (tag == 10) {
         parse_version_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_version_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_version_update;
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // repeated .LogCabin.Server.SnapshotStateMachine.Session session = 2;
      case 2: {
        if (tag == 18) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Server.SnapshotStateMachine.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Server.SnapshotStateMachine.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Server.SnapshotStateMachine.Header)
  // repeated .LogCabin.Server.SnapshotStateMachine.VersionUpdate version_update = 1;
  for (int i = 0; i < this->version_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->version_update(i), output);
  }

  // repeated .LogCabin.Server.SnapshotStateMachine.Session session = 2;
  for (int i = 0; i < this->session_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Server.SnapshotStateMachine.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Server.SnapshotStateMachine.Header)
  // repeated .LogCabin.Server.SnapshotStateMachine.VersionUpdate version_update = 1;
  for (int i = 0; i < this->version_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->version_update(i), target);
  }

  // repeated .LogCabin.Server.SnapshotStateMachine.Session session = 2;
  for (int i = 0; i < this->session_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Server.SnapshotStateMachine.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  // repeated .LogCabin.Server.SnapshotStateMachine.VersionUpdate version_update = 1;
  total_size += 1 * this->version_update_size();
  for (int i = 0; i < this->version_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->version_update(i));
  }

  // repeated .LogCabin.Server.SnapshotStateMachine.Session session = 2;
  total_size += 1 * this->session_size();
  for (int i = 0; i < this->session_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_update_.MergeFrom(from.version_update_);
  session_.MergeFrom(from.session_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->version_update())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->session())) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    version_update_.Swap(&other->version_update_);
    session_.Swap(&other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SnapshotStateMachine
}  // namespace Server
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
