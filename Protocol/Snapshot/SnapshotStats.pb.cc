// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Snapshot/SnapshotStats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Snapshot/SnapshotStats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Server {
namespace SnapshotStats {

namespace {

const ::google::protobuf::Descriptor* SnapshotStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fSnapshot_2fSnapshotStats_2eproto() {
  protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Snapshot/SnapshotStats.proto");
  GOOGLE_CHECK(file != NULL);
  SnapshotStats_descriptor_ = file->message_type(0);
  static const int SnapshotStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, last_snapshot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, last_snapshot_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, log_start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, log_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, is_leader_),
  };
  SnapshotStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotStats_descriptor_,
      SnapshotStats::default_instance_,
      SnapshotStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotStats));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fSnapshot_2fSnapshotStats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotStats_descriptor_, &SnapshotStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fSnapshot_2fSnapshotStats_2eproto() {
  delete SnapshotStats::default_instance_;
  delete SnapshotStats_reflection_;
}

void protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%Protocol/Snapshot/SnapshotStats.proto\022"
    "\035LogCabin.Server.SnapshotStats\"\240\001\n\rSnaps"
    "hotStats\022\033\n\023last_snapshot_index\030\001 \001(\004\022\033\n"
    "\023last_snapshot_bytes\030\002 \001(\004\022\027\n\017log_start_"
    "index\030\003 \001(\004\022\026\n\016last_log_index\030\004 \001(\004\022\021\n\tl"
    "og_bytes\030\005 \001(\004\022\021\n\tis_leader\030\006 \001(\010", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Snapshot/SnapshotStats.proto", &protobuf_RegisterTypes);
  SnapshotStats::default_instance_ = new SnapshotStats();
  SnapshotStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fSnapshot_2fSnapshotStats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fSnapshot_2fSnapshotStats_2eproto {
  StaticDescriptorInitializer_Protocol_2fSnapshot_2fSnapshotStats_2eproto() {
    protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStats_2eproto();
  }
} static_descriptor_initializer_Protocol_2fSnapshot_2fSnapshotStats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SnapshotStats::kLastSnapshotIndexFieldNumber;
const int SnapshotStats::kLastSnapshotBytesFieldNumber;
const int SnapshotStats::kLogStartIndexFieldNumber;
const int SnapshotStats::kLastLogIndexFieldNumber;
const int SnapshotStats::kLogBytesFieldNumber;
const int SnapshotStats::kIsLeaderFieldNumber;
#endif  // !_MSC_VER

SnapshotStats::SnapshotStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Server.SnapshotStats.SnapshotStats)
}

void SnapshotStats::InitAsDefaultInstance() {
}

SnapshotStats::SnapshotStats(const SnapshotStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Server.SnapshotStats.SnapshotStats)
}

void SnapshotStats::SharedCtor() {
  _cached_size_ = 0;
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
  last_snapshot_bytes_ = GOOGLE_ULONGLONG(0);
  log_start_index_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  log_bytes_ = GOOGLE_ULONGLONG(0);
  is_leader_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotStats::~SnapshotStats() {
  // @@protoc_insertion_point(destructor:LogCabin.Server.SnapshotStats.SnapshotStats)
  SharedDtor();
}

void SnapshotStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotStats_descriptor_;
}

const SnapshotStats& SnapshotStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fSnapshot_2fSnapshotStats_2eproto();
  return *default_instance_;
}

SnapshotStats* SnapshotStats::default_instance_ = NULL;

SnapshotStats* SnapshotStats::New() const {
  return new SnapshotStats;
}

void SnapshotStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SnapshotStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(last_snapshot_index_, is_leader_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Server.SnapshotStats.SnapshotStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_snapshot_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_index_)));
          set_has_last_snapshot_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_snapshot_bytes;
        break;
      }

      // optional uint64 last_snapshot_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_last_snapshot_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_bytes_)));
          set_has_last_snapshot_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_start_index;
        break;
      }

      // optional uint64 log_start_index = 3;
      case 3: {
        if (tag == 24) {
         parse_log_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_start_index_)));
          set_has_log_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 4;
      case 4: {
        if (tag == 32) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_log_bytes;
        break;
      }

      // optional uint64 log_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_log_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_bytes_)));
          set_has_log_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_leader;
        break;
      }

      // optional bool is_leader = 6;
      case 6: {
        if (tag == 48) {
         parse_is_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leader_)));
          set_has_is_leader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Server.SnapshotStats.SnapshotStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Server.SnapshotStats.SnapshotStats)
  return false;
#undef DO_
}

void SnapshotStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Server.SnapshotStats.SnapshotStats)
  // optional uint64 last_snapshot_index = 1;
  if (has_last_snapshot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_snapshot_index(), output);
  }

  // optional uint64 last_snapshot_bytes = 2;
  if (has_last_snapshot_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_snapshot_bytes(), output);
  }

  // optional uint64 log_start_index = 3;
  if (has_log_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->log_start_index(), output);
  }

  // optional uint64 last_log_index = 4;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_index(), output);
  }

  // optional uint64 log_bytes = 5;
  if (has_log_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->log_bytes(), output);
  }

  // optional bool is_leader = 6;
  if (has_is_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Server.SnapshotStats.SnapshotStats)
}

::google::protobuf::uint8* SnapshotStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Server.SnapshotStats.SnapshotStats)
  // optional uint64 last_snapshot_index = 1;
  if (has_last_snapshot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_snapshot_index(), target);
  }

  // optional uint64 last_snapshot_bytes = 2;
  if (has_last_snapshot_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_snapshot_bytes(), target);
  }

  // optional uint64 log_start_index = 3;
  if (has_log_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->log_start_index(), target);
  }

  // optional uint64 last_log_index = 4;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_index(), target);
  }

  // optional uint64 log_bytes = 5;
  if (has_log_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->log_bytes(), target);
  }

  // optional bool is_leader = 6;
  if (has_is_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Server.SnapshotStats.SnapshotStats)
  return target;
}

int SnapshotStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_snapshot_index = 1;
    if (has_last_snapshot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_index());
    }

    // optional uint64 last_snapshot_bytes = 2;
    if (has_last_snapshot_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_bytes());
    }

    // optional uint64 log_start_index = 3;
    if (has_log_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_start_index());
    }

    // optional uint64 last_log_index = 4;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // optional uint64 log_bytes = 5;
    if (has_log_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_bytes());
    }

    // optional bool is_leader = 6;
    if (has_is_leader()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotStats::MergeFrom(const SnapshotStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_snapshot_index()) {
      set_last_snapshot_index(from.last_snapshot_index());
    }
    if (from.has_last_snapshot_bytes()) {
      set_last_snapshot_bytes(from.last_snapshot_bytes());
    }
    if (from.has_log_start_index()) {
      set_log_start_index(from.log_start_index());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_log_bytes()) {
      set_log_bytes(from.log_bytes());
    }
    if (from.has_is_leader()) {
      set_is_leader(from.is_leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotStats::CopyFrom(const SnapshotStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotStats::IsInitialized() const {

  return true;
}

void SnapshotStats::Swap(SnapshotStats* other) {
  if (other != this) {
    std::swap(last_snapshot_index_, other->last_snapshot_index_);
    std::swap(last_snapshot_bytes_, other->last_snapshot_bytes_);
    std::swap(log_start_index_, other->log_start_index_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(log_bytes_, other->log_bytes_);
    std::swap(is_leader_, other->is_leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotStats_descriptor_;
  metadata.reflection = SnapshotStats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SnapshotStats
}  // namespace Server
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
