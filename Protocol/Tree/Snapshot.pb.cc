// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Tree/Snapshot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Tree/Snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Tree {
namespace Snapshot {

namespace {

const ::google::protobuf::Descriptor* Directory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Directory_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fTree_2fSnapshot_2eproto() {
  protobuf_AddDesc_Protocol_2fTree_2fSnapshot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Tree/Snapshot.proto");
  GOOGLE_CHECK(file != NULL);
  Directory_descriptor_ = file->message_type(0);
  static const int Directory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, directories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, files_),
  };
  Directory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Directory_descriptor_,
      Directory::default_instance_,
      Directory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Directory));
  File_descriptor_ = file->message_type(1);
  static const int File_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, contents_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fTree_2fSnapshot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Directory_descriptor_, &Directory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fTree_2fSnapshot_2eproto() {
  delete Directory::default_instance_;
  delete Directory_reflection_;
  delete File::default_instance_;
  delete File_reflection_;
}

void protobuf_AddDesc_Protocol_2fTree_2fSnapshot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034Protocol/Tree/Snapshot.proto\022\026LogCabin"
    ".Tree.Snapshot\"/\n\tDirectory\022\023\n\013directori"
    "es\030\001 \003(\t\022\r\n\005files\030\002 \003(\t\"\030\n\004File\022\020\n\010conte"
    "nts\030\001 \002(\014", 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Tree/Snapshot.proto", &protobuf_RegisterTypes);
  Directory::default_instance_ = new Directory();
  File::default_instance_ = new File();
  Directory::default_instance_->InitAsDefaultInstance();
  File::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fTree_2fSnapshot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fTree_2fSnapshot_2eproto {
  StaticDescriptorInitializer_Protocol_2fTree_2fSnapshot_2eproto() {
    protobuf_AddDesc_Protocol_2fTree_2fSnapshot_2eproto();
  }
} static_descriptor_initializer_Protocol_2fTree_2fSnapshot_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Directory::kDirectoriesFieldNumber;
const int Directory::kFilesFieldNumber;
#endif  // !_MSC_VER

Directory::Directory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Tree.Snapshot.Directory)
}

void Directory::InitAsDefaultInstance() {
}

Directory::Directory(const Directory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Tree.Snapshot.Directory)
}

void Directory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Directory::~Directory() {
  // @@protoc_insertion_point(destructor:LogCabin.Tree.Snapshot.Directory)
  SharedDtor();
}

void Directory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Directory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Directory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Directory_descriptor_;
}

const Directory& Directory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fTree_2fSnapshot_2eproto();
  return *default_instance_;
}

Directory* Directory::default_instance_ = NULL;

Directory* Directory::New() const {
  return new Directory;
}

void Directory::Clear() {
  directories_.Clear();
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Directory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Tree.Snapshot.Directory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string directories = 1;
      case 1: {
        if (tag == 10) {
         parse_directories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_directories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->directories(this->directories_size() - 1).data(),
            this->directories(this->directories_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "directories");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_directories;
        if (input->ExpectTag(18)) goto parse_files;
        break;
      }

      // repeated string files = 2;
      case 2: {
        if (tag == 18) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->files(this->files_size() - 1).data(),
            this->files(this->files_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "files");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_files;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Tree.Snapshot.Directory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Tree.Snapshot.Directory)
  return false;
#undef DO_
}

void Directory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Tree.Snapshot.Directory)
  // repeated string directories = 1;
  for (int i = 0; i < this->directories_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->directories(i).data(), this->directories(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "directories");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->directories(i), output);
  }

  // repeated string files = 2;
  for (int i = 0; i < this->files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->files(i).data(), this->files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Tree.Snapshot.Directory)
}

::google::protobuf::uint8* Directory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Tree.Snapshot.Directory)
  // repeated string directories = 1;
  for (int i = 0; i < this->directories_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->directories(i).data(), this->directories(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "directories");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->directories(i), target);
  }

  // repeated string files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Tree.Snapshot.Directory)
  return target;
}

int Directory::ByteSize() const {
  int total_size = 0;

  // repeated string directories = 1;
  total_size += 1 * this->directories_size();
  for (int i = 0; i < this->directories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->directories(i));
  }

  // repeated string files = 2;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Directory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Directory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Directory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Directory::MergeFrom(const Directory& from) {
  GOOGLE_CHECK_NE(&from, this);
  directories_.MergeFrom(from.directories_);
  files_.MergeFrom(from.files_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Directory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Directory::CopyFrom(const Directory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directory::IsInitialized() const {

  return true;
}

void Directory::Swap(Directory* other) {
  if (other != this) {
    directories_.Swap(&other->directories_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Directory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Directory_descriptor_;
  metadata.reflection = Directory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int File::kContentsFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Tree.Snapshot.File)
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Tree.Snapshot.File)
}

void File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:LogCabin.Tree.Snapshot.File)
  SharedDtor();
}

void File::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fTree_2fSnapshot_2eproto();
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (has_contents()) {
    if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      contents_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Tree.Snapshot.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes contents = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Tree.Snapshot.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Tree.Snapshot.File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Tree.Snapshot.File)
  // required bytes contents = 1;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Tree.Snapshot.File)
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Tree.Snapshot.File)
  // required bytes contents = 1;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Tree.Snapshot.File)
  return target;
}

int File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes contents = 1;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Snapshot
}  // namespace Tree
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
