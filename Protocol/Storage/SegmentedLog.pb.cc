// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Storage/SegmentedLog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Storage/SegmentedLog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Storage {
namespace SegmentedLogMetadata {

namespace {

const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fStorage_2fSegmentedLog_2eproto() {
  protobuf_AddDesc_Protocol_2fStorage_2fSegmentedLog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Storage/SegmentedLog.proto");
  GOOGLE_CHECK(file != NULL);
  Metadata_descriptor_ = file->message_type(0);
  static const int Metadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, format_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, raft_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, entries_start_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fStorage_2fSegmentedLog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fStorage_2fSegmentedLog_2eproto() {
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
}

void protobuf_AddDesc_Protocol_2fStorage_2fSegmentedLog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogCabin::Protocol::RaftLogMetadata::protobuf_AddDesc_Protocol_2fRaft_2fRaftLogMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#Protocol/Storage/SegmentedLog.proto\022%L"
    "ogCabin.Storage.SegmentedLogMetadata\032#Pr"
    "otocol/Raft/RaftLogMetadata.proto\"\216\001\n\010Me"
    "tadata\022\026\n\016format_version\030\004 \002(\004\022\017\n\007versio"
    "n\030\001 \002(\004\022B\n\rraft_metadata\030\002 \001(\0132+.LogCabi"
    "n.Protocol.RaftLogMetadata.Metadata\022\025\n\re"
    "ntries_start\030\003 \002(\004", 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Storage/SegmentedLog.proto", &protobuf_RegisterTypes);
  Metadata::default_instance_ = new Metadata();
  Metadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fStorage_2fSegmentedLog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fStorage_2fSegmentedLog_2eproto {
  StaticDescriptorInitializer_Protocol_2fStorage_2fSegmentedLog_2eproto() {
    protobuf_AddDesc_Protocol_2fStorage_2fSegmentedLog_2eproto();
  }
} static_descriptor_initializer_Protocol_2fStorage_2fSegmentedLog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Metadata::kFormatVersionFieldNumber;
const int Metadata::kVersionFieldNumber;
const int Metadata::kRaftMetadataFieldNumber;
const int Metadata::kEntriesStartFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Storage.SegmentedLogMetadata.Metadata)
}

void Metadata::InitAsDefaultInstance() {
  raft_metadata_ = const_cast< ::LogCabin::Protocol::RaftLogMetadata::Metadata*>(&::LogCabin::Protocol::RaftLogMetadata::Metadata::default_instance());
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Storage.SegmentedLogMetadata.Metadata)
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  format_version_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  raft_metadata_ = NULL;
  entries_start_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (this != default_instance_) {
    delete raft_metadata_;
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fStorage_2fSegmentedLog_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Metadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(format_version_, version_);
    if (has_raft_metadata()) {
      if (raft_metadata_ != NULL) raft_metadata_->::LogCabin::Protocol::RaftLogMetadata::Metadata::Clear();
    }
    entries_start_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_raft_metadata;
        break;
      }

      // optional .LogCabin.Protocol.RaftLogMetadata.Metadata raft_metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_raft_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entries_start;
        break;
      }

      // required uint64 entries_start = 3;
      case 3: {
        if (tag == 24) {
         parse_entries_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entries_start_)));
          set_has_entries_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_format_version;
        break;
      }

      // required uint64 format_version = 4;
      case 4: {
        if (tag == 32) {
         parse_format_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &format_version_)));
          set_has_format_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  // required uint64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional .LogCabin.Protocol.RaftLogMetadata.Metadata raft_metadata = 2;
  if (has_raft_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->raft_metadata(), output);
  }

  // required uint64 entries_start = 3;
  if (has_entries_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entries_start(), output);
  }

  // required uint64 format_version = 4;
  if (has_format_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->format_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Storage.SegmentedLogMetadata.Metadata)
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  // required uint64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional .LogCabin.Protocol.RaftLogMetadata.Metadata raft_metadata = 2;
  if (has_raft_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->raft_metadata(), target);
  }

  // required uint64 entries_start = 3;
  if (has_entries_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entries_start(), target);
  }

  // required uint64 format_version = 4;
  if (has_format_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->format_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Storage.SegmentedLogMetadata.Metadata)
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 format_version = 4;
    if (has_format_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->format_version());
    }

    // required uint64 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional .LogCabin.Protocol.RaftLogMetadata.Metadata raft_metadata = 2;
    if (has_raft_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raft_metadata());
    }

    // required uint64 entries_start = 3;
    if (has_entries_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entries_start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format_version()) {
      set_format_version(from.format_version());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_raft_metadata()) {
      mutable_raft_metadata()->::LogCabin::Protocol::RaftLogMetadata::Metadata::MergeFrom(from.raft_metadata());
    }
    if (from.has_entries_start()) {
      set_entries_start(from.entries_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_raft_metadata()) {
    if (!this->raft_metadata().IsInitialized()) return false;
  }
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(format_version_, other->format_version_);
    std::swap(version_, other->version_);
    std::swap(raft_metadata_, other->raft_metadata_);
    std::swap(entries_start_, other->entries_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SegmentedLogMetadata
}  // namespace Storage
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
