// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Client/Client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol/Client/Client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {
namespace Client {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExactlyOnceRPCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExactlyOnceRPCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyRecipient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyRecipient_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyRecipient_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyRecipient_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyRecipient_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyRecipient_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSession_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSession_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSession_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSession_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseSession_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSession_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseSession_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSession_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfiguration_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfiguration_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfiguration_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfiguration_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_OK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_OK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_ConfigurationChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationBad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfiguration_Response_ConfigurationBad_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_ListDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Request_ListDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_Read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Request_Read_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_ListDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Response_ListDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_Read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadOnlyTree_Response_Read_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_MakeDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_MakeDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_RemoveDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_Write_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_Write_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Request_RemoveFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteTree_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteTree_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceStateMachineVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceStateMachineVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceStateMachineVersion_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceStateMachineVersion_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceStateMachineVersion_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceStateMachineVersion_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachineCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachineCommand_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineCommand_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachineCommand_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineCommand_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachineQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachineQuery_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineQuery_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachineQuery_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineQuery_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto() {
  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol/Client/Client.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, leader_hint_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_Code_descriptor_ = Error_descriptor_->enum_type(0);
  ExactlyOnceRPCInfo_descriptor_ = file->message_type(1);
  static const int ExactlyOnceRPCInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, first_outstanding_rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, rpc_number_),
  };
  ExactlyOnceRPCInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExactlyOnceRPCInfo_descriptor_,
      ExactlyOnceRPCInfo::default_instance_,
      ExactlyOnceRPCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRPCInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExactlyOnceRPCInfo));
  VerifyRecipient_descriptor_ = file->message_type(2);
  static const int VerifyRecipient_offsets_[1] = {
  };
  VerifyRecipient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyRecipient_descriptor_,
      VerifyRecipient::default_instance_,
      VerifyRecipient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyRecipient));
  VerifyRecipient_Request_descriptor_ = VerifyRecipient_descriptor_->nested_type(0);
  static const int VerifyRecipient_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Request, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Request, server_id_),
  };
  VerifyRecipient_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyRecipient_Request_descriptor_,
      VerifyRecipient_Request::default_instance_,
      VerifyRecipient_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyRecipient_Request));
  VerifyRecipient_Response_descriptor_ = VerifyRecipient_descriptor_->nested_type(1);
  static const int VerifyRecipient_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Response, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Response, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Response, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Response, error_),
  };
  VerifyRecipient_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyRecipient_Response_descriptor_,
      VerifyRecipient_Response::default_instance_,
      VerifyRecipient_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyRecipient_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyRecipient_Response));
  OpenSession_descriptor_ = file->message_type(3);
  static const int OpenSession_offsets_[1] = {
  };
  OpenSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSession_descriptor_,
      OpenSession::default_instance_,
      OpenSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSession));
  OpenSession_Request_descriptor_ = OpenSession_descriptor_->nested_type(0);
  static const int OpenSession_Request_offsets_[1] = {
  };
  OpenSession_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSession_Request_descriptor_,
      OpenSession_Request::default_instance_,
      OpenSession_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSession_Request));
  OpenSession_Response_descriptor_ = OpenSession_descriptor_->nested_type(1);
  static const int OpenSession_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Response, client_id_),
  };
  OpenSession_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSession_Response_descriptor_,
      OpenSession_Response::default_instance_,
      OpenSession_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSession_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSession_Response));
  CloseSession_descriptor_ = file->message_type(4);
  static const int CloseSession_offsets_[1] = {
  };
  CloseSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseSession_descriptor_,
      CloseSession::default_instance_,
      CloseSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseSession));
  CloseSession_Request_descriptor_ = CloseSession_descriptor_->nested_type(0);
  static const int CloseSession_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession_Request, client_id_),
  };
  CloseSession_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseSession_Request_descriptor_,
      CloseSession_Request::default_instance_,
      CloseSession_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseSession_Request));
  CloseSession_Response_descriptor_ = CloseSession_descriptor_->nested_type(1);
  static const int CloseSession_Response_offsets_[1] = {
  };
  CloseSession_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseSession_Response_descriptor_,
      CloseSession_Response::default_instance_,
      CloseSession_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSession_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseSession_Response));
  Server_descriptor_ = file->message_type(5);
  static const int Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, addresses_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
  GetConfiguration_descriptor_ = file->message_type(6);
  static const int GetConfiguration_offsets_[1] = {
  };
  GetConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfiguration_descriptor_,
      GetConfiguration::default_instance_,
      GetConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfiguration));
  GetConfiguration_Request_descriptor_ = GetConfiguration_descriptor_->nested_type(0);
  static const int GetConfiguration_Request_offsets_[1] = {
  };
  GetConfiguration_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfiguration_Request_descriptor_,
      GetConfiguration_Request::default_instance_,
      GetConfiguration_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfiguration_Request));
  GetConfiguration_Response_descriptor_ = GetConfiguration_descriptor_->nested_type(1);
  static const int GetConfiguration_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, servers_),
  };
  GetConfiguration_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfiguration_Response_descriptor_,
      GetConfiguration_Response::default_instance_,
      GetConfiguration_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfiguration_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfiguration_Response));
  SetConfiguration_descriptor_ = file->message_type(7);
  static const int SetConfiguration_offsets_[1] = {
  };
  SetConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_descriptor_,
      SetConfiguration::default_instance_,
      SetConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration));
  SetConfiguration_Request_descriptor_ = SetConfiguration_descriptor_->nested_type(0);
  static const int SetConfiguration_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, old_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, new_servers_),
  };
  SetConfiguration_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Request_descriptor_,
      SetConfiguration_Request::default_instance_,
      SetConfiguration_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Request));
  SetConfiguration_Response_descriptor_ = SetConfiguration_descriptor_->nested_type(1);
  static const int SetConfiguration_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, configuration_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, configuration_bad_),
  };
  SetConfiguration_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_descriptor_,
      SetConfiguration_Response::default_instance_,
      SetConfiguration_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response));
  SetConfiguration_Response_OK_descriptor_ = SetConfiguration_Response_descriptor_->nested_type(0);
  static const int SetConfiguration_Response_OK_offsets_[1] = {
  };
  SetConfiguration_Response_OK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_OK_descriptor_,
      SetConfiguration_Response_OK::default_instance_,
      SetConfiguration_Response_OK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_OK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_OK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response_OK));
  SetConfiguration_Response_ConfigurationChanged_descriptor_ = SetConfiguration_Response_descriptor_->nested_type(1);
  static const int SetConfiguration_Response_ConfigurationChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationChanged, error_),
  };
  SetConfiguration_Response_ConfigurationChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_ConfigurationChanged_descriptor_,
      SetConfiguration_Response_ConfigurationChanged::default_instance_,
      SetConfiguration_Response_ConfigurationChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response_ConfigurationChanged));
  SetConfiguration_Response_ConfigurationBad_descriptor_ = SetConfiguration_Response_descriptor_->nested_type(2);
  static const int SetConfiguration_Response_ConfigurationBad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationBad, bad_servers_),
  };
  SetConfiguration_Response_ConfigurationBad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfiguration_Response_ConfigurationBad_descriptor_,
      SetConfiguration_Response_ConfigurationBad::default_instance_,
      SetConfiguration_Response_ConfigurationBad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationBad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfiguration_Response_ConfigurationBad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfiguration_Response_ConfigurationBad));
  TreeCondition_descriptor_ = file->message_type(8);
  static const int TreeCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, contents_),
  };
  TreeCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeCondition_descriptor_,
      TreeCondition::default_instance_,
      TreeCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeCondition));
  ReadOnlyTree_descriptor_ = file->message_type(9);
  static const int ReadOnlyTree_offsets_[1] = {
  };
  ReadOnlyTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_descriptor_,
      ReadOnlyTree::default_instance_,
      ReadOnlyTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree));
  ReadOnlyTree_Request_descriptor_ = ReadOnlyTree_descriptor_->nested_type(0);
  static const int ReadOnlyTree_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, list_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, read_),
  };
  ReadOnlyTree_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Request_descriptor_,
      ReadOnlyTree_Request::default_instance_,
      ReadOnlyTree_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Request));
  ReadOnlyTree_Request_ListDirectory_descriptor_ = ReadOnlyTree_Request_descriptor_->nested_type(0);
  static const int ReadOnlyTree_Request_ListDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_ListDirectory, path_),
  };
  ReadOnlyTree_Request_ListDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Request_ListDirectory_descriptor_,
      ReadOnlyTree_Request_ListDirectory::default_instance_,
      ReadOnlyTree_Request_ListDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_ListDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_ListDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Request_ListDirectory));
  ReadOnlyTree_Request_Read_descriptor_ = ReadOnlyTree_Request_descriptor_->nested_type(1);
  static const int ReadOnlyTree_Request_Read_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_Read, path_),
  };
  ReadOnlyTree_Request_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Request_Read_descriptor_,
      ReadOnlyTree_Request_Read::default_instance_,
      ReadOnlyTree_Request_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Request_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Request_Read));
  ReadOnlyTree_Response_descriptor_ = ReadOnlyTree_descriptor_->nested_type(1);
  static const int ReadOnlyTree_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, list_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, read_),
  };
  ReadOnlyTree_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Response_descriptor_,
      ReadOnlyTree_Response::default_instance_,
      ReadOnlyTree_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Response));
  ReadOnlyTree_Response_ListDirectory_descriptor_ = ReadOnlyTree_Response_descriptor_->nested_type(0);
  static const int ReadOnlyTree_Response_ListDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_ListDirectory, child_),
  };
  ReadOnlyTree_Response_ListDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Response_ListDirectory_descriptor_,
      ReadOnlyTree_Response_ListDirectory::default_instance_,
      ReadOnlyTree_Response_ListDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_ListDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_ListDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Response_ListDirectory));
  ReadOnlyTree_Response_Read_descriptor_ = ReadOnlyTree_Response_descriptor_->nested_type(1);
  static const int ReadOnlyTree_Response_Read_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_Read, contents_),
  };
  ReadOnlyTree_Response_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadOnlyTree_Response_Read_descriptor_,
      ReadOnlyTree_Response_Read::default_instance_,
      ReadOnlyTree_Response_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOnlyTree_Response_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadOnlyTree_Response_Read));
  ReadWriteTree_descriptor_ = file->message_type(10);
  static const int ReadWriteTree_offsets_[1] = {
  };
  ReadWriteTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_descriptor_,
      ReadWriteTree::default_instance_,
      ReadWriteTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree));
  ReadWriteTree_Request_descriptor_ = ReadWriteTree_descriptor_->nested_type(0);
  static const int ReadWriteTree_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, exactly_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, make_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, remove_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, remove_file_),
  };
  ReadWriteTree_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_descriptor_,
      ReadWriteTree_Request::default_instance_,
      ReadWriteTree_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request));
  ReadWriteTree_Request_MakeDirectory_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(0);
  static const int ReadWriteTree_Request_MakeDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_MakeDirectory, path_),
  };
  ReadWriteTree_Request_MakeDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_MakeDirectory_descriptor_,
      ReadWriteTree_Request_MakeDirectory::default_instance_,
      ReadWriteTree_Request_MakeDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_MakeDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_MakeDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_MakeDirectory));
  ReadWriteTree_Request_RemoveDirectory_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(1);
  static const int ReadWriteTree_Request_RemoveDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveDirectory, path_),
  };
  ReadWriteTree_Request_RemoveDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_RemoveDirectory_descriptor_,
      ReadWriteTree_Request_RemoveDirectory::default_instance_,
      ReadWriteTree_Request_RemoveDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_RemoveDirectory));
  ReadWriteTree_Request_Write_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(2);
  static const int ReadWriteTree_Request_Write_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, contents_),
  };
  ReadWriteTree_Request_Write_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_Write_descriptor_,
      ReadWriteTree_Request_Write::default_instance_,
      ReadWriteTree_Request_Write_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_Write, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_Write));
  ReadWriteTree_Request_RemoveFile_descriptor_ = ReadWriteTree_Request_descriptor_->nested_type(3);
  static const int ReadWriteTree_Request_RemoveFile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveFile, path_),
  };
  ReadWriteTree_Request_RemoveFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Request_RemoveFile_descriptor_,
      ReadWriteTree_Request_RemoveFile::default_instance_,
      ReadWriteTree_Request_RemoveFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Request_RemoveFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Request_RemoveFile));
  ReadWriteTree_Response_descriptor_ = ReadWriteTree_descriptor_->nested_type(1);
  static const int ReadWriteTree_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, error_),
  };
  ReadWriteTree_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteTree_Response_descriptor_,
      ReadWriteTree_Response::default_instance_,
      ReadWriteTree_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteTree_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteTree_Response));
  GetServerInfo_descriptor_ = file->message_type(11);
  static const int GetServerInfo_offsets_[1] = {
  };
  GetServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerInfo_descriptor_,
      GetServerInfo::default_instance_,
      GetServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerInfo));
  GetServerInfo_Request_descriptor_ = GetServerInfo_descriptor_->nested_type(0);
  static const int GetServerInfo_Request_offsets_[1] = {
  };
  GetServerInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerInfo_Request_descriptor_,
      GetServerInfo_Request::default_instance_,
      GetServerInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerInfo_Request));
  GetServerInfo_Response_descriptor_ = GetServerInfo_descriptor_->nested_type(1);
  static const int GetServerInfo_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo_Response, server_info_),
  };
  GetServerInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerInfo_Response_descriptor_,
      GetServerInfo_Response::default_instance_,
      GetServerInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerInfo_Response));
  AdvanceStateMachineVersion_descriptor_ = file->message_type(12);
  static const int AdvanceStateMachineVersion_offsets_[1] = {
  };
  AdvanceStateMachineVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceStateMachineVersion_descriptor_,
      AdvanceStateMachineVersion::default_instance_,
      AdvanceStateMachineVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceStateMachineVersion));
  AdvanceStateMachineVersion_Request_descriptor_ = AdvanceStateMachineVersion_descriptor_->nested_type(0);
  static const int AdvanceStateMachineVersion_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion_Request, requested_version_),
  };
  AdvanceStateMachineVersion_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceStateMachineVersion_Request_descriptor_,
      AdvanceStateMachineVersion_Request::default_instance_,
      AdvanceStateMachineVersion_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceStateMachineVersion_Request));
  AdvanceStateMachineVersion_Response_descriptor_ = AdvanceStateMachineVersion_descriptor_->nested_type(1);
  static const int AdvanceStateMachineVersion_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion_Response, running_version_),
  };
  AdvanceStateMachineVersion_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceStateMachineVersion_Response_descriptor_,
      AdvanceStateMachineVersion_Response::default_instance_,
      AdvanceStateMachineVersion_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStateMachineVersion_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceStateMachineVersion_Response));
  StateMachineCommand_descriptor_ = file->message_type(13);
  static const int StateMachineCommand_offsets_[1] = {
  };
  StateMachineCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineCommand_descriptor_,
      StateMachineCommand::default_instance_,
      StateMachineCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineCommand));
  StateMachineCommand_Request_descriptor_ = StateMachineCommand_descriptor_->nested_type(0);
  static const int StateMachineCommand_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Request, open_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Request, close_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Request, tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Request, advance_version_),
  };
  StateMachineCommand_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineCommand_Request_descriptor_,
      StateMachineCommand_Request::default_instance_,
      StateMachineCommand_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineCommand_Request));
  StateMachineCommand_Response_descriptor_ = StateMachineCommand_descriptor_->nested_type(1);
  static const int StateMachineCommand_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Response, open_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Response, close_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Response, tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Response, advance_version_),
  };
  StateMachineCommand_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineCommand_Response_descriptor_,
      StateMachineCommand_Response::default_instance_,
      StateMachineCommand_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineCommand_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineCommand_Response));
  StateMachineQuery_descriptor_ = file->message_type(14);
  static const int StateMachineQuery_offsets_[1] = {
  };
  StateMachineQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineQuery_descriptor_,
      StateMachineQuery::default_instance_,
      StateMachineQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineQuery));
  StateMachineQuery_Request_descriptor_ = StateMachineQuery_descriptor_->nested_type(0);
  static const int StateMachineQuery_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery_Request, tree_),
  };
  StateMachineQuery_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineQuery_Request_descriptor_,
      StateMachineQuery_Request::default_instance_,
      StateMachineQuery_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineQuery_Request));
  StateMachineQuery_Response_descriptor_ = StateMachineQuery_descriptor_->nested_type(1);
  static const int StateMachineQuery_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery_Response, tree_),
  };
  StateMachineQuery_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineQuery_Response_descriptor_,
      StateMachineQuery_Response::default_instance_,
      StateMachineQuery_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineQuery_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineQuery_Response));
  OpCode_descriptor_ = file->enum_type(0);
  Status_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExactlyOnceRPCInfo_descriptor_, &ExactlyOnceRPCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyRecipient_descriptor_, &VerifyRecipient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyRecipient_Request_descriptor_, &VerifyRecipient_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyRecipient_Response_descriptor_, &VerifyRecipient_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSession_descriptor_, &OpenSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSession_Request_descriptor_, &OpenSession_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSession_Response_descriptor_, &OpenSession_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseSession_descriptor_, &CloseSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseSession_Request_descriptor_, &CloseSession_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseSession_Response_descriptor_, &CloseSession_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfiguration_descriptor_, &GetConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfiguration_Request_descriptor_, &GetConfiguration_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfiguration_Response_descriptor_, &GetConfiguration_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_descriptor_, &SetConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Request_descriptor_, &SetConfiguration_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_descriptor_, &SetConfiguration_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_OK_descriptor_, &SetConfiguration_Response_OK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_ConfigurationChanged_descriptor_, &SetConfiguration_Response_ConfigurationChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfiguration_Response_ConfigurationBad_descriptor_, &SetConfiguration_Response_ConfigurationBad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeCondition_descriptor_, &TreeCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_descriptor_, &ReadOnlyTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Request_descriptor_, &ReadOnlyTree_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Request_ListDirectory_descriptor_, &ReadOnlyTree_Request_ListDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Request_Read_descriptor_, &ReadOnlyTree_Request_Read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Response_descriptor_, &ReadOnlyTree_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Response_ListDirectory_descriptor_, &ReadOnlyTree_Response_ListDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadOnlyTree_Response_Read_descriptor_, &ReadOnlyTree_Response_Read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_descriptor_, &ReadWriteTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_descriptor_, &ReadWriteTree_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_MakeDirectory_descriptor_, &ReadWriteTree_Request_MakeDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_RemoveDirectory_descriptor_, &ReadWriteTree_Request_RemoveDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_Write_descriptor_, &ReadWriteTree_Request_Write::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Request_RemoveFile_descriptor_, &ReadWriteTree_Request_RemoveFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteTree_Response_descriptor_, &ReadWriteTree_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerInfo_descriptor_, &GetServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerInfo_Request_descriptor_, &GetServerInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerInfo_Response_descriptor_, &GetServerInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceStateMachineVersion_descriptor_, &AdvanceStateMachineVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceStateMachineVersion_Request_descriptor_, &AdvanceStateMachineVersion_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceStateMachineVersion_Response_descriptor_, &AdvanceStateMachineVersion_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineCommand_descriptor_, &StateMachineCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineCommand_Request_descriptor_, &StateMachineCommand_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineCommand_Response_descriptor_, &StateMachineCommand_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineQuery_descriptor_, &StateMachineQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineQuery_Request_descriptor_, &StateMachineQuery_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineQuery_Response_descriptor_, &StateMachineQuery_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete ExactlyOnceRPCInfo::default_instance_;
  delete ExactlyOnceRPCInfo_reflection_;
  delete VerifyRecipient::default_instance_;
  delete VerifyRecipient_reflection_;
  delete VerifyRecipient_Request::default_instance_;
  delete VerifyRecipient_Request_reflection_;
  delete VerifyRecipient_Response::default_instance_;
  delete VerifyRecipient_Response_reflection_;
  delete OpenSession::default_instance_;
  delete OpenSession_reflection_;
  delete OpenSession_Request::default_instance_;
  delete OpenSession_Request_reflection_;
  delete OpenSession_Response::default_instance_;
  delete OpenSession_Response_reflection_;
  delete CloseSession::default_instance_;
  delete CloseSession_reflection_;
  delete CloseSession_Request::default_instance_;
  delete CloseSession_Request_reflection_;
  delete CloseSession_Response::default_instance_;
  delete CloseSession_Response_reflection_;
  delete Server::default_instance_;
  delete Server_reflection_;
  delete GetConfiguration::default_instance_;
  delete GetConfiguration_reflection_;
  delete GetConfiguration_Request::default_instance_;
  delete GetConfiguration_Request_reflection_;
  delete GetConfiguration_Response::default_instance_;
  delete GetConfiguration_Response_reflection_;
  delete SetConfiguration::default_instance_;
  delete SetConfiguration_reflection_;
  delete SetConfiguration_Request::default_instance_;
  delete SetConfiguration_Request_reflection_;
  delete SetConfiguration_Response::default_instance_;
  delete SetConfiguration_Response_reflection_;
  delete SetConfiguration_Response_OK::default_instance_;
  delete SetConfiguration_Response_OK_reflection_;
  delete SetConfiguration_Response_ConfigurationChanged::default_instance_;
  delete SetConfiguration_Response_ConfigurationChanged_reflection_;
  delete SetConfiguration_Response_ConfigurationBad::default_instance_;
  delete SetConfiguration_Response_ConfigurationBad_reflection_;
  delete TreeCondition::default_instance_;
  delete TreeCondition_reflection_;
  delete ReadOnlyTree::default_instance_;
  delete ReadOnlyTree_reflection_;
  delete ReadOnlyTree_Request::default_instance_;
  delete ReadOnlyTree_Request_reflection_;
  delete ReadOnlyTree_Request_ListDirectory::default_instance_;
  delete ReadOnlyTree_Request_ListDirectory_reflection_;
  delete ReadOnlyTree_Request_Read::default_instance_;
  delete ReadOnlyTree_Request_Read_reflection_;
  delete ReadOnlyTree_Response::default_instance_;
  delete ReadOnlyTree_Response_reflection_;
  delete ReadOnlyTree_Response_ListDirectory::default_instance_;
  delete ReadOnlyTree_Response_ListDirectory_reflection_;
  delete ReadOnlyTree_Response_Read::default_instance_;
  delete ReadOnlyTree_Response_Read_reflection_;
  delete ReadWriteTree::default_instance_;
  delete ReadWriteTree_reflection_;
  delete ReadWriteTree_Request::default_instance_;
  delete ReadWriteTree_Request_reflection_;
  delete ReadWriteTree_Request_MakeDirectory::default_instance_;
  delete ReadWriteTree_Request_MakeDirectory_reflection_;
  delete ReadWriteTree_Request_RemoveDirectory::default_instance_;
  delete ReadWriteTree_Request_RemoveDirectory_reflection_;
  delete ReadWriteTree_Request_Write::default_instance_;
  delete ReadWriteTree_Request_Write_reflection_;
  delete ReadWriteTree_Request_RemoveFile::default_instance_;
  delete ReadWriteTree_Request_RemoveFile_reflection_;
  delete ReadWriteTree_Response::default_instance_;
  delete ReadWriteTree_Response_reflection_;
  delete GetServerInfo::default_instance_;
  delete GetServerInfo_reflection_;
  delete GetServerInfo_Request::default_instance_;
  delete GetServerInfo_Request_reflection_;
  delete GetServerInfo_Response::default_instance_;
  delete GetServerInfo_Response_reflection_;
  delete AdvanceStateMachineVersion::default_instance_;
  delete AdvanceStateMachineVersion_reflection_;
  delete AdvanceStateMachineVersion_Request::default_instance_;
  delete AdvanceStateMachineVersion_Request_reflection_;
  delete AdvanceStateMachineVersion_Response::default_instance_;
  delete AdvanceStateMachineVersion_Response_reflection_;
  delete StateMachineCommand::default_instance_;
  delete StateMachineCommand_reflection_;
  delete StateMachineCommand_Request::default_instance_;
  delete StateMachineCommand_Request_reflection_;
  delete StateMachineCommand_Response::default_instance_;
  delete StateMachineCommand_Response_reflection_;
  delete StateMachineQuery::default_instance_;
  delete StateMachineQuery_reflection_;
  delete StateMachineQuery_Request::default_instance_;
  delete StateMachineQuery_Request_reflection_;
  delete StateMachineQuery_Response::default_instance_;
  delete StateMachineQuery_Response_reflection_;
}

void protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034Protocol/Client/Client.proto\022\030LogCabin"
    ".Protocol.Client\"{\n\005Error\0228\n\nerror_code\030"
    "\001 \001(\0162$.LogCabin.Protocol.Client.Error.C"
    "ode\022\023\n\013leader_hint\030\002 \001(\t\"#\n\004Code\022\013\n\007UNKN"
    "OWN\020\000\022\016\n\nNOT_LEADER\020\001\"Z\n\022ExactlyOnceRPCI"
    "nfo\022\021\n\tclient_id\030\001 \002(\004\022\035\n\025first_outstand"
    "ing_rpc\030\002 \002(\004\022\022\n\nrpc_number\030\003 \002(\004\"\225\001\n\017Ve"
    "rifyRecipient\0322\n\007Request\022\024\n\014cluster_uuid"
    "\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\004\032N\n\010Response\022\024\n"
    "\014cluster_uuid\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\004\022\n"
    "\n\002ok\030\003 \001(\010\022\r\n\005error\030\004 \001(\t\"7\n\013OpenSession"
    "\032\t\n\007Request\032\035\n\010Response\022\021\n\tclient_id\030\001 \002"
    "(\004\"8\n\014CloseSession\032\034\n\007Request\022\021\n\tclient_"
    "id\030\001 \002(\004\032\n\n\010Response\".\n\006Server\022\021\n\tserver"
    "_id\030\001 \002(\004\022\021\n\taddresses\030\002 \002(\t\"h\n\020GetConfi"
    "guration\032\t\n\007Request\032I\n\010Response\022\n\n\002id\030\001 "
    "\002(\004\0221\n\007servers\030\002 \003(\0132 .LogCabin.Protocol"
    ".Client.Server\"\367\003\n\020SetConfiguration\032P\n\007R"
    "equest\022\016\n\006old_id\030\001 \002(\004\0225\n\013new_servers\030\002 "
    "\003(\0132 .LogCabin.Protocol.Client.Server\032\220\003"
    "\n\010Response\022B\n\002ok\030\001 \001(\01326.LogCabin.Protoc"
    "ol.Client.SetConfiguration.Response.OK\022g"
    "\n\025configuration_changed\030\002 \001(\0132H.LogCabin"
    ".Protocol.Client.SetConfiguration.Respon"
    "se.ConfigurationChanged\022_\n\021configuration"
    "_bad\030\003 \001(\0132D.LogCabin.Protocol.Client.Se"
    "tConfiguration.Response.ConfigurationBad"
    "\032\004\n\002OK\032%\n\024ConfigurationChanged\022\r\n\005error\030"
    "\001 \001(\t\032I\n\020ConfigurationBad\0225\n\013bad_servers"
    "\030\001 \003(\0132 .LogCabin.Protocol.Client.Server"
    "\"/\n\rTreeCondition\022\014\n\004path\030\001 \002(\t\022\020\n\010conte"
    "nts\030\002 \002(\014\"\307\004\n\014ReadOnlyTree\032\223\002\n\007Request\022:"
    "\n\tcondition\030\013 \001(\0132\'.LogCabin.Protocol.Cl"
    "ient.TreeCondition\022T\n\016list_directory\030\002 \001"
    "(\0132<.LogCabin.Protocol.Client.ReadOnlyTr"
    "ee.Request.ListDirectory\022A\n\004read\030\005 \001(\01323"
    ".LogCabin.Protocol.Client.ReadOnlyTree.R"
    "equest.Read\032\035\n\rListDirectory\022\014\n\004path\030\001 \002"
    "(\t\032\024\n\004Read\022\014\n\004path\030\001 \002(\t\032\240\002\n\010Response\0220\n"
    "\006status\030\001 \001(\0162 .LogCabin.Protocol.Client"
    ".Status\022\r\n\005error\030\002 \001(\t\022U\n\016list_directory"
    "\030\003 \001(\0132=.LogCabin.Protocol.Client.ReadOn"
    "lyTree.Response.ListDirectory\022B\n\004read\030\004 "
    "\001(\01324.LogCabin.Protocol.Client.ReadOnlyT"
    "ree.Response.Read\032\036\n\rListDirectory\022\r\n\005ch"
    "ild\030\001 \003(\t\032\030\n\004Read\022\020\n\010contents\030\001 \002(\014\"\266\005\n\r"
    "ReadWriteTree\032\327\004\n\007Request\022B\n\014exactly_onc"
    "e\030\n \002(\0132,.LogCabin.Protocol.Client.Exact"
    "lyOnceRPCInfo\022:\n\tcondition\030\013 \001(\0132\'.LogCa"
    "bin.Protocol.Client.TreeCondition\022U\n\016mak"
    "e_directory\030\001 \001(\0132=.LogCabin.Protocol.Cl"
    "ient.ReadWriteTree.Request.MakeDirectory"
    "\022Y\n\020remove_directory\030\003 \001(\0132\?.LogCabin.Pr"
    "otocol.Client.ReadWriteTree.Request.Remo"
    "veDirectory\022D\n\005write\030\004 \001(\01325.LogCabin.Pr"
    "otocol.Client.ReadWriteTree.Request.Writ"
    "e\022O\n\013remove_file\030\006 \001(\0132:.LogCabin.Protoc"
    "ol.Client.ReadWriteTree.Request.RemoveFi"
    "le\032\035\n\rMakeDirectory\022\014\n\004path\030\001 \002(\t\032\037\n\017Rem"
    "oveDirectory\022\014\n\004path\030\001 \002(\t\032\'\n\005Write\022\014\n\004p"
    "ath\030\001 \002(\t\022\020\n\010contents\030\002 \002(\014\032\032\n\nRemoveFil"
    "e\022\014\n\004path\030\001 \002(\t\032K\n\010Response\0220\n\006status\030\001 "
    "\001(\0162 .LogCabin.Protocol.Client.Status\022\r\n"
    "\005error\030\002 \001(\t\"]\n\rGetServerInfo\032\t\n\007Request"
    "\032A\n\010Response\0225\n\013server_info\030\001 \002(\0132 .LogC"
    "abin.Protocol.Client.Server\"g\n\032AdvanceSt"
    "ateMachineVersion\032$\n\007Request\022\031\n\021requeste"
    "d_version\030\001 \002(\r\032#\n\010Response\022\027\n\017running_v"
    "ersion\030\001 \002(\r\"\366\004\n\023StateMachineCommand\032\253\002\n"
    "\007Request\022C\n\014open_session\030\001 \001(\0132-.LogCabi"
    "n.Protocol.Client.OpenSession.Request\022E\n"
    "\rclose_session\030\004 \001(\0132..LogCabin.Protocol"
    ".Client.CloseSession.Request\022=\n\004tree\030\002 \001"
    "(\0132/.LogCabin.Protocol.Client.ReadWriteT"
    "ree.Request\022U\n\017advance_version\030\003 \001(\0132<.L"
    "ogCabin.Protocol.Client.AdvanceStateMach"
    "ineVersion.Request\032\260\002\n\010Response\022D\n\014open_"
    "session\030\001 \001(\0132..LogCabin.Protocol.Client"
    ".OpenSession.Response\022F\n\rclose_session\030\004"
    " \001(\0132/.LogCabin.Protocol.Client.CloseSes"
    "sion.Response\022>\n\004tree\030\002 \001(\01320.LogCabin.P"
    "rotocol.Client.ReadWriteTree.Response\022V\n"
    "\017advance_version\030\003 \001(\0132=.LogCabin.Protoc"
    "ol.Client.AdvanceStateMachineVersion.Res"
    "ponse\"\247\001\n\021StateMachineQuery\032G\n\007Request\022<"
    "\n\004tree\030\001 \001(\0132..LogCabin.Protocol.Client."
    "ReadOnlyTree.Request\032I\n\010Response\022=\n\004tree"
    "\030\001 \001(\0132/.LogCabin.Protocol.Client.ReadOn"
    "lyTree.Response*\253\001\n\006OpCode\022\027\n\023STATE_MACH"
    "INE_QUERY\020\001\022\031\n\025STATE_MACHINE_COMMAND\020\002\022\024"
    "\n\020VERIFY_RECIPIENT\020\003\022\025\n\021GET_CONFIGURATIO"
    "N\020\004\022\025\n\021SET_CONFIGURATION\020\005\022\024\n\020GET_SERVER"
    "_STATS\020\006\022\023\n\017GET_SERVER_INFO\020\007*\216\001\n\006Status"
    "\022\013\n\007UNKNOWN\020\n\022\006\n\002OK\020\000\022\024\n\020INVALID_ARGUMEN"
    "T\020\001\022\020\n\014LOOKUP_ERROR\020\002\022\016\n\nTYPE_ERROR\020\003\022\025\n"
    "\021CONDITION_NOT_MET\020\004\022\013\n\007TIMEOUT\020\005\022\023\n\017SES"
    "SION_EXPIRED\020\006", 3854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol/Client/Client.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  ExactlyOnceRPCInfo::default_instance_ = new ExactlyOnceRPCInfo();
  VerifyRecipient::default_instance_ = new VerifyRecipient();
  VerifyRecipient_Request::default_instance_ = new VerifyRecipient_Request();
  VerifyRecipient_Response::default_instance_ = new VerifyRecipient_Response();
  OpenSession::default_instance_ = new OpenSession();
  OpenSession_Request::default_instance_ = new OpenSession_Request();
  OpenSession_Response::default_instance_ = new OpenSession_Response();
  CloseSession::default_instance_ = new CloseSession();
  CloseSession_Request::default_instance_ = new CloseSession_Request();
  CloseSession_Response::default_instance_ = new CloseSession_Response();
  Server::default_instance_ = new Server();
  GetConfiguration::default_instance_ = new GetConfiguration();
  GetConfiguration_Request::default_instance_ = new GetConfiguration_Request();
  GetConfiguration_Response::default_instance_ = new GetConfiguration_Response();
  SetConfiguration::default_instance_ = new SetConfiguration();
  SetConfiguration_Request::default_instance_ = new SetConfiguration_Request();
  SetConfiguration_Response::default_instance_ = new SetConfiguration_Response();
  SetConfiguration_Response_OK::default_instance_ = new SetConfiguration_Response_OK();
  SetConfiguration_Response_ConfigurationChanged::default_instance_ = new SetConfiguration_Response_ConfigurationChanged();
  SetConfiguration_Response_ConfigurationBad::default_instance_ = new SetConfiguration_Response_ConfigurationBad();
  TreeCondition::default_instance_ = new TreeCondition();
  ReadOnlyTree::default_instance_ = new ReadOnlyTree();
  ReadOnlyTree_Request::default_instance_ = new ReadOnlyTree_Request();
  ReadOnlyTree_Request_ListDirectory::default_instance_ = new ReadOnlyTree_Request_ListDirectory();
  ReadOnlyTree_Request_Read::default_instance_ = new ReadOnlyTree_Request_Read();
  ReadOnlyTree_Response::default_instance_ = new ReadOnlyTree_Response();
  ReadOnlyTree_Response_ListDirectory::default_instance_ = new ReadOnlyTree_Response_ListDirectory();
  ReadOnlyTree_Response_Read::default_instance_ = new ReadOnlyTree_Response_Read();
  ReadWriteTree::default_instance_ = new ReadWriteTree();
  ReadWriteTree_Request::default_instance_ = new ReadWriteTree_Request();
  ReadWriteTree_Request_MakeDirectory::default_instance_ = new ReadWriteTree_Request_MakeDirectory();
  ReadWriteTree_Request_RemoveDirectory::default_instance_ = new ReadWriteTree_Request_RemoveDirectory();
  ReadWriteTree_Request_Write::default_instance_ = new ReadWriteTree_Request_Write();
  ReadWriteTree_Request_RemoveFile::default_instance_ = new ReadWriteTree_Request_RemoveFile();
  ReadWriteTree_Response::default_instance_ = new ReadWriteTree_Response();
  GetServerInfo::default_instance_ = new GetServerInfo();
  GetServerInfo_Request::default_instance_ = new GetServerInfo_Request();
  GetServerInfo_Response::default_instance_ = new GetServerInfo_Response();
  AdvanceStateMachineVersion::default_instance_ = new AdvanceStateMachineVersion();
  AdvanceStateMachineVersion_Request::default_instance_ = new AdvanceStateMachineVersion_Request();
  AdvanceStateMachineVersion_Response::default_instance_ = new AdvanceStateMachineVersion_Response();
  StateMachineCommand::default_instance_ = new StateMachineCommand();
  StateMachineCommand_Request::default_instance_ = new StateMachineCommand_Request();
  StateMachineCommand_Response::default_instance_ = new StateMachineCommand_Response();
  StateMachineQuery::default_instance_ = new StateMachineQuery();
  StateMachineQuery_Request::default_instance_ = new StateMachineQuery_Request();
  StateMachineQuery_Response::default_instance_ = new StateMachineQuery_Response();
  Error::default_instance_->InitAsDefaultInstance();
  ExactlyOnceRPCInfo::default_instance_->InitAsDefaultInstance();
  VerifyRecipient::default_instance_->InitAsDefaultInstance();
  VerifyRecipient_Request::default_instance_->InitAsDefaultInstance();
  VerifyRecipient_Response::default_instance_->InitAsDefaultInstance();
  OpenSession::default_instance_->InitAsDefaultInstance();
  OpenSession_Request::default_instance_->InitAsDefaultInstance();
  OpenSession_Response::default_instance_->InitAsDefaultInstance();
  CloseSession::default_instance_->InitAsDefaultInstance();
  CloseSession_Request::default_instance_->InitAsDefaultInstance();
  CloseSession_Response::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  GetConfiguration::default_instance_->InitAsDefaultInstance();
  GetConfiguration_Request::default_instance_->InitAsDefaultInstance();
  GetConfiguration_Response::default_instance_->InitAsDefaultInstance();
  SetConfiguration::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Request::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response_OK::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response_ConfigurationChanged::default_instance_->InitAsDefaultInstance();
  SetConfiguration_Response_ConfigurationBad::default_instance_->InitAsDefaultInstance();
  TreeCondition::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Request::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Request_ListDirectory::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Request_Read::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Response::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Response_ListDirectory::default_instance_->InitAsDefaultInstance();
  ReadOnlyTree_Response_Read::default_instance_->InitAsDefaultInstance();
  ReadWriteTree::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_MakeDirectory::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_RemoveDirectory::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_Write::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Request_RemoveFile::default_instance_->InitAsDefaultInstance();
  ReadWriteTree_Response::default_instance_->InitAsDefaultInstance();
  GetServerInfo::default_instance_->InitAsDefaultInstance();
  GetServerInfo_Request::default_instance_->InitAsDefaultInstance();
  GetServerInfo_Response::default_instance_->InitAsDefaultInstance();
  AdvanceStateMachineVersion::default_instance_->InitAsDefaultInstance();
  AdvanceStateMachineVersion_Request::default_instance_->InitAsDefaultInstance();
  AdvanceStateMachineVersion_Response::default_instance_->InitAsDefaultInstance();
  StateMachineCommand::default_instance_->InitAsDefaultInstance();
  StateMachineCommand_Request::default_instance_->InitAsDefaultInstance();
  StateMachineCommand_Response::default_instance_->InitAsDefaultInstance();
  StateMachineQuery::default_instance_->InitAsDefaultInstance();
  StateMachineQuery_Request::default_instance_->InitAsDefaultInstance();
  StateMachineQuery_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2fClient_2fClient_2eproto {
  StaticDescriptorInitializer_Protocol_2fClient_2fClient_2eproto() {
    protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  }
} static_descriptor_initializer_Protocol_2fClient_2fClient_2eproto_;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCode_descriptor_;
}
bool OpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Code_descriptor_;
}
bool Error_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Error_Code Error::UNKNOWN;
const Error_Code Error::NOT_LEADER;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Error::kErrorCodeFieldNumber;
const int Error::kLeaderHintFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  leader_hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (leader_hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_hint_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_code_ = 0;
    if (has_leader_hint()) {
      if (leader_hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_hint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.Error.Code error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Client::Error_Code_IsValid(value)) {
            set_error_code(static_cast< ::LogCabin::Protocol::Client::Error_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_hint;
        break;
      }

      // optional string leader_hint = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_hint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_hint().data(), this->leader_hint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_hint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.Error)
  // optional .LogCabin.Protocol.Client.Error.Code error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string leader_hint = 2;
  if (has_leader_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_hint().data(), this->leader_hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_hint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_hint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.Error)
  // optional .LogCabin.Protocol.Client.Error.Code error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string leader_hint = 2;
  if (has_leader_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_hint().data(), this->leader_hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_hint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_hint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.Error.Code error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string leader_hint = 2;
    if (has_leader_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_hint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_leader_hint()) {
      set_leader_hint(from.leader_hint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(leader_hint_, other->leader_hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExactlyOnceRPCInfo::kClientIdFieldNumber;
const int ExactlyOnceRPCInfo::kFirstOutstandingRpcFieldNumber;
const int ExactlyOnceRPCInfo::kRpcNumberFieldNumber;
#endif  // !_MSC_VER

ExactlyOnceRPCInfo::ExactlyOnceRPCInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
}

void ExactlyOnceRPCInfo::InitAsDefaultInstance() {
}

ExactlyOnceRPCInfo::ExactlyOnceRPCInfo(const ExactlyOnceRPCInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
}

void ExactlyOnceRPCInfo::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
  rpc_number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExactlyOnceRPCInfo::~ExactlyOnceRPCInfo() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  SharedDtor();
}

void ExactlyOnceRPCInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExactlyOnceRPCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExactlyOnceRPCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExactlyOnceRPCInfo_descriptor_;
}

const ExactlyOnceRPCInfo& ExactlyOnceRPCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ExactlyOnceRPCInfo* ExactlyOnceRPCInfo::default_instance_ = NULL;

ExactlyOnceRPCInfo* ExactlyOnceRPCInfo::New() const {
  return new ExactlyOnceRPCInfo;
}

void ExactlyOnceRPCInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExactlyOnceRPCInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(client_id_, rpc_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExactlyOnceRPCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_outstanding_rpc;
        break;
      }

      // required uint64 first_outstanding_rpc = 2;
      case 2: {
        if (tag == 16) {
         parse_first_outstanding_rpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_outstanding_rpc_)));
          set_has_first_outstanding_rpc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rpc_number;
        break;
      }

      // required uint64 rpc_number = 3;
      case 3: {
        if (tag == 24) {
         parse_rpc_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rpc_number_)));
          set_has_rpc_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  return false;
#undef DO_
}

void ExactlyOnceRPCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // required uint64 first_outstanding_rpc = 2;
  if (has_first_outstanding_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->first_outstanding_rpc(), output);
  }

  // required uint64 rpc_number = 3;
  if (has_rpc_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rpc_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
}

::google::protobuf::uint8* ExactlyOnceRPCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // required uint64 first_outstanding_rpc = 2;
  if (has_first_outstanding_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->first_outstanding_rpc(), target);
  }

  // required uint64 rpc_number = 3;
  if (has_rpc_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rpc_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
  return target;
}

int ExactlyOnceRPCInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // required uint64 first_outstanding_rpc = 2;
    if (has_first_outstanding_rpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_outstanding_rpc());
    }

    // required uint64 rpc_number = 3;
    if (has_rpc_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rpc_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExactlyOnceRPCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExactlyOnceRPCInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExactlyOnceRPCInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExactlyOnceRPCInfo::MergeFrom(const ExactlyOnceRPCInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_first_outstanding_rpc()) {
      set_first_outstanding_rpc(from.first_outstanding_rpc());
    }
    if (from.has_rpc_number()) {
      set_rpc_number(from.rpc_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExactlyOnceRPCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExactlyOnceRPCInfo::CopyFrom(const ExactlyOnceRPCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactlyOnceRPCInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ExactlyOnceRPCInfo::Swap(ExactlyOnceRPCInfo* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(first_outstanding_rpc_, other->first_outstanding_rpc_);
    std::swap(rpc_number_, other->rpc_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExactlyOnceRPCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExactlyOnceRPCInfo_descriptor_;
  metadata.reflection = ExactlyOnceRPCInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyRecipient_Request::kClusterUuidFieldNumber;
const int VerifyRecipient_Request::kServerIdFieldNumber;
#endif  // !_MSC_VER

VerifyRecipient_Request::VerifyRecipient_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.VerifyRecipient.Request)
}

void VerifyRecipient_Request::InitAsDefaultInstance() {
}

VerifyRecipient_Request::VerifyRecipient_Request(const VerifyRecipient_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.VerifyRecipient.Request)
}

void VerifyRecipient_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyRecipient_Request::~VerifyRecipient_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.VerifyRecipient.Request)
  SharedDtor();
}

void VerifyRecipient_Request::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void VerifyRecipient_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyRecipient_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyRecipient_Request_descriptor_;
}

const VerifyRecipient_Request& VerifyRecipient_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

VerifyRecipient_Request* VerifyRecipient_Request::default_instance_ = NULL;

VerifyRecipient_Request* VerifyRecipient_Request::New() const {
  return new VerifyRecipient_Request;
}

void VerifyRecipient_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
    server_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyRecipient_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.VerifyRecipient.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint64 server_id = 2;
      case 2: {
        if (tag == 16) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.VerifyRecipient.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.VerifyRecipient.Request)
  return false;
#undef DO_
}

void VerifyRecipient_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.VerifyRecipient.Request)
  // optional string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_uuid(), output);
  }

  // optional uint64 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.VerifyRecipient.Request)
}

::google::protobuf::uint8* VerifyRecipient_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.VerifyRecipient.Request)
  // optional string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_uuid(), target);
  }

  // optional uint64 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.VerifyRecipient.Request)
  return target;
}

int VerifyRecipient_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cluster_uuid = 1;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // optional uint64 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyRecipient_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyRecipient_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyRecipient_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyRecipient_Request::MergeFrom(const VerifyRecipient_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyRecipient_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyRecipient_Request::CopyFrom(const VerifyRecipient_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRecipient_Request::IsInitialized() const {

  return true;
}

void VerifyRecipient_Request::Swap(VerifyRecipient_Request* other) {
  if (other != this) {
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyRecipient_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyRecipient_Request_descriptor_;
  metadata.reflection = VerifyRecipient_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VerifyRecipient_Response::kClusterUuidFieldNumber;
const int VerifyRecipient_Response::kServerIdFieldNumber;
const int VerifyRecipient_Response::kOkFieldNumber;
const int VerifyRecipient_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

VerifyRecipient_Response::VerifyRecipient_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.VerifyRecipient.Response)
}

void VerifyRecipient_Response::InitAsDefaultInstance() {
}

VerifyRecipient_Response::VerifyRecipient_Response(const VerifyRecipient_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.VerifyRecipient.Response)
}

void VerifyRecipient_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = GOOGLE_ULONGLONG(0);
  ok_ = false;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyRecipient_Response::~VerifyRecipient_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.VerifyRecipient.Response)
  SharedDtor();
}

void VerifyRecipient_Response::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void VerifyRecipient_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyRecipient_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyRecipient_Response_descriptor_;
}

const VerifyRecipient_Response& VerifyRecipient_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

VerifyRecipient_Response* VerifyRecipient_Response::default_instance_ = NULL;

VerifyRecipient_Response* VerifyRecipient_Response::New() const {
  return new VerifyRecipient_Response;
}

void VerifyRecipient_Response::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
    server_id_ = GOOGLE_ULONGLONG(0);
    ok_ = false;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyRecipient_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.VerifyRecipient.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint64 server_id = 2;
      case 2: {
        if (tag == 16) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ok;
        break;
      }

      // optional bool ok = 3;
      case 3: {
        if (tag == 24) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.VerifyRecipient.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.VerifyRecipient.Response)
  return false;
#undef DO_
}

void VerifyRecipient_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.VerifyRecipient.Response)
  // optional string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_uuid(), output);
  }

  // optional uint64 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_id(), output);
  }

  // optional bool ok = 3;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ok(), output);
  }

  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.VerifyRecipient.Response)
}

::google::protobuf::uint8* VerifyRecipient_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.VerifyRecipient.Response)
  // optional string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_uuid(), target);
  }

  // optional uint64 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_id(), target);
  }

  // optional bool ok = 3;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ok(), target);
  }

  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.VerifyRecipient.Response)
  return target;
}

int VerifyRecipient_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cluster_uuid = 1;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // optional uint64 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional bool ok = 3;
    if (has_ok()) {
      total_size += 1 + 1;
    }

    // optional string error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyRecipient_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyRecipient_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyRecipient_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyRecipient_Response::MergeFrom(const VerifyRecipient_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyRecipient_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyRecipient_Response::CopyFrom(const VerifyRecipient_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRecipient_Response::IsInitialized() const {

  return true;
}

void VerifyRecipient_Response::Swap(VerifyRecipient_Response* other) {
  if (other != this) {
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(server_id_, other->server_id_);
    std::swap(ok_, other->ok_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyRecipient_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyRecipient_Response_descriptor_;
  metadata.reflection = VerifyRecipient_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

VerifyRecipient::VerifyRecipient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.VerifyRecipient)
}

void VerifyRecipient::InitAsDefaultInstance() {
}

VerifyRecipient::VerifyRecipient(const VerifyRecipient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.VerifyRecipient)
}

void VerifyRecipient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyRecipient::~VerifyRecipient() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.VerifyRecipient)
  SharedDtor();
}

void VerifyRecipient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyRecipient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyRecipient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyRecipient_descriptor_;
}

const VerifyRecipient& VerifyRecipient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

VerifyRecipient* VerifyRecipient::default_instance_ = NULL;

VerifyRecipient* VerifyRecipient::New() const {
  return new VerifyRecipient;
}

void VerifyRecipient::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyRecipient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.VerifyRecipient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.VerifyRecipient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.VerifyRecipient)
  return false;
#undef DO_
}

void VerifyRecipient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.VerifyRecipient)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.VerifyRecipient)
}

::google::protobuf::uint8* VerifyRecipient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.VerifyRecipient)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.VerifyRecipient)
  return target;
}

int VerifyRecipient::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyRecipient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyRecipient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyRecipient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyRecipient::MergeFrom(const VerifyRecipient& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyRecipient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyRecipient::CopyFrom(const VerifyRecipient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRecipient::IsInitialized() const {

  return true;
}

void VerifyRecipient::Swap(VerifyRecipient* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyRecipient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyRecipient_descriptor_;
  metadata.reflection = VerifyRecipient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenSession_Request::OpenSession_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.OpenSession.Request)
}

void OpenSession_Request::InitAsDefaultInstance() {
}

OpenSession_Request::OpenSession_Request(const OpenSession_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.OpenSession.Request)
}

void OpenSession_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSession_Request::~OpenSession_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.OpenSession.Request)
  SharedDtor();
}

void OpenSession_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSession_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSession_Request_descriptor_;
}

const OpenSession_Request& OpenSession_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

OpenSession_Request* OpenSession_Request::default_instance_ = NULL;

OpenSession_Request* OpenSession_Request::New() const {
  return new OpenSession_Request;
}

void OpenSession_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.OpenSession.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.OpenSession.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.OpenSession.Request)
  return false;
#undef DO_
}

void OpenSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.OpenSession.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.OpenSession.Request)
}

::google::protobuf::uint8* OpenSession_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.OpenSession.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.OpenSession.Request)
  return target;
}

int OpenSession_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSession_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSession_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSession_Request::MergeFrom(const OpenSession_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSession_Request::CopyFrom(const OpenSession_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession_Request::IsInitialized() const {

  return true;
}

void OpenSession_Request::Swap(OpenSession_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSession_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSession_Request_descriptor_;
  metadata.reflection = OpenSession_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpenSession_Response::kClientIdFieldNumber;
#endif  // !_MSC_VER

OpenSession_Response::OpenSession_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.OpenSession.Response)
}

void OpenSession_Response::InitAsDefaultInstance() {
}

OpenSession_Response::OpenSession_Response(const OpenSession_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.OpenSession.Response)
}

void OpenSession_Response::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSession_Response::~OpenSession_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.OpenSession.Response)
  SharedDtor();
}

void OpenSession_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSession_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSession_Response_descriptor_;
}

const OpenSession_Response& OpenSession_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

OpenSession_Response* OpenSession_Response::default_instance_ = NULL;

OpenSession_Response* OpenSession_Response::New() const {
  return new OpenSession_Response;
}

void OpenSession_Response::Clear() {
  client_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.OpenSession.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.OpenSession.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.OpenSession.Response)
  return false;
#undef DO_
}

void OpenSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.OpenSession.Response)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.OpenSession.Response)
}

::google::protobuf::uint8* OpenSession_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.OpenSession.Response)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.OpenSession.Response)
  return target;
}

int OpenSession_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSession_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSession_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSession_Response::MergeFrom(const OpenSession_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSession_Response::CopyFrom(const OpenSession_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenSession_Response::Swap(OpenSession_Response* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSession_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSession_Response_descriptor_;
  metadata.reflection = OpenSession_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenSession::OpenSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.OpenSession)
}

void OpenSession::InitAsDefaultInstance() {
}

OpenSession::OpenSession(const OpenSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.OpenSession)
}

void OpenSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSession::~OpenSession() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.OpenSession)
  SharedDtor();
}

void OpenSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSession_descriptor_;
}

const OpenSession& OpenSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

OpenSession* OpenSession::default_instance_ = NULL;

OpenSession* OpenSession::New() const {
  return new OpenSession;
}

void OpenSession::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.OpenSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.OpenSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.OpenSession)
  return false;
#undef DO_
}

void OpenSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.OpenSession)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.OpenSession)
}

::google::protobuf::uint8* OpenSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.OpenSession)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.OpenSession)
  return target;
}

int OpenSession::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSession::MergeFrom(const OpenSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSession::CopyFrom(const OpenSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSession::IsInitialized() const {

  return true;
}

void OpenSession::Swap(OpenSession* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSession_descriptor_;
  metadata.reflection = OpenSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseSession_Request::kClientIdFieldNumber;
#endif  // !_MSC_VER

CloseSession_Request::CloseSession_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.CloseSession.Request)
}

void CloseSession_Request::InitAsDefaultInstance() {
}

CloseSession_Request::CloseSession_Request(const CloseSession_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.CloseSession.Request)
}

void CloseSession_Request::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseSession_Request::~CloseSession_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.CloseSession.Request)
  SharedDtor();
}

void CloseSession_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSession_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSession_Request_descriptor_;
}

const CloseSession_Request& CloseSession_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

CloseSession_Request* CloseSession_Request::default_instance_ = NULL;

CloseSession_Request* CloseSession_Request::New() const {
  return new CloseSession_Request;
}

void CloseSession_Request::Clear() {
  client_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.CloseSession.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.CloseSession.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.CloseSession.Request)
  return false;
#undef DO_
}

void CloseSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.CloseSession.Request)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.CloseSession.Request)
}

::google::protobuf::uint8* CloseSession_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.CloseSession.Request)
  // required uint64 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.CloseSession.Request)
  return target;
}

int CloseSession_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseSession_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseSession_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseSession_Request::MergeFrom(const CloseSession_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSession_Request::CopyFrom(const CloseSession_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSession_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CloseSession_Request::Swap(CloseSession_Request* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseSession_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSession_Request_descriptor_;
  metadata.reflection = CloseSession_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

CloseSession_Response::CloseSession_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.CloseSession.Response)
}

void CloseSession_Response::InitAsDefaultInstance() {
}

CloseSession_Response::CloseSession_Response(const CloseSession_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.CloseSession.Response)
}

void CloseSession_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseSession_Response::~CloseSession_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.CloseSession.Response)
  SharedDtor();
}

void CloseSession_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSession_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSession_Response_descriptor_;
}

const CloseSession_Response& CloseSession_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

CloseSession_Response* CloseSession_Response::default_instance_ = NULL;

CloseSession_Response* CloseSession_Response::New() const {
  return new CloseSession_Response;
}

void CloseSession_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.CloseSession.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.CloseSession.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.CloseSession.Response)
  return false;
#undef DO_
}

void CloseSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.CloseSession.Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.CloseSession.Response)
}

::google::protobuf::uint8* CloseSession_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.CloseSession.Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.CloseSession.Response)
  return target;
}

int CloseSession_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseSession_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseSession_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseSession_Response::MergeFrom(const CloseSession_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSession_Response::CopyFrom(const CloseSession_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSession_Response::IsInitialized() const {

  return true;
}

void CloseSession_Response::Swap(CloseSession_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseSession_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSession_Response_descriptor_;
  metadata.reflection = CloseSession_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

CloseSession::CloseSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.CloseSession)
}

void CloseSession::InitAsDefaultInstance() {
}

CloseSession::CloseSession(const CloseSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.CloseSession)
}

void CloseSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseSession::~CloseSession() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.CloseSession)
  SharedDtor();
}

void CloseSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSession_descriptor_;
}

const CloseSession& CloseSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

CloseSession* CloseSession::default_instance_ = NULL;

CloseSession* CloseSession::New() const {
  return new CloseSession;
}

void CloseSession::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.CloseSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.CloseSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.CloseSession)
  return false;
#undef DO_
}

void CloseSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.CloseSession)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.CloseSession)
}

::google::protobuf::uint8* CloseSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.CloseSession)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.CloseSession)
  return target;
}

int CloseSession::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseSession::MergeFrom(const CloseSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSession::CopyFrom(const CloseSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSession::IsInitialized() const {

  return true;
}

void CloseSession::Swap(CloseSession* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSession_descriptor_;
  metadata.reflection = CloseSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server::kServerIdFieldNumber;
const int Server::kAddressesFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.Server)
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.Server)
}

void Server::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_addresses()) {
      if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addresses_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addresses;
        break;
      }

      // required string addresses = 2;
      case 2: {
        if (tag == 18) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addresses().data(), this->addresses().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addresses");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.Server)
  return false;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.Server)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addresses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.Server)
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.Server)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addresses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.Server)
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required string addresses = 2;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addresses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_addresses()) {
      set_addresses(from.addresses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(addresses_, other->addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetConfiguration_Request::GetConfiguration_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.GetConfiguration.Request)
}

void GetConfiguration_Request::InitAsDefaultInstance() {
}

GetConfiguration_Request::GetConfiguration_Request(const GetConfiguration_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.GetConfiguration.Request)
}

void GetConfiguration_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfiguration_Request::~GetConfiguration_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.GetConfiguration.Request)
  SharedDtor();
}

void GetConfiguration_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfiguration_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfiguration_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfiguration_Request_descriptor_;
}

const GetConfiguration_Request& GetConfiguration_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

GetConfiguration_Request* GetConfiguration_Request::default_instance_ = NULL;

GetConfiguration_Request* GetConfiguration_Request::New() const {
  return new GetConfiguration_Request;
}

void GetConfiguration_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfiguration_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.GetConfiguration.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.GetConfiguration.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.GetConfiguration.Request)
  return false;
#undef DO_
}

void GetConfiguration_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.GetConfiguration.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.GetConfiguration.Request)
}

::google::protobuf::uint8* GetConfiguration_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.GetConfiguration.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.GetConfiguration.Request)
  return target;
}

int GetConfiguration_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfiguration_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfiguration_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfiguration_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfiguration_Request::MergeFrom(const GetConfiguration_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfiguration_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfiguration_Request::CopyFrom(const GetConfiguration_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfiguration_Request::IsInitialized() const {

  return true;
}

void GetConfiguration_Request::Swap(GetConfiguration_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfiguration_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfiguration_Request_descriptor_;
  metadata.reflection = GetConfiguration_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetConfiguration_Response::kIdFieldNumber;
const int GetConfiguration_Response::kServersFieldNumber;
#endif  // !_MSC_VER

GetConfiguration_Response::GetConfiguration_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.GetConfiguration.Response)
}

void GetConfiguration_Response::InitAsDefaultInstance() {
}

GetConfiguration_Response::GetConfiguration_Response(const GetConfiguration_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.GetConfiguration.Response)
}

void GetConfiguration_Response::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfiguration_Response::~GetConfiguration_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.GetConfiguration.Response)
  SharedDtor();
}

void GetConfiguration_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfiguration_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfiguration_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfiguration_Response_descriptor_;
}

const GetConfiguration_Response& GetConfiguration_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

GetConfiguration_Response* GetConfiguration_Response::default_instance_ = NULL;

GetConfiguration_Response* GetConfiguration_Response::New() const {
  return new GetConfiguration_Response;
}

void GetConfiguration_Response::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfiguration_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.GetConfiguration.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        break;
      }

      // repeated .LogCabin.Protocol.Client.Server servers = 2;
      case 2: {
        if (tag == 18) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.GetConfiguration.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.GetConfiguration.Response)
  return false;
#undef DO_
}

void GetConfiguration_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.GetConfiguration.Response)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.GetConfiguration.Response)
}

::google::protobuf::uint8* GetConfiguration_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.GetConfiguration.Response)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.GetConfiguration.Response)
  return target;
}

int GetConfiguration_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfiguration_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfiguration_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfiguration_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfiguration_Response::MergeFrom(const GetConfiguration_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfiguration_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfiguration_Response::CopyFrom(const GetConfiguration_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfiguration_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void GetConfiguration_Response::Swap(GetConfiguration_Response* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfiguration_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfiguration_Response_descriptor_;
  metadata.reflection = GetConfiguration_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetConfiguration::GetConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.GetConfiguration)
}

void GetConfiguration::InitAsDefaultInstance() {
}

GetConfiguration::GetConfiguration(const GetConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.GetConfiguration)
}

void GetConfiguration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfiguration::~GetConfiguration() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.GetConfiguration)
  SharedDtor();
}

void GetConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfiguration_descriptor_;
}

const GetConfiguration& GetConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

GetConfiguration* GetConfiguration::default_instance_ = NULL;

GetConfiguration* GetConfiguration::New() const {
  return new GetConfiguration;
}

void GetConfiguration::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.GetConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.GetConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.GetConfiguration)
  return false;
#undef DO_
}

void GetConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.GetConfiguration)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.GetConfiguration)
}

::google::protobuf::uint8* GetConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.GetConfiguration)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.GetConfiguration)
  return target;
}

int GetConfiguration::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfiguration::MergeFrom(const GetConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfiguration::CopyFrom(const GetConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfiguration::IsInitialized() const {

  return true;
}

void GetConfiguration::Swap(GetConfiguration* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfiguration_descriptor_;
  metadata.reflection = GetConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetConfiguration_Request::kOldIdFieldNumber;
const int SetConfiguration_Request::kNewServersFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Request::SetConfiguration_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.SetConfiguration.Request)
}

void SetConfiguration_Request::InitAsDefaultInstance() {
}

SetConfiguration_Request::SetConfiguration_Request(const SetConfiguration_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.SetConfiguration.Request)
}

void SetConfiguration_Request::SharedCtor() {
  _cached_size_ = 0;
  old_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Request::~SetConfiguration_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.SetConfiguration.Request)
  SharedDtor();
}

void SetConfiguration_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Request_descriptor_;
}

const SetConfiguration_Request& SetConfiguration_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Request* SetConfiguration_Request::default_instance_ = NULL;

SetConfiguration_Request* SetConfiguration_Request::New() const {
  return new SetConfiguration_Request;
}

void SetConfiguration_Request::Clear() {
  old_id_ = GOOGLE_ULONGLONG(0);
  new_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.SetConfiguration.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 old_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_id_)));
          set_has_old_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_servers;
        break;
      }

      // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
      case 2: {
        if (tag == 18) {
         parse_new_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.SetConfiguration.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.SetConfiguration.Request)
  return false;
#undef DO_
}

void SetConfiguration_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.SetConfiguration.Request)
  // required uint64 old_id = 1;
  if (has_old_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->old_id(), output);
  }

  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  for (int i = 0; i < this->new_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.SetConfiguration.Request)
}

::google::protobuf::uint8* SetConfiguration_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.SetConfiguration.Request)
  // required uint64 old_id = 1;
  if (has_old_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->old_id(), target);
  }

  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  for (int i = 0; i < this->new_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.SetConfiguration.Request)
  return target;
}

int SetConfiguration_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 old_id = 1;
    if (has_old_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_id());
    }

  }
  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  total_size += 1 * this->new_servers_size();
  for (int i = 0; i < this->new_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Request::MergeFrom(const SetConfiguration_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_servers_.MergeFrom(from.new_servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_id()) {
      set_old_id(from.old_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Request::CopyFrom(const SetConfiguration_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->new_servers())) return false;
  return true;
}

void SetConfiguration_Request::Swap(SetConfiguration_Request* other) {
  if (other != this) {
    std::swap(old_id_, other->old_id_);
    new_servers_.Swap(&other->new_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Request_descriptor_;
  metadata.reflection = SetConfiguration_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetConfiguration_Response_OK::SetConfiguration_Response_OK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
}

void SetConfiguration_Response_OK::InitAsDefaultInstance() {
}

SetConfiguration_Response_OK::SetConfiguration_Response_OK(const SetConfiguration_Response_OK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
}

void SetConfiguration_Response_OK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response_OK::~SetConfiguration_Response_OK() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  SharedDtor();
}

void SetConfiguration_Response_OK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Response_OK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response_OK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_OK_descriptor_;
}

const SetConfiguration_Response_OK& SetConfiguration_Response_OK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response_OK* SetConfiguration_Response_OK::default_instance_ = NULL;

SetConfiguration_Response_OK* SetConfiguration_Response_OK::New() const {
  return new SetConfiguration_Response_OK;
}

void SetConfiguration_Response_OK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response_OK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  return false;
#undef DO_
}

void SetConfiguration_Response_OK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
}

::google::protobuf::uint8* SetConfiguration_Response_OK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
  return target;
}

int SetConfiguration_Response_OK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response_OK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response_OK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response_OK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response_OK::MergeFrom(const SetConfiguration_Response_OK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response_OK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response_OK::CopyFrom(const SetConfiguration_Response_OK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response_OK::IsInitialized() const {

  return true;
}

void SetConfiguration_Response_OK::Swap(SetConfiguration_Response_OK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response_OK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_OK_descriptor_;
  metadata.reflection = SetConfiguration_Response_OK_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SetConfiguration_Response_ConfigurationChanged::kErrorFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Response_ConfigurationChanged::SetConfiguration_Response_ConfigurationChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
}

void SetConfiguration_Response_ConfigurationChanged::InitAsDefaultInstance() {
}

SetConfiguration_Response_ConfigurationChanged::SetConfiguration_Response_ConfigurationChanged(const SetConfiguration_Response_ConfigurationChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
}

void SetConfiguration_Response_ConfigurationChanged::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response_ConfigurationChanged::~SetConfiguration_Response_ConfigurationChanged() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  SharedDtor();
}

void SetConfiguration_Response_ConfigurationChanged::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SetConfiguration_Response_ConfigurationChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_ConfigurationChanged_descriptor_;
}

const SetConfiguration_Response_ConfigurationChanged& SetConfiguration_Response_ConfigurationChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response_ConfigurationChanged* SetConfiguration_Response_ConfigurationChanged::default_instance_ = NULL;

SetConfiguration_Response_ConfigurationChanged* SetConfiguration_Response_ConfigurationChanged::New() const {
  return new SetConfiguration_Response_ConfigurationChanged;
}

void SetConfiguration_Response_ConfigurationChanged::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response_ConfigurationChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  return false;
#undef DO_
}

void SetConfiguration_Response_ConfigurationChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
}

::google::protobuf::uint8* SetConfiguration_Response_ConfigurationChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
  return target;
}

int SetConfiguration_Response_ConfigurationChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response_ConfigurationChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response_ConfigurationChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response_ConfigurationChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response_ConfigurationChanged::MergeFrom(const SetConfiguration_Response_ConfigurationChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response_ConfigurationChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response_ConfigurationChanged::CopyFrom(const SetConfiguration_Response_ConfigurationChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response_ConfigurationChanged::IsInitialized() const {

  return true;
}

void SetConfiguration_Response_ConfigurationChanged::Swap(SetConfiguration_Response_ConfigurationChanged* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response_ConfigurationChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_ConfigurationChanged_descriptor_;
  metadata.reflection = SetConfiguration_Response_ConfigurationChanged_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SetConfiguration_Response_ConfigurationBad::kBadServersFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Response_ConfigurationBad::SetConfiguration_Response_ConfigurationBad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
}

void SetConfiguration_Response_ConfigurationBad::InitAsDefaultInstance() {
}

SetConfiguration_Response_ConfigurationBad::SetConfiguration_Response_ConfigurationBad(const SetConfiguration_Response_ConfigurationBad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
}

void SetConfiguration_Response_ConfigurationBad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response_ConfigurationBad::~SetConfiguration_Response_ConfigurationBad() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  SharedDtor();
}

void SetConfiguration_Response_ConfigurationBad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration_Response_ConfigurationBad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response_ConfigurationBad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_ConfigurationBad_descriptor_;
}

const SetConfiguration_Response_ConfigurationBad& SetConfiguration_Response_ConfigurationBad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response_ConfigurationBad* SetConfiguration_Response_ConfigurationBad::default_instance_ = NULL;

SetConfiguration_Response_ConfigurationBad* SetConfiguration_Response_ConfigurationBad::New() const {
  return new SetConfiguration_Response_ConfigurationBad;
}

void SetConfiguration_Response_ConfigurationBad::Clear() {
  bad_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response_ConfigurationBad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
      case 1: {
        if (tag == 10) {
         parse_bad_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bad_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bad_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  return false;
#undef DO_
}

void SetConfiguration_Response_ConfigurationBad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  for (int i = 0; i < this->bad_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bad_servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
}

::google::protobuf::uint8* SetConfiguration_Response_ConfigurationBad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  for (int i = 0; i < this->bad_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bad_servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
  return target;
}

int SetConfiguration_Response_ConfigurationBad::ByteSize() const {
  int total_size = 0;

  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  total_size += 1 * this->bad_servers_size();
  for (int i = 0; i < this->bad_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bad_servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response_ConfigurationBad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response_ConfigurationBad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response_ConfigurationBad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response_ConfigurationBad::MergeFrom(const SetConfiguration_Response_ConfigurationBad& from) {
  GOOGLE_CHECK_NE(&from, this);
  bad_servers_.MergeFrom(from.bad_servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response_ConfigurationBad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response_ConfigurationBad::CopyFrom(const SetConfiguration_Response_ConfigurationBad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response_ConfigurationBad::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bad_servers())) return false;
  return true;
}

void SetConfiguration_Response_ConfigurationBad::Swap(SetConfiguration_Response_ConfigurationBad* other) {
  if (other != this) {
    bad_servers_.Swap(&other->bad_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response_ConfigurationBad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_ConfigurationBad_descriptor_;
  metadata.reflection = SetConfiguration_Response_ConfigurationBad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SetConfiguration_Response::kOkFieldNumber;
const int SetConfiguration_Response::kConfigurationChangedFieldNumber;
const int SetConfiguration_Response::kConfigurationBadFieldNumber;
#endif  // !_MSC_VER

SetConfiguration_Response::SetConfiguration_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.SetConfiguration.Response)
}

void SetConfiguration_Response::InitAsDefaultInstance() {
  ok_ = const_cast< ::LogCabin::Protocol::Client::SetConfiguration_Response_OK*>(&::LogCabin::Protocol::Client::SetConfiguration_Response_OK::default_instance());
  configuration_changed_ = const_cast< ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged*>(&::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::default_instance());
  configuration_bad_ = const_cast< ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad*>(&::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::default_instance());
}

SetConfiguration_Response::SetConfiguration_Response(const SetConfiguration_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.SetConfiguration.Response)
}

void SetConfiguration_Response::SharedCtor() {
  _cached_size_ = 0;
  ok_ = NULL;
  configuration_changed_ = NULL;
  configuration_bad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration_Response::~SetConfiguration_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.SetConfiguration.Response)
  SharedDtor();
}

void SetConfiguration_Response::SharedDtor() {
  if (this != default_instance_) {
    delete ok_;
    delete configuration_changed_;
    delete configuration_bad_;
  }
}

void SetConfiguration_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_Response_descriptor_;
}

const SetConfiguration_Response& SetConfiguration_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration_Response* SetConfiguration_Response::default_instance_ = NULL;

SetConfiguration_Response* SetConfiguration_Response::New() const {
  return new SetConfiguration_Response;
}

void SetConfiguration_Response::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ok()) {
      if (ok_ != NULL) ok_->::LogCabin::Protocol::Client::SetConfiguration_Response_OK::Clear();
    }
    if (has_configuration_changed()) {
      if (configuration_changed_ != NULL) configuration_changed_->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::Clear();
    }
    if (has_configuration_bad()) {
      if (configuration_bad_ != NULL) configuration_bad_->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.SetConfiguration.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_configuration_changed;
        break;
      }

      // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
      case 2: {
        if (tag == 18) {
         parse_configuration_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_configuration_bad;
        break;
      }

      // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
      case 3: {
        if (tag == 26) {
         parse_configuration_bad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration_bad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.SetConfiguration.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.SetConfiguration.Response)
  return false;
#undef DO_
}

void SetConfiguration_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.SetConfiguration.Response)
  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ok(), output);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
  if (has_configuration_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configuration_changed(), output);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
  if (has_configuration_bad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configuration_bad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.SetConfiguration.Response)
}

::google::protobuf::uint8* SetConfiguration_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.SetConfiguration.Response)
  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ok(), target);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
  if (has_configuration_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configuration_changed(), target);
  }

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
  if (has_configuration_bad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configuration_bad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.SetConfiguration.Response)
  return target;
}

int SetConfiguration_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ok());
    }

    // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
    if (has_configuration_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration_changed());
    }

    // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
    if (has_configuration_bad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration_bad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration_Response::MergeFrom(const SetConfiguration_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ok()) {
      mutable_ok()->::LogCabin::Protocol::Client::SetConfiguration_Response_OK::MergeFrom(from.ok());
    }
    if (from.has_configuration_changed()) {
      mutable_configuration_changed()->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::MergeFrom(from.configuration_changed());
    }
    if (from.has_configuration_bad()) {
      mutable_configuration_bad()->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::MergeFrom(from.configuration_bad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration_Response::CopyFrom(const SetConfiguration_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration_Response::IsInitialized() const {

  if (has_configuration_bad()) {
    if (!this->configuration_bad().IsInitialized()) return false;
  }
  return true;
}

void SetConfiguration_Response::Swap(SetConfiguration_Response* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(configuration_changed_, other->configuration_changed_);
    std::swap(configuration_bad_, other->configuration_bad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_Response_descriptor_;
  metadata.reflection = SetConfiguration_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetConfiguration::SetConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.SetConfiguration)
}

void SetConfiguration::InitAsDefaultInstance() {
}

SetConfiguration::SetConfiguration(const SetConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.SetConfiguration)
}

void SetConfiguration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfiguration::~SetConfiguration() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.SetConfiguration)
  SharedDtor();
}

void SetConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfiguration_descriptor_;
}

const SetConfiguration& SetConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

SetConfiguration* SetConfiguration::default_instance_ = NULL;

SetConfiguration* SetConfiguration::New() const {
  return new SetConfiguration;
}

void SetConfiguration::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.SetConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.SetConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.SetConfiguration)
  return false;
#undef DO_
}

void SetConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.SetConfiguration)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.SetConfiguration)
}

::google::protobuf::uint8* SetConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.SetConfiguration)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.SetConfiguration)
  return target;
}

int SetConfiguration::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfiguration::MergeFrom(const SetConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfiguration::CopyFrom(const SetConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfiguration::IsInitialized() const {

  return true;
}

void SetConfiguration::Swap(SetConfiguration* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfiguration_descriptor_;
  metadata.reflection = SetConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeCondition::kPathFieldNumber;
const int TreeCondition::kContentsFieldNumber;
#endif  // !_MSC_VER

TreeCondition::TreeCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.TreeCondition)
}

void TreeCondition::InitAsDefaultInstance() {
}

TreeCondition::TreeCondition(const TreeCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.TreeCondition)
}

void TreeCondition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeCondition::~TreeCondition() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.TreeCondition)
  SharedDtor();
}

void TreeCondition::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void TreeCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeCondition_descriptor_;
}

const TreeCondition& TreeCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

TreeCondition* TreeCondition::default_instance_ = NULL;

TreeCondition* TreeCondition::New() const {
  return new TreeCondition;
}

void TreeCondition::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.TreeCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // required bytes contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.TreeCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.TreeCondition)
  return false;
#undef DO_
}

void TreeCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.TreeCondition)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.TreeCondition)
}

::google::protobuf::uint8* TreeCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.TreeCondition)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.TreeCondition)
  return target;
}

int TreeCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeCondition::MergeFrom(const TreeCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeCondition::CopyFrom(const TreeCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TreeCondition::Swap(TreeCondition* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeCondition_descriptor_;
  metadata.reflection = TreeCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadOnlyTree_Request_ListDirectory::kPathFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Request_ListDirectory::ReadOnlyTree_Request_ListDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
}

void ReadOnlyTree_Request_ListDirectory::InitAsDefaultInstance() {
}

ReadOnlyTree_Request_ListDirectory::ReadOnlyTree_Request_ListDirectory(const ReadOnlyTree_Request_ListDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
}

void ReadOnlyTree_Request_ListDirectory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Request_ListDirectory::~ReadOnlyTree_Request_ListDirectory() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  SharedDtor();
}

void ReadOnlyTree_Request_ListDirectory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Request_ListDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_ListDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Request_ListDirectory_descriptor_;
}

const ReadOnlyTree_Request_ListDirectory& ReadOnlyTree_Request_ListDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Request_ListDirectory* ReadOnlyTree_Request_ListDirectory::default_instance_ = NULL;

ReadOnlyTree_Request_ListDirectory* ReadOnlyTree_Request_ListDirectory::New() const {
  return new ReadOnlyTree_Request_ListDirectory;
}

void ReadOnlyTree_Request_ListDirectory::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Request_ListDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  return false;
#undef DO_
}

void ReadOnlyTree_Request_ListDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
}

::google::protobuf::uint8* ReadOnlyTree_Request_ListDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
  return target;
}

int ReadOnlyTree_Request_ListDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Request_ListDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Request_ListDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Request_ListDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Request_ListDirectory::MergeFrom(const ReadOnlyTree_Request_ListDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Request_ListDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Request_ListDirectory::CopyFrom(const ReadOnlyTree_Request_ListDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Request_ListDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadOnlyTree_Request_ListDirectory::Swap(ReadOnlyTree_Request_ListDirectory* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Request_ListDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Request_ListDirectory_descriptor_;
  metadata.reflection = ReadOnlyTree_Request_ListDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Request_Read::kPathFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Request_Read::ReadOnlyTree_Request_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
}

void ReadOnlyTree_Request_Read::InitAsDefaultInstance() {
}

ReadOnlyTree_Request_Read::ReadOnlyTree_Request_Read(const ReadOnlyTree_Request_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
}

void ReadOnlyTree_Request_Read::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Request_Read::~ReadOnlyTree_Request_Read() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  SharedDtor();
}

void ReadOnlyTree_Request_Read::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Request_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Request_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Request_Read_descriptor_;
}

const ReadOnlyTree_Request_Read& ReadOnlyTree_Request_Read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Request_Read* ReadOnlyTree_Request_Read::default_instance_ = NULL;

ReadOnlyTree_Request_Read* ReadOnlyTree_Request_Read::New() const {
  return new ReadOnlyTree_Request_Read;
}

void ReadOnlyTree_Request_Read::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Request_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  return false;
#undef DO_
}

void ReadOnlyTree_Request_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
}

::google::protobuf::uint8* ReadOnlyTree_Request_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
  return target;
}

int ReadOnlyTree_Request_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Request_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Request_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Request_Read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Request_Read::MergeFrom(const ReadOnlyTree_Request_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Request_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Request_Read::CopyFrom(const ReadOnlyTree_Request_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Request_Read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadOnlyTree_Request_Read::Swap(ReadOnlyTree_Request_Read* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Request_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Request_Read_descriptor_;
  metadata.reflection = ReadOnlyTree_Request_Read_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Request::kConditionFieldNumber;
const int ReadOnlyTree_Request::kListDirectoryFieldNumber;
const int ReadOnlyTree_Request::kReadFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Request::ReadOnlyTree_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree.Request)
}

void ReadOnlyTree_Request::InitAsDefaultInstance() {
  condition_ = const_cast< ::LogCabin::Protocol::Client::TreeCondition*>(&::LogCabin::Protocol::Client::TreeCondition::default_instance());
  list_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::default_instance());
  read_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::default_instance());
}

ReadOnlyTree_Request::ReadOnlyTree_Request(const ReadOnlyTree_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree.Request)
}

void ReadOnlyTree_Request::SharedCtor() {
  _cached_size_ = 0;
  condition_ = NULL;
  list_directory_ = NULL;
  read_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Request::~ReadOnlyTree_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  SharedDtor();
}

void ReadOnlyTree_Request::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
    delete list_directory_;
    delete read_;
  }
}

void ReadOnlyTree_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Request_descriptor_;
}

const ReadOnlyTree_Request& ReadOnlyTree_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Request* ReadOnlyTree_Request::default_instance_ = NULL;

ReadOnlyTree_Request* ReadOnlyTree_Request::New() const {
  return new ReadOnlyTree_Request;
}

void ReadOnlyTree_Request::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_condition()) {
      if (condition_ != NULL) condition_->::LogCabin::Protocol::Client::TreeCondition::Clear();
    }
    if (has_list_directory()) {
      if (list_directory_ != NULL) list_directory_->::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_directory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
      case 5: {
        if (tag == 42) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_condition;
        break;
      }

      // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
      case 11: {
        if (tag == 90) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  return false;
#undef DO_
}

void ReadOnlyTree_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
  if (has_list_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(), output);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree.Request)
}

::google::protobuf::uint8* ReadOnlyTree_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
  if (has_list_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(), target);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree.Request)
  return target;
}

int ReadOnlyTree_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
    if (has_list_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Request::MergeFrom(const ReadOnlyTree_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      mutable_condition()->::LogCabin::Protocol::Client::TreeCondition::MergeFrom(from.condition());
    }
    if (from.has_list_directory()) {
      mutable_list_directory()->::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::MergeFrom(from.list_directory());
    }
    if (from.has_read()) {
      mutable_read()->::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::MergeFrom(from.read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Request::CopyFrom(const ReadOnlyTree_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Request::IsInitialized() const {

  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_list_directory()) {
    if (!this->list_directory().IsInitialized()) return false;
  }
  if (has_read()) {
    if (!this->read().IsInitialized()) return false;
  }
  return true;
}

void ReadOnlyTree_Request::Swap(ReadOnlyTree_Request* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(list_directory_, other->list_directory_);
    std::swap(read_, other->read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Request_descriptor_;
  metadata.reflection = ReadOnlyTree_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Response_ListDirectory::kChildFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Response_ListDirectory::ReadOnlyTree_Response_ListDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
}

void ReadOnlyTree_Response_ListDirectory::InitAsDefaultInstance() {
}

ReadOnlyTree_Response_ListDirectory::ReadOnlyTree_Response_ListDirectory(const ReadOnlyTree_Response_ListDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
}

void ReadOnlyTree_Response_ListDirectory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Response_ListDirectory::~ReadOnlyTree_Response_ListDirectory() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  SharedDtor();
}

void ReadOnlyTree_Response_ListDirectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Response_ListDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_ListDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Response_ListDirectory_descriptor_;
}

const ReadOnlyTree_Response_ListDirectory& ReadOnlyTree_Response_ListDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Response_ListDirectory* ReadOnlyTree_Response_ListDirectory::default_instance_ = NULL;

ReadOnlyTree_Response_ListDirectory* ReadOnlyTree_Response_ListDirectory::New() const {
  return new ReadOnlyTree_Response_ListDirectory;
}

void ReadOnlyTree_Response_ListDirectory::Clear() {
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Response_ListDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string child = 1;
      case 1: {
        if (tag == 10) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_child()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child(this->child_size() - 1).data(),
            this->child(this->child_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "child");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_child;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  return false;
#undef DO_
}

void ReadOnlyTree_Response_ListDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  // repeated string child = 1;
  for (int i = 0; i < this->child_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->child(i).data(), this->child(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "child");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->child(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
}

::google::protobuf::uint8* ReadOnlyTree_Response_ListDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  // repeated string child = 1;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child(i).data(), this->child(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "child");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->child(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
  return target;
}

int ReadOnlyTree_Response_ListDirectory::ByteSize() const {
  int total_size = 0;

  // repeated string child = 1;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->child(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Response_ListDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Response_ListDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Response_ListDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Response_ListDirectory::MergeFrom(const ReadOnlyTree_Response_ListDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_.MergeFrom(from.child_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Response_ListDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Response_ListDirectory::CopyFrom(const ReadOnlyTree_Response_ListDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Response_ListDirectory::IsInitialized() const {

  return true;
}

void ReadOnlyTree_Response_ListDirectory::Swap(ReadOnlyTree_Response_ListDirectory* other) {
  if (other != this) {
    child_.Swap(&other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Response_ListDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Response_ListDirectory_descriptor_;
  metadata.reflection = ReadOnlyTree_Response_ListDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Response_Read::kContentsFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Response_Read::ReadOnlyTree_Response_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
}

void ReadOnlyTree_Response_Read::InitAsDefaultInstance() {
}

ReadOnlyTree_Response_Read::ReadOnlyTree_Response_Read(const ReadOnlyTree_Response_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
}

void ReadOnlyTree_Response_Read::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Response_Read::~ReadOnlyTree_Response_Read() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  SharedDtor();
}

void ReadOnlyTree_Response_Read::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void ReadOnlyTree_Response_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Response_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Response_Read_descriptor_;
}

const ReadOnlyTree_Response_Read& ReadOnlyTree_Response_Read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Response_Read* ReadOnlyTree_Response_Read::default_instance_ = NULL;

ReadOnlyTree_Response_Read* ReadOnlyTree_Response_Read::New() const {
  return new ReadOnlyTree_Response_Read;
}

void ReadOnlyTree_Response_Read::Clear() {
  if (has_contents()) {
    if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      contents_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Response_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes contents = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  return false;
#undef DO_
}

void ReadOnlyTree_Response_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  // required bytes contents = 1;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
}

::google::protobuf::uint8* ReadOnlyTree_Response_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  // required bytes contents = 1;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
  return target;
}

int ReadOnlyTree_Response_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes contents = 1;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Response_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Response_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Response_Read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Response_Read::MergeFrom(const ReadOnlyTree_Response_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Response_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Response_Read::CopyFrom(const ReadOnlyTree_Response_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Response_Read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadOnlyTree_Response_Read::Swap(ReadOnlyTree_Response_Read* other) {
  if (other != this) {
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Response_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Response_Read_descriptor_;
  metadata.reflection = ReadOnlyTree_Response_Read_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadOnlyTree_Response::kStatusFieldNumber;
const int ReadOnlyTree_Response::kErrorFieldNumber;
const int ReadOnlyTree_Response::kListDirectoryFieldNumber;
const int ReadOnlyTree_Response::kReadFieldNumber;
#endif  // !_MSC_VER

ReadOnlyTree_Response::ReadOnlyTree_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree.Response)
}

void ReadOnlyTree_Response::InitAsDefaultInstance() {
  list_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::default_instance());
  read_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::default_instance());
}

ReadOnlyTree_Response::ReadOnlyTree_Response(const ReadOnlyTree_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree.Response)
}

void ReadOnlyTree_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 10;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_directory_ = NULL;
  read_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree_Response::~ReadOnlyTree_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  SharedDtor();
}

void ReadOnlyTree_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
    delete list_directory_;
    delete read_;
  }
}

void ReadOnlyTree_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_Response_descriptor_;
}

const ReadOnlyTree_Response& ReadOnlyTree_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree_Response* ReadOnlyTree_Response::default_instance_ = NULL;

ReadOnlyTree_Response* ReadOnlyTree_Response::New() const {
  return new ReadOnlyTree_Response;
}

void ReadOnlyTree_Response::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    status_ = 10;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_list_directory()) {
      if (list_directory_ != NULL) list_directory_->::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Client::Status_IsValid(value)) {
            set_status(static_cast< ::LogCabin::Protocol::Client::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_directory;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
      case 3: {
        if (tag == 26) {
         parse_list_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_directory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_read;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
      case 4: {
        if (tag == 34) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  return false;
#undef DO_
}

void ReadOnlyTree_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  // optional .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
  if (has_list_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->read(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree.Response)
}

::google::protobuf::uint8* ReadOnlyTree_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  // optional .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
  if (has_list_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->read(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree.Response)
  return target;
}

int ReadOnlyTree_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
    if (has_list_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree_Response::MergeFrom(const ReadOnlyTree_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_list_directory()) {
      mutable_list_directory()->::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::MergeFrom(from.list_directory());
    }
    if (from.has_read()) {
      mutable_read()->::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::MergeFrom(from.read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree_Response::CopyFrom(const ReadOnlyTree_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree_Response::IsInitialized() const {

  if (has_read()) {
    if (!this->read().IsInitialized()) return false;
  }
  return true;
}

void ReadOnlyTree_Response::Swap(ReadOnlyTree_Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(list_directory_, other->list_directory_);
    std::swap(read_, other->read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_Response_descriptor_;
  metadata.reflection = ReadOnlyTree_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReadOnlyTree::ReadOnlyTree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadOnlyTree)
}

void ReadOnlyTree::InitAsDefaultInstance() {
}

ReadOnlyTree::ReadOnlyTree(const ReadOnlyTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadOnlyTree)
}

void ReadOnlyTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadOnlyTree::~ReadOnlyTree() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadOnlyTree)
  SharedDtor();
}

void ReadOnlyTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadOnlyTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOnlyTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadOnlyTree_descriptor_;
}

const ReadOnlyTree& ReadOnlyTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadOnlyTree* ReadOnlyTree::default_instance_ = NULL;

ReadOnlyTree* ReadOnlyTree::New() const {
  return new ReadOnlyTree;
}

void ReadOnlyTree::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadOnlyTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadOnlyTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadOnlyTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadOnlyTree)
  return false;
#undef DO_
}

void ReadOnlyTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadOnlyTree)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadOnlyTree)
}

::google::protobuf::uint8* ReadOnlyTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadOnlyTree)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadOnlyTree)
  return target;
}

int ReadOnlyTree::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOnlyTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadOnlyTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadOnlyTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadOnlyTree::MergeFrom(const ReadOnlyTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadOnlyTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOnlyTree::CopyFrom(const ReadOnlyTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOnlyTree::IsInitialized() const {

  return true;
}

void ReadOnlyTree::Swap(ReadOnlyTree* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadOnlyTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadOnlyTree_descriptor_;
  metadata.reflection = ReadOnlyTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadWriteTree_Request_MakeDirectory::kPathFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_MakeDirectory::ReadWriteTree_Request_MakeDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
}

void ReadWriteTree_Request_MakeDirectory::InitAsDefaultInstance() {
}

ReadWriteTree_Request_MakeDirectory::ReadWriteTree_Request_MakeDirectory(const ReadWriteTree_Request_MakeDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
}

void ReadWriteTree_Request_MakeDirectory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_MakeDirectory::~ReadWriteTree_Request_MakeDirectory() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  SharedDtor();
}

void ReadWriteTree_Request_MakeDirectory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_MakeDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_MakeDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_MakeDirectory_descriptor_;
}

const ReadWriteTree_Request_MakeDirectory& ReadWriteTree_Request_MakeDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_MakeDirectory* ReadWriteTree_Request_MakeDirectory::default_instance_ = NULL;

ReadWriteTree_Request_MakeDirectory* ReadWriteTree_Request_MakeDirectory::New() const {
  return new ReadWriteTree_Request_MakeDirectory;
}

void ReadWriteTree_Request_MakeDirectory::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_MakeDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  return false;
#undef DO_
}

void ReadWriteTree_Request_MakeDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
}

::google::protobuf::uint8* ReadWriteTree_Request_MakeDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
  return target;
}

int ReadWriteTree_Request_MakeDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_MakeDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_MakeDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_MakeDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_MakeDirectory::MergeFrom(const ReadWriteTree_Request_MakeDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_MakeDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_MakeDirectory::CopyFrom(const ReadWriteTree_Request_MakeDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_MakeDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Request_MakeDirectory::Swap(ReadWriteTree_Request_MakeDirectory* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_MakeDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_MakeDirectory_descriptor_;
  metadata.reflection = ReadWriteTree_Request_MakeDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request_RemoveDirectory::kPathFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_RemoveDirectory::ReadWriteTree_Request_RemoveDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
}

void ReadWriteTree_Request_RemoveDirectory::InitAsDefaultInstance() {
}

ReadWriteTree_Request_RemoveDirectory::ReadWriteTree_Request_RemoveDirectory(const ReadWriteTree_Request_RemoveDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
}

void ReadWriteTree_Request_RemoveDirectory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_RemoveDirectory::~ReadWriteTree_Request_RemoveDirectory() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  SharedDtor();
}

void ReadWriteTree_Request_RemoveDirectory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_RemoveDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_RemoveDirectory_descriptor_;
}

const ReadWriteTree_Request_RemoveDirectory& ReadWriteTree_Request_RemoveDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_RemoveDirectory* ReadWriteTree_Request_RemoveDirectory::default_instance_ = NULL;

ReadWriteTree_Request_RemoveDirectory* ReadWriteTree_Request_RemoveDirectory::New() const {
  return new ReadWriteTree_Request_RemoveDirectory;
}

void ReadWriteTree_Request_RemoveDirectory::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_RemoveDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  return false;
#undef DO_
}

void ReadWriteTree_Request_RemoveDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
}

::google::protobuf::uint8* ReadWriteTree_Request_RemoveDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
  return target;
}

int ReadWriteTree_Request_RemoveDirectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_RemoveDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_RemoveDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_RemoveDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_RemoveDirectory::MergeFrom(const ReadWriteTree_Request_RemoveDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_RemoveDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_RemoveDirectory::CopyFrom(const ReadWriteTree_Request_RemoveDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_RemoveDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Request_RemoveDirectory::Swap(ReadWriteTree_Request_RemoveDirectory* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_RemoveDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_RemoveDirectory_descriptor_;
  metadata.reflection = ReadWriteTree_Request_RemoveDirectory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request_Write::kPathFieldNumber;
const int ReadWriteTree_Request_Write::kContentsFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_Write::ReadWriteTree_Request_Write()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
}

void ReadWriteTree_Request_Write::InitAsDefaultInstance() {
}

ReadWriteTree_Request_Write::ReadWriteTree_Request_Write(const ReadWriteTree_Request_Write& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
}

void ReadWriteTree_Request_Write::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_Write::~ReadWriteTree_Request_Write() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  SharedDtor();
}

void ReadWriteTree_Request_Write::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_Write::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_Write::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_Write_descriptor_;
}

const ReadWriteTree_Request_Write& ReadWriteTree_Request_Write::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_Write* ReadWriteTree_Request_Write::default_instance_ = NULL;

ReadWriteTree_Request_Write* ReadWriteTree_Request_Write::New() const {
  return new ReadWriteTree_Request_Write;
}

void ReadWriteTree_Request_Write::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_Write::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // required bytes contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  return false;
#undef DO_
}

void ReadWriteTree_Request_Write::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
}

::google::protobuf::uint8* ReadWriteTree_Request_Write::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
  return target;
}

int ReadWriteTree_Request_Write::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_Write::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_Write* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_Write*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_Write::MergeFrom(const ReadWriteTree_Request_Write& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_Write::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_Write::CopyFrom(const ReadWriteTree_Request_Write& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_Write::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadWriteTree_Request_Write::Swap(ReadWriteTree_Request_Write* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_Write::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_Write_descriptor_;
  metadata.reflection = ReadWriteTree_Request_Write_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request_RemoveFile::kPathFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request_RemoveFile::ReadWriteTree_Request_RemoveFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
}

void ReadWriteTree_Request_RemoveFile::InitAsDefaultInstance() {
}

ReadWriteTree_Request_RemoveFile::ReadWriteTree_Request_RemoveFile(const ReadWriteTree_Request_RemoveFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
}

void ReadWriteTree_Request_RemoveFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request_RemoveFile::~ReadWriteTree_Request_RemoveFile() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  SharedDtor();
}

void ReadWriteTree_Request_RemoveFile::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Request_RemoveFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request_RemoveFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_RemoveFile_descriptor_;
}

const ReadWriteTree_Request_RemoveFile& ReadWriteTree_Request_RemoveFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request_RemoveFile* ReadWriteTree_Request_RemoveFile::default_instance_ = NULL;

ReadWriteTree_Request_RemoveFile* ReadWriteTree_Request_RemoveFile::New() const {
  return new ReadWriteTree_Request_RemoveFile;
}

void ReadWriteTree_Request_RemoveFile::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request_RemoveFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  return false;
#undef DO_
}

void ReadWriteTree_Request_RemoveFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
}

::google::protobuf::uint8* ReadWriteTree_Request_RemoveFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
  return target;
}

int ReadWriteTree_Request_RemoveFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request_RemoveFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request_RemoveFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request_RemoveFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request_RemoveFile::MergeFrom(const ReadWriteTree_Request_RemoveFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request_RemoveFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request_RemoveFile::CopyFrom(const ReadWriteTree_Request_RemoveFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request_RemoveFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadWriteTree_Request_RemoveFile::Swap(ReadWriteTree_Request_RemoveFile* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request_RemoveFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_RemoveFile_descriptor_;
  metadata.reflection = ReadWriteTree_Request_RemoveFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Request::kExactlyOnceFieldNumber;
const int ReadWriteTree_Request::kConditionFieldNumber;
const int ReadWriteTree_Request::kMakeDirectoryFieldNumber;
const int ReadWriteTree_Request::kRemoveDirectoryFieldNumber;
const int ReadWriteTree_Request::kWriteFieldNumber;
const int ReadWriteTree_Request::kRemoveFileFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Request::ReadWriteTree_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree.Request)
}

void ReadWriteTree_Request::InitAsDefaultInstance() {
  exactly_once_ = const_cast< ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo*>(&::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::default_instance());
  condition_ = const_cast< ::LogCabin::Protocol::Client::TreeCondition*>(&::LogCabin::Protocol::Client::TreeCondition::default_instance());
  make_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::default_instance());
  remove_directory_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::default_instance());
  write_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::default_instance());
  remove_file_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::default_instance());
}

ReadWriteTree_Request::ReadWriteTree_Request(const ReadWriteTree_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree.Request)
}

void ReadWriteTree_Request::SharedCtor() {
  _cached_size_ = 0;
  exactly_once_ = NULL;
  condition_ = NULL;
  make_directory_ = NULL;
  remove_directory_ = NULL;
  write_ = NULL;
  remove_file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Request::~ReadWriteTree_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree.Request)
  SharedDtor();
}

void ReadWriteTree_Request::SharedDtor() {
  if (this != default_instance_) {
    delete exactly_once_;
    delete condition_;
    delete make_directory_;
    delete remove_directory_;
    delete write_;
    delete remove_file_;
  }
}

void ReadWriteTree_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Request_descriptor_;
}

const ReadWriteTree_Request& ReadWriteTree_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Request* ReadWriteTree_Request::default_instance_ = NULL;

ReadWriteTree_Request* ReadWriteTree_Request::New() const {
  return new ReadWriteTree_Request;
}

void ReadWriteTree_Request::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_exactly_once()) {
      if (exactly_once_ != NULL) exactly_once_->::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::Clear();
    }
    if (has_condition()) {
      if (condition_ != NULL) condition_->::LogCabin::Protocol::Client::TreeCondition::Clear();
    }
    if (has_make_directory()) {
      if (make_directory_ != NULL) make_directory_->::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::Clear();
    }
    if (has_remove_directory()) {
      if (remove_directory_ != NULL) remove_directory_->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::Clear();
    }
    if (has_write()) {
      if (write_ != NULL) write_->::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::Clear();
    }
    if (has_remove_file()) {
      if (remove_file_ != NULL) remove_file_->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_directory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remove_directory;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
      case 3: {
        if (tag == 26) {
         parse_remove_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_directory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_write;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
      case 4: {
        if (tag == 34) {
         parse_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remove_file;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
      case 6: {
        if (tag == 50) {
         parse_remove_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_exactly_once;
        break;
      }

      // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
      case 10: {
        if (tag == 82) {
         parse_exactly_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exactly_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_condition;
        break;
      }

      // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
      case 11: {
        if (tag == 90) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree.Request)
  return false;
#undef DO_
}

void ReadWriteTree_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree.Request)
  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
  if (has_make_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->make_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
  if (has_remove_directory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remove_directory(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
  if (has_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->write(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
  if (has_remove_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->remove_file(), output);
  }

  // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
  if (has_exactly_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->exactly_once(), output);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree.Request)
}

::google::protobuf::uint8* ReadWriteTree_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree.Request)
  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
  if (has_make_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->make_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
  if (has_remove_directory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remove_directory(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
  if (has_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->write(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
  if (has_remove_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->remove_file(), target);
  }

  // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
  if (has_exactly_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->exactly_once(), target);
  }

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree.Request)
  return target;
}

int ReadWriteTree_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
    if (has_exactly_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exactly_once());
    }

    // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
    if (has_make_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
    if (has_remove_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_directory());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
    if (has_write()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
    if (has_remove_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Request::MergeFrom(const ReadWriteTree_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exactly_once()) {
      mutable_exactly_once()->::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::MergeFrom(from.exactly_once());
    }
    if (from.has_condition()) {
      mutable_condition()->::LogCabin::Protocol::Client::TreeCondition::MergeFrom(from.condition());
    }
    if (from.has_make_directory()) {
      mutable_make_directory()->::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::MergeFrom(from.make_directory());
    }
    if (from.has_remove_directory()) {
      mutable_remove_directory()->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::MergeFrom(from.remove_directory());
    }
    if (from.has_write()) {
      mutable_write()->::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::MergeFrom(from.write());
    }
    if (from.has_remove_file()) {
      mutable_remove_file()->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::MergeFrom(from.remove_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Request::CopyFrom(const ReadWriteTree_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_exactly_once()) {
    if (!this->exactly_once().IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_make_directory()) {
    if (!this->make_directory().IsInitialized()) return false;
  }
  if (has_remove_directory()) {
    if (!this->remove_directory().IsInitialized()) return false;
  }
  if (has_write()) {
    if (!this->write().IsInitialized()) return false;
  }
  if (has_remove_file()) {
    if (!this->remove_file().IsInitialized()) return false;
  }
  return true;
}

void ReadWriteTree_Request::Swap(ReadWriteTree_Request* other) {
  if (other != this) {
    std::swap(exactly_once_, other->exactly_once_);
    std::swap(condition_, other->condition_);
    std::swap(make_directory_, other->make_directory_);
    std::swap(remove_directory_, other->remove_directory_);
    std::swap(write_, other->write_);
    std::swap(remove_file_, other->remove_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Request_descriptor_;
  metadata.reflection = ReadWriteTree_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadWriteTree_Response::kStatusFieldNumber;
const int ReadWriteTree_Response::kErrorFieldNumber;
#endif  // !_MSC_VER

ReadWriteTree_Response::ReadWriteTree_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree.Response)
}

void ReadWriteTree_Response::InitAsDefaultInstance() {
}

ReadWriteTree_Response::ReadWriteTree_Response(const ReadWriteTree_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree.Response)
}

void ReadWriteTree_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 10;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree_Response::~ReadWriteTree_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree.Response)
  SharedDtor();
}

void ReadWriteTree_Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ReadWriteTree_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_Response_descriptor_;
}

const ReadWriteTree_Response& ReadWriteTree_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree_Response* ReadWriteTree_Response::default_instance_ = NULL;

ReadWriteTree_Response* ReadWriteTree_Response::New() const {
  return new ReadWriteTree_Response;
}

void ReadWriteTree_Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 10;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogCabin::Protocol::Client::Status_IsValid(value)) {
            set_status(static_cast< ::LogCabin::Protocol::Client::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree.Response)
  return false;
#undef DO_
}

void ReadWriteTree_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree.Response)
  // optional .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree.Response)
}

::google::protobuf::uint8* ReadWriteTree_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree.Response)
  // optional .LogCabin.Protocol.Client.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree.Response)
  return target;
}

int ReadWriteTree_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree_Response::MergeFrom(const ReadWriteTree_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree_Response::CopyFrom(const ReadWriteTree_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree_Response::IsInitialized() const {

  return true;
}

void ReadWriteTree_Response::Swap(ReadWriteTree_Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_Response_descriptor_;
  metadata.reflection = ReadWriteTree_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReadWriteTree::ReadWriteTree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.ReadWriteTree)
}

void ReadWriteTree::InitAsDefaultInstance() {
}

ReadWriteTree::ReadWriteTree(const ReadWriteTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.ReadWriteTree)
}

void ReadWriteTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWriteTree::~ReadWriteTree() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.ReadWriteTree)
  SharedDtor();
}

void ReadWriteTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadWriteTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteTree_descriptor_;
}

const ReadWriteTree& ReadWriteTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

ReadWriteTree* ReadWriteTree::default_instance_ = NULL;

ReadWriteTree* ReadWriteTree::New() const {
  return new ReadWriteTree;
}

void ReadWriteTree::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.ReadWriteTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.ReadWriteTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.ReadWriteTree)
  return false;
#undef DO_
}

void ReadWriteTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.ReadWriteTree)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.ReadWriteTree)
}

::google::protobuf::uint8* ReadWriteTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.ReadWriteTree)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.ReadWriteTree)
  return target;
}

int ReadWriteTree::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteTree::MergeFrom(const ReadWriteTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteTree::CopyFrom(const ReadWriteTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteTree::IsInitialized() const {

  return true;
}

void ReadWriteTree::Swap(ReadWriteTree* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteTree_descriptor_;
  metadata.reflection = ReadWriteTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServerInfo_Request::GetServerInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.GetServerInfo.Request)
}

void GetServerInfo_Request::InitAsDefaultInstance() {
}

GetServerInfo_Request::GetServerInfo_Request(const GetServerInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.GetServerInfo.Request)
}

void GetServerInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerInfo_Request::~GetServerInfo_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.GetServerInfo.Request)
  SharedDtor();
}

void GetServerInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerInfo_Request_descriptor_;
}

const GetServerInfo_Request& GetServerInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

GetServerInfo_Request* GetServerInfo_Request::default_instance_ = NULL;

GetServerInfo_Request* GetServerInfo_Request::New() const {
  return new GetServerInfo_Request;
}

void GetServerInfo_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.GetServerInfo.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.GetServerInfo.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.GetServerInfo.Request)
  return false;
#undef DO_
}

void GetServerInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.GetServerInfo.Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.GetServerInfo.Request)
}

::google::protobuf::uint8* GetServerInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.GetServerInfo.Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.GetServerInfo.Request)
  return target;
}

int GetServerInfo_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerInfo_Request::MergeFrom(const GetServerInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfo_Request::CopyFrom(const GetServerInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfo_Request::IsInitialized() const {

  return true;
}

void GetServerInfo_Request::Swap(GetServerInfo_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerInfo_Request_descriptor_;
  metadata.reflection = GetServerInfo_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetServerInfo_Response::kServerInfoFieldNumber;
#endif  // !_MSC_VER

GetServerInfo_Response::GetServerInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.GetServerInfo.Response)
}

void GetServerInfo_Response::InitAsDefaultInstance() {
  server_info_ = const_cast< ::LogCabin::Protocol::Client::Server*>(&::LogCabin::Protocol::Client::Server::default_instance());
}

GetServerInfo_Response::GetServerInfo_Response(const GetServerInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.GetServerInfo.Response)
}

void GetServerInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  server_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerInfo_Response::~GetServerInfo_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.GetServerInfo.Response)
  SharedDtor();
}

void GetServerInfo_Response::SharedDtor() {
  if (this != default_instance_) {
    delete server_info_;
  }
}

void GetServerInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerInfo_Response_descriptor_;
}

const GetServerInfo_Response& GetServerInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

GetServerInfo_Response* GetServerInfo_Response::default_instance_ = NULL;

GetServerInfo_Response* GetServerInfo_Response::New() const {
  return new GetServerInfo_Response;
}

void GetServerInfo_Response::Clear() {
  if (has_server_info()) {
    if (server_info_ != NULL) server_info_->::LogCabin::Protocol::Client::Server::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.GetServerInfo.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogCabin.Protocol.Client.Server server_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.GetServerInfo.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.GetServerInfo.Response)
  return false;
#undef DO_
}

void GetServerInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.GetServerInfo.Response)
  // required .LogCabin.Protocol.Client.Server server_info = 1;
  if (has_server_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.GetServerInfo.Response)
}

::google::protobuf::uint8* GetServerInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.GetServerInfo.Response)
  // required .LogCabin.Protocol.Client.Server server_info = 1;
  if (has_server_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.GetServerInfo.Response)
  return target;
}

int GetServerInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogCabin.Protocol.Client.Server server_info = 1;
    if (has_server_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerInfo_Response::MergeFrom(const GetServerInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_info()) {
      mutable_server_info()->::LogCabin::Protocol::Client::Server::MergeFrom(from.server_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfo_Response::CopyFrom(const GetServerInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfo_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server_info()) {
    if (!this->server_info().IsInitialized()) return false;
  }
  return true;
}

void GetServerInfo_Response::Swap(GetServerInfo_Response* other) {
  if (other != this) {
    std::swap(server_info_, other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerInfo_Response_descriptor_;
  metadata.reflection = GetServerInfo_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServerInfo::GetServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.GetServerInfo)
}

void GetServerInfo::InitAsDefaultInstance() {
}

GetServerInfo::GetServerInfo(const GetServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.GetServerInfo)
}

void GetServerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerInfo::~GetServerInfo() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.GetServerInfo)
  SharedDtor();
}

void GetServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerInfo_descriptor_;
}

const GetServerInfo& GetServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

GetServerInfo* GetServerInfo::default_instance_ = NULL;

GetServerInfo* GetServerInfo::New() const {
  return new GetServerInfo;
}

void GetServerInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.GetServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.GetServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.GetServerInfo)
  return false;
#undef DO_
}

void GetServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.GetServerInfo)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.GetServerInfo)
}

::google::protobuf::uint8* GetServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.GetServerInfo)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.GetServerInfo)
  return target;
}

int GetServerInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerInfo::MergeFrom(const GetServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfo::CopyFrom(const GetServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfo::IsInitialized() const {

  return true;
}

void GetServerInfo::Swap(GetServerInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerInfo_descriptor_;
  metadata.reflection = GetServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdvanceStateMachineVersion_Request::kRequestedVersionFieldNumber;
#endif  // !_MSC_VER

AdvanceStateMachineVersion_Request::AdvanceStateMachineVersion_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
}

void AdvanceStateMachineVersion_Request::InitAsDefaultInstance() {
}

AdvanceStateMachineVersion_Request::AdvanceStateMachineVersion_Request(const AdvanceStateMachineVersion_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
}

void AdvanceStateMachineVersion_Request::SharedCtor() {
  _cached_size_ = 0;
  requested_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceStateMachineVersion_Request::~AdvanceStateMachineVersion_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  SharedDtor();
}

void AdvanceStateMachineVersion_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceStateMachineVersion_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceStateMachineVersion_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceStateMachineVersion_Request_descriptor_;
}

const AdvanceStateMachineVersion_Request& AdvanceStateMachineVersion_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

AdvanceStateMachineVersion_Request* AdvanceStateMachineVersion_Request::default_instance_ = NULL;

AdvanceStateMachineVersion_Request* AdvanceStateMachineVersion_Request::New() const {
  return new AdvanceStateMachineVersion_Request;
}

void AdvanceStateMachineVersion_Request::Clear() {
  requested_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvanceStateMachineVersion_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requested_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requested_version_)));
          set_has_requested_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  return false;
#undef DO_
}

void AdvanceStateMachineVersion_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  // required uint32 requested_version = 1;
  if (has_requested_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requested_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
}

::google::protobuf::uint8* AdvanceStateMachineVersion_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  // required uint32 requested_version = 1;
  if (has_requested_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requested_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
  return target;
}

int AdvanceStateMachineVersion_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 requested_version = 1;
    if (has_requested_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requested_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvanceStateMachineVersion_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvanceStateMachineVersion_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvanceStateMachineVersion_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvanceStateMachineVersion_Request::MergeFrom(const AdvanceStateMachineVersion_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requested_version()) {
      set_requested_version(from.requested_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvanceStateMachineVersion_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStateMachineVersion_Request::CopyFrom(const AdvanceStateMachineVersion_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStateMachineVersion_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdvanceStateMachineVersion_Request::Swap(AdvanceStateMachineVersion_Request* other) {
  if (other != this) {
    std::swap(requested_version_, other->requested_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvanceStateMachineVersion_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceStateMachineVersion_Request_descriptor_;
  metadata.reflection = AdvanceStateMachineVersion_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdvanceStateMachineVersion_Response::kRunningVersionFieldNumber;
#endif  // !_MSC_VER

AdvanceStateMachineVersion_Response::AdvanceStateMachineVersion_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
}

void AdvanceStateMachineVersion_Response::InitAsDefaultInstance() {
}

AdvanceStateMachineVersion_Response::AdvanceStateMachineVersion_Response(const AdvanceStateMachineVersion_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
}

void AdvanceStateMachineVersion_Response::SharedCtor() {
  _cached_size_ = 0;
  running_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceStateMachineVersion_Response::~AdvanceStateMachineVersion_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  SharedDtor();
}

void AdvanceStateMachineVersion_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceStateMachineVersion_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceStateMachineVersion_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceStateMachineVersion_Response_descriptor_;
}

const AdvanceStateMachineVersion_Response& AdvanceStateMachineVersion_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

AdvanceStateMachineVersion_Response* AdvanceStateMachineVersion_Response::default_instance_ = NULL;

AdvanceStateMachineVersion_Response* AdvanceStateMachineVersion_Response::New() const {
  return new AdvanceStateMachineVersion_Response;
}

void AdvanceStateMachineVersion_Response::Clear() {
  running_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvanceStateMachineVersion_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 running_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_version_)));
          set_has_running_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  return false;
#undef DO_
}

void AdvanceStateMachineVersion_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  // required uint32 running_version = 1;
  if (has_running_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->running_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
}

::google::protobuf::uint8* AdvanceStateMachineVersion_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  // required uint32 running_version = 1;
  if (has_running_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->running_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
  return target;
}

int AdvanceStateMachineVersion_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 running_version = 1;
    if (has_running_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->running_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvanceStateMachineVersion_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvanceStateMachineVersion_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvanceStateMachineVersion_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvanceStateMachineVersion_Response::MergeFrom(const AdvanceStateMachineVersion_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_running_version()) {
      set_running_version(from.running_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvanceStateMachineVersion_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStateMachineVersion_Response::CopyFrom(const AdvanceStateMachineVersion_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStateMachineVersion_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdvanceStateMachineVersion_Response::Swap(AdvanceStateMachineVersion_Response* other) {
  if (other != this) {
    std::swap(running_version_, other->running_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvanceStateMachineVersion_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceStateMachineVersion_Response_descriptor_;
  metadata.reflection = AdvanceStateMachineVersion_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

AdvanceStateMachineVersion::AdvanceStateMachineVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
}

void AdvanceStateMachineVersion::InitAsDefaultInstance() {
}

AdvanceStateMachineVersion::AdvanceStateMachineVersion(const AdvanceStateMachineVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
}

void AdvanceStateMachineVersion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceStateMachineVersion::~AdvanceStateMachineVersion() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  SharedDtor();
}

void AdvanceStateMachineVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceStateMachineVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceStateMachineVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceStateMachineVersion_descriptor_;
}

const AdvanceStateMachineVersion& AdvanceStateMachineVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

AdvanceStateMachineVersion* AdvanceStateMachineVersion::default_instance_ = NULL;

AdvanceStateMachineVersion* AdvanceStateMachineVersion::New() const {
  return new AdvanceStateMachineVersion;
}

void AdvanceStateMachineVersion::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvanceStateMachineVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  return false;
#undef DO_
}

void AdvanceStateMachineVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
}

::google::protobuf::uint8* AdvanceStateMachineVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
  return target;
}

int AdvanceStateMachineVersion::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvanceStateMachineVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvanceStateMachineVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvanceStateMachineVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvanceStateMachineVersion::MergeFrom(const AdvanceStateMachineVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvanceStateMachineVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStateMachineVersion::CopyFrom(const AdvanceStateMachineVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStateMachineVersion::IsInitialized() const {

  return true;
}

void AdvanceStateMachineVersion::Swap(AdvanceStateMachineVersion* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvanceStateMachineVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceStateMachineVersion_descriptor_;
  metadata.reflection = AdvanceStateMachineVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateMachineCommand_Request::kOpenSessionFieldNumber;
const int StateMachineCommand_Request::kCloseSessionFieldNumber;
const int StateMachineCommand_Request::kTreeFieldNumber;
const int StateMachineCommand_Request::kAdvanceVersionFieldNumber;
#endif  // !_MSC_VER

StateMachineCommand_Request::StateMachineCommand_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.StateMachineCommand.Request)
}

void StateMachineCommand_Request::InitAsDefaultInstance() {
  open_session_ = const_cast< ::LogCabin::Protocol::Client::OpenSession_Request*>(&::LogCabin::Protocol::Client::OpenSession_Request::default_instance());
  close_session_ = const_cast< ::LogCabin::Protocol::Client::CloseSession_Request*>(&::LogCabin::Protocol::Client::CloseSession_Request::default_instance());
  tree_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Request*>(&::LogCabin::Protocol::Client::ReadWriteTree_Request::default_instance());
  advance_version_ = const_cast< ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request*>(&::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request::default_instance());
}

StateMachineCommand_Request::StateMachineCommand_Request(const StateMachineCommand_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.StateMachineCommand.Request)
}

void StateMachineCommand_Request::SharedCtor() {
  _cached_size_ = 0;
  open_session_ = NULL;
  close_session_ = NULL;
  tree_ = NULL;
  advance_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineCommand_Request::~StateMachineCommand_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.StateMachineCommand.Request)
  SharedDtor();
}

void StateMachineCommand_Request::SharedDtor() {
  if (this != default_instance_) {
    delete open_session_;
    delete close_session_;
    delete tree_;
    delete advance_version_;
  }
}

void StateMachineCommand_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineCommand_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineCommand_Request_descriptor_;
}

const StateMachineCommand_Request& StateMachineCommand_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

StateMachineCommand_Request* StateMachineCommand_Request::default_instance_ = NULL;

StateMachineCommand_Request* StateMachineCommand_Request::New() const {
  return new StateMachineCommand_Request;
}

void StateMachineCommand_Request::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_open_session()) {
      if (open_session_ != NULL) open_session_->::LogCabin::Protocol::Client::OpenSession_Request::Clear();
    }
    if (has_close_session()) {
      if (close_session_ != NULL) close_session_->::LogCabin::Protocol::Client::CloseSession_Request::Clear();
    }
    if (has_tree()) {
      if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadWriteTree_Request::Clear();
    }
    if (has_advance_version()) {
      if (advance_version_ != NULL) advance_version_->::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineCommand_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.StateMachineCommand.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tree;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 2;
      case 2: {
        if (tag == 18) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_advance_version;
        break;
      }

      // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request advance_version = 3;
      case 3: {
        if (tag == 26) {
         parse_advance_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advance_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_close_session;
        break;
      }

      // optional .LogCabin.Protocol.Client.CloseSession.Request close_session = 4;
      case 4: {
        if (tag == 34) {
         parse_close_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.StateMachineCommand.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.StateMachineCommand.Request)
  return false;
#undef DO_
}

void StateMachineCommand_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.StateMachineCommand.Request)
  // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 1;
  if (has_open_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->open_session(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 2;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tree(), output);
  }

  // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request advance_version = 3;
  if (has_advance_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->advance_version(), output);
  }

  // optional .LogCabin.Protocol.Client.CloseSession.Request close_session = 4;
  if (has_close_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->close_session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.StateMachineCommand.Request)
}

::google::protobuf::uint8* StateMachineCommand_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.StateMachineCommand.Request)
  // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 1;
  if (has_open_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->open_session(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 2;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tree(), target);
  }

  // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request advance_version = 3;
  if (has_advance_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->advance_version(), target);
  }

  // optional .LogCabin.Protocol.Client.CloseSession.Request close_session = 4;
  if (has_close_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->close_session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.StateMachineCommand.Request)
  return target;
}

int StateMachineCommand_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 1;
    if (has_open_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_session());
    }

    // optional .LogCabin.Protocol.Client.CloseSession.Request close_session = 4;
    if (has_close_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close_session());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 2;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

    // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request advance_version = 3;
    if (has_advance_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advance_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineCommand_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineCommand_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineCommand_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineCommand_Request::MergeFrom(const StateMachineCommand_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_session()) {
      mutable_open_session()->::LogCabin::Protocol::Client::OpenSession_Request::MergeFrom(from.open_session());
    }
    if (from.has_close_session()) {
      mutable_close_session()->::LogCabin::Protocol::Client::CloseSession_Request::MergeFrom(from.close_session());
    }
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::Client::ReadWriteTree_Request::MergeFrom(from.tree());
    }
    if (from.has_advance_version()) {
      mutable_advance_version()->::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request::MergeFrom(from.advance_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineCommand_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineCommand_Request::CopyFrom(const StateMachineCommand_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineCommand_Request::IsInitialized() const {

  if (has_close_session()) {
    if (!this->close_session().IsInitialized()) return false;
  }
  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  if (has_advance_version()) {
    if (!this->advance_version().IsInitialized()) return false;
  }
  return true;
}

void StateMachineCommand_Request::Swap(StateMachineCommand_Request* other) {
  if (other != this) {
    std::swap(open_session_, other->open_session_);
    std::swap(close_session_, other->close_session_);
    std::swap(tree_, other->tree_);
    std::swap(advance_version_, other->advance_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineCommand_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineCommand_Request_descriptor_;
  metadata.reflection = StateMachineCommand_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StateMachineCommand_Response::kOpenSessionFieldNumber;
const int StateMachineCommand_Response::kCloseSessionFieldNumber;
const int StateMachineCommand_Response::kTreeFieldNumber;
const int StateMachineCommand_Response::kAdvanceVersionFieldNumber;
#endif  // !_MSC_VER

StateMachineCommand_Response::StateMachineCommand_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.StateMachineCommand.Response)
}

void StateMachineCommand_Response::InitAsDefaultInstance() {
  open_session_ = const_cast< ::LogCabin::Protocol::Client::OpenSession_Response*>(&::LogCabin::Protocol::Client::OpenSession_Response::default_instance());
  close_session_ = const_cast< ::LogCabin::Protocol::Client::CloseSession_Response*>(&::LogCabin::Protocol::Client::CloseSession_Response::default_instance());
  tree_ = const_cast< ::LogCabin::Protocol::Client::ReadWriteTree_Response*>(&::LogCabin::Protocol::Client::ReadWriteTree_Response::default_instance());
  advance_version_ = const_cast< ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response*>(&::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response::default_instance());
}

StateMachineCommand_Response::StateMachineCommand_Response(const StateMachineCommand_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.StateMachineCommand.Response)
}

void StateMachineCommand_Response::SharedCtor() {
  _cached_size_ = 0;
  open_session_ = NULL;
  close_session_ = NULL;
  tree_ = NULL;
  advance_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineCommand_Response::~StateMachineCommand_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.StateMachineCommand.Response)
  SharedDtor();
}

void StateMachineCommand_Response::SharedDtor() {
  if (this != default_instance_) {
    delete open_session_;
    delete close_session_;
    delete tree_;
    delete advance_version_;
  }
}

void StateMachineCommand_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineCommand_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineCommand_Response_descriptor_;
}

const StateMachineCommand_Response& StateMachineCommand_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

StateMachineCommand_Response* StateMachineCommand_Response::default_instance_ = NULL;

StateMachineCommand_Response* StateMachineCommand_Response::New() const {
  return new StateMachineCommand_Response;
}

void StateMachineCommand_Response::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_open_session()) {
      if (open_session_ != NULL) open_session_->::LogCabin::Protocol::Client::OpenSession_Response::Clear();
    }
    if (has_close_session()) {
      if (close_session_ != NULL) close_session_->::LogCabin::Protocol::Client::CloseSession_Response::Clear();
    }
    if (has_tree()) {
      if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadWriteTree_Response::Clear();
    }
    if (has_advance_version()) {
      if (advance_version_ != NULL) advance_version_->::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineCommand_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.StateMachineCommand.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tree;
        break;
      }

      // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 2;
      case 2: {
        if (tag == 18) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_advance_version;
        break;
      }

      // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response advance_version = 3;
      case 3: {
        if (tag == 26) {
         parse_advance_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advance_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_close_session;
        break;
      }

      // optional .LogCabin.Protocol.Client.CloseSession.Response close_session = 4;
      case 4: {
        if (tag == 34) {
         parse_close_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.StateMachineCommand.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.StateMachineCommand.Response)
  return false;
#undef DO_
}

void StateMachineCommand_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.StateMachineCommand.Response)
  // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 1;
  if (has_open_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->open_session(), output);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 2;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tree(), output);
  }

  // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response advance_version = 3;
  if (has_advance_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->advance_version(), output);
  }

  // optional .LogCabin.Protocol.Client.CloseSession.Response close_session = 4;
  if (has_close_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->close_session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.StateMachineCommand.Response)
}

::google::protobuf::uint8* StateMachineCommand_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.StateMachineCommand.Response)
  // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 1;
  if (has_open_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->open_session(), target);
  }

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 2;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tree(), target);
  }

  // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response advance_version = 3;
  if (has_advance_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->advance_version(), target);
  }

  // optional .LogCabin.Protocol.Client.CloseSession.Response close_session = 4;
  if (has_close_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->close_session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.StateMachineCommand.Response)
  return target;
}

int StateMachineCommand_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 1;
    if (has_open_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_session());
    }

    // optional .LogCabin.Protocol.Client.CloseSession.Response close_session = 4;
    if (has_close_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close_session());
    }

    // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 2;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

    // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response advance_version = 3;
    if (has_advance_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advance_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineCommand_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineCommand_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineCommand_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineCommand_Response::MergeFrom(const StateMachineCommand_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_session()) {
      mutable_open_session()->::LogCabin::Protocol::Client::OpenSession_Response::MergeFrom(from.open_session());
    }
    if (from.has_close_session()) {
      mutable_close_session()->::LogCabin::Protocol::Client::CloseSession_Response::MergeFrom(from.close_session());
    }
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::Client::ReadWriteTree_Response::MergeFrom(from.tree());
    }
    if (from.has_advance_version()) {
      mutable_advance_version()->::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response::MergeFrom(from.advance_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineCommand_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineCommand_Response::CopyFrom(const StateMachineCommand_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineCommand_Response::IsInitialized() const {

  if (has_open_session()) {
    if (!this->open_session().IsInitialized()) return false;
  }
  if (has_advance_version()) {
    if (!this->advance_version().IsInitialized()) return false;
  }
  return true;
}

void StateMachineCommand_Response::Swap(StateMachineCommand_Response* other) {
  if (other != this) {
    std::swap(open_session_, other->open_session_);
    std::swap(close_session_, other->close_session_);
    std::swap(tree_, other->tree_);
    std::swap(advance_version_, other->advance_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineCommand_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineCommand_Response_descriptor_;
  metadata.reflection = StateMachineCommand_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

StateMachineCommand::StateMachineCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.StateMachineCommand)
}

void StateMachineCommand::InitAsDefaultInstance() {
}

StateMachineCommand::StateMachineCommand(const StateMachineCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.StateMachineCommand)
}

void StateMachineCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineCommand::~StateMachineCommand() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.StateMachineCommand)
  SharedDtor();
}

void StateMachineCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateMachineCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineCommand_descriptor_;
}

const StateMachineCommand& StateMachineCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

StateMachineCommand* StateMachineCommand::default_instance_ = NULL;

StateMachineCommand* StateMachineCommand::New() const {
  return new StateMachineCommand;
}

void StateMachineCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.StateMachineCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.StateMachineCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.StateMachineCommand)
  return false;
#undef DO_
}

void StateMachineCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.StateMachineCommand)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.StateMachineCommand)
}

::google::protobuf::uint8* StateMachineCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.StateMachineCommand)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.StateMachineCommand)
  return target;
}

int StateMachineCommand::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineCommand::MergeFrom(const StateMachineCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineCommand::CopyFrom(const StateMachineCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineCommand::IsInitialized() const {

  return true;
}

void StateMachineCommand::Swap(StateMachineCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineCommand_descriptor_;
  metadata.reflection = StateMachineCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateMachineQuery_Request::kTreeFieldNumber;
#endif  // !_MSC_VER

StateMachineQuery_Request::StateMachineQuery_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.StateMachineQuery.Request)
}

void StateMachineQuery_Request::InitAsDefaultInstance() {
  tree_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Request*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Request::default_instance());
}

StateMachineQuery_Request::StateMachineQuery_Request(const StateMachineQuery_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.StateMachineQuery.Request)
}

void StateMachineQuery_Request::SharedCtor() {
  _cached_size_ = 0;
  tree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineQuery_Request::~StateMachineQuery_Request() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.StateMachineQuery.Request)
  SharedDtor();
}

void StateMachineQuery_Request::SharedDtor() {
  if (this != default_instance_) {
    delete tree_;
  }
}

void StateMachineQuery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineQuery_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineQuery_Request_descriptor_;
}

const StateMachineQuery_Request& StateMachineQuery_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

StateMachineQuery_Request* StateMachineQuery_Request::default_instance_ = NULL;

StateMachineQuery_Request* StateMachineQuery_Request::New() const {
  return new StateMachineQuery_Request;
}

void StateMachineQuery_Request::Clear() {
  if (has_tree()) {
    if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadOnlyTree_Request::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.StateMachineQuery.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request tree = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.StateMachineQuery.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.StateMachineQuery.Request)
  return false;
#undef DO_
}

void StateMachineQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.StateMachineQuery.Request)
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request tree = 1;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.StateMachineQuery.Request)
}

::google::protobuf::uint8* StateMachineQuery_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.StateMachineQuery.Request)
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request tree = 1;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.StateMachineQuery.Request)
  return target;
}

int StateMachineQuery_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request tree = 1;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineQuery_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineQuery_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineQuery_Request::MergeFrom(const StateMachineQuery_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::Client::ReadOnlyTree_Request::MergeFrom(from.tree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineQuery_Request::CopyFrom(const StateMachineQuery_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineQuery_Request::IsInitialized() const {

  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  return true;
}

void StateMachineQuery_Request::Swap(StateMachineQuery_Request* other) {
  if (other != this) {
    std::swap(tree_, other->tree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineQuery_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineQuery_Request_descriptor_;
  metadata.reflection = StateMachineQuery_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StateMachineQuery_Response::kTreeFieldNumber;
#endif  // !_MSC_VER

StateMachineQuery_Response::StateMachineQuery_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.StateMachineQuery.Response)
}

void StateMachineQuery_Response::InitAsDefaultInstance() {
  tree_ = const_cast< ::LogCabin::Protocol::Client::ReadOnlyTree_Response*>(&::LogCabin::Protocol::Client::ReadOnlyTree_Response::default_instance());
}

StateMachineQuery_Response::StateMachineQuery_Response(const StateMachineQuery_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.StateMachineQuery.Response)
}

void StateMachineQuery_Response::SharedCtor() {
  _cached_size_ = 0;
  tree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineQuery_Response::~StateMachineQuery_Response() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.StateMachineQuery.Response)
  SharedDtor();
}

void StateMachineQuery_Response::SharedDtor() {
  if (this != default_instance_) {
    delete tree_;
  }
}

void StateMachineQuery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineQuery_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineQuery_Response_descriptor_;
}

const StateMachineQuery_Response& StateMachineQuery_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

StateMachineQuery_Response* StateMachineQuery_Response::default_instance_ = NULL;

StateMachineQuery_Response* StateMachineQuery_Response::New() const {
  return new StateMachineQuery_Response;
}

void StateMachineQuery_Response::Clear() {
  if (has_tree()) {
    if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadOnlyTree_Response::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.StateMachineQuery.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response tree = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.StateMachineQuery.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.StateMachineQuery.Response)
  return false;
#undef DO_
}

void StateMachineQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.StateMachineQuery.Response)
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response tree = 1;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.StateMachineQuery.Response)
}

::google::protobuf::uint8* StateMachineQuery_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.StateMachineQuery.Response)
  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response tree = 1;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.StateMachineQuery.Response)
  return target;
}

int StateMachineQuery_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response tree = 1;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineQuery_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineQuery_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineQuery_Response::MergeFrom(const StateMachineQuery_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tree()) {
      mutable_tree()->::LogCabin::Protocol::Client::ReadOnlyTree_Response::MergeFrom(from.tree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineQuery_Response::CopyFrom(const StateMachineQuery_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineQuery_Response::IsInitialized() const {

  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  return true;
}

void StateMachineQuery_Response::Swap(StateMachineQuery_Response* other) {
  if (other != this) {
    std::swap(tree_, other->tree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineQuery_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineQuery_Response_descriptor_;
  metadata.reflection = StateMachineQuery_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

StateMachineQuery::StateMachineQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogCabin.Protocol.Client.StateMachineQuery)
}

void StateMachineQuery::InitAsDefaultInstance() {
}

StateMachineQuery::StateMachineQuery(const StateMachineQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogCabin.Protocol.Client.StateMachineQuery)
}

void StateMachineQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineQuery::~StateMachineQuery() {
  // @@protoc_insertion_point(destructor:LogCabin.Protocol.Client.StateMachineQuery)
  SharedDtor();
}

void StateMachineQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateMachineQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineQuery_descriptor_;
}

const StateMachineQuery& StateMachineQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  return *default_instance_;
}

StateMachineQuery* StateMachineQuery::default_instance_ = NULL;

StateMachineQuery* StateMachineQuery::New() const {
  return new StateMachineQuery;
}

void StateMachineQuery::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogCabin.Protocol.Client.StateMachineQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LogCabin.Protocol.Client.StateMachineQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogCabin.Protocol.Client.StateMachineQuery)
  return false;
#undef DO_
}

void StateMachineQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogCabin.Protocol.Client.StateMachineQuery)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogCabin.Protocol.Client.StateMachineQuery)
}

::google::protobuf::uint8* StateMachineQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogCabin.Protocol.Client.StateMachineQuery)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogCabin.Protocol.Client.StateMachineQuery)
  return target;
}

int StateMachineQuery::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineQuery::MergeFrom(const StateMachineQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineQuery::CopyFrom(const StateMachineQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineQuery::IsInitialized() const {

  return true;
}

void StateMachineQuery::Swap(StateMachineQuery* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineQuery_descriptor_;
  metadata.reflection = StateMachineQuery_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client
}  // namespace Protocol
}  // namespace LogCabin

// @@protoc_insertion_point(global_scope)
