// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol/Client/Client.proto

#ifndef PROTOBUF_Protocol_2fClient_2fClient_2eproto__INCLUDED
#define PROTOBUF_Protocol_2fClient_2fClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LogCabin {
namespace Protocol {
namespace Client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

class Error;
class ExactlyOnceRPCInfo;
class VerifyRecipient;
class VerifyRecipient_Request;
class VerifyRecipient_Response;
class OpenSession;
class OpenSession_Request;
class OpenSession_Response;
class CloseSession;
class CloseSession_Request;
class CloseSession_Response;
class Server;
class GetConfiguration;
class GetConfiguration_Request;
class GetConfiguration_Response;
class SetConfiguration;
class SetConfiguration_Request;
class SetConfiguration_Response;
class SetConfiguration_Response_OK;
class SetConfiguration_Response_ConfigurationChanged;
class SetConfiguration_Response_ConfigurationBad;
class TreeCondition;
class ReadOnlyTree;
class ReadOnlyTree_Request;
class ReadOnlyTree_Request_ListDirectory;
class ReadOnlyTree_Request_Read;
class ReadOnlyTree_Response;
class ReadOnlyTree_Response_ListDirectory;
class ReadOnlyTree_Response_Read;
class ReadWriteTree;
class ReadWriteTree_Request;
class ReadWriteTree_Request_MakeDirectory;
class ReadWriteTree_Request_RemoveDirectory;
class ReadWriteTree_Request_Write;
class ReadWriteTree_Request_RemoveFile;
class ReadWriteTree_Response;
class GetServerInfo;
class GetServerInfo_Request;
class GetServerInfo_Response;
class AdvanceStateMachineVersion;
class AdvanceStateMachineVersion_Request;
class AdvanceStateMachineVersion_Response;
class StateMachineCommand;
class StateMachineCommand_Request;
class StateMachineCommand_Response;
class StateMachineQuery;
class StateMachineQuery_Request;
class StateMachineQuery_Response;

enum Error_Code {
  Error_Code_UNKNOWN = 0,
  Error_Code_NOT_LEADER = 1
};
bool Error_Code_IsValid(int value);
const Error_Code Error_Code_Code_MIN = Error_Code_UNKNOWN;
const Error_Code Error_Code_Code_MAX = Error_Code_NOT_LEADER;
const int Error_Code_Code_ARRAYSIZE = Error_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor();
inline const ::std::string& Error_Code_Name(Error_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Code_descriptor(), value);
}
inline bool Error_Code_Parse(
    const ::std::string& name, Error_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
enum OpCode {
  STATE_MACHINE_QUERY = 1,
  STATE_MACHINE_COMMAND = 2,
  VERIFY_RECIPIENT = 3,
  GET_CONFIGURATION = 4,
  SET_CONFIGURATION = 5,
  GET_SERVER_STATS = 6,
  GET_SERVER_INFO = 7
};
bool OpCode_IsValid(int value);
const OpCode OpCode_MIN = STATE_MACHINE_QUERY;
const OpCode OpCode_MAX = GET_SERVER_INFO;
const int OpCode_ARRAYSIZE = OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpCode_descriptor();
inline const ::std::string& OpCode_Name(OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpCode_descriptor(), value);
}
inline bool OpCode_Parse(
    const ::std::string& name, OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpCode>(
    OpCode_descriptor(), name, value);
}
enum Status {
  UNKNOWN = 10,
  OK = 0,
  INVALID_ARGUMENT = 1,
  LOOKUP_ERROR = 2,
  TYPE_ERROR = 3,
  CONDITION_NOT_MET = 4,
  TIMEOUT = 5,
  SESSION_EXPIRED = 6
};
bool Status_IsValid(int value);
const Status Status_MIN = OK;
const Status Status_MAX = UNKNOWN;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Error_Code Code;
  static const Code UNKNOWN = Error_Code_UNKNOWN;
  static const Code NOT_LEADER = Error_Code_NOT_LEADER;
  static inline bool Code_IsValid(int value) {
    return Error_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Error_Code_Code_MIN;
  static const Code Code_MAX =
    Error_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Error_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Error_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Error_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Error_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.Error.Code error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::LogCabin::Protocol::Client::Error_Code error_code() const;
  inline void set_error_code(::LogCabin::Protocol::Client::Error_Code value);

  // optional string leader_hint = 2;
  inline bool has_leader_hint() const;
  inline void clear_leader_hint();
  static const int kLeaderHintFieldNumber = 2;
  inline const ::std::string& leader_hint() const;
  inline void set_leader_hint(const ::std::string& value);
  inline void set_leader_hint(const char* value);
  inline void set_leader_hint(const char* value, size_t size);
  inline ::std::string* mutable_leader_hint();
  inline ::std::string* release_leader_hint();
  inline void set_allocated_leader_hint(::std::string* leader_hint);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.Error)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_leader_hint();
  inline void clear_has_leader_hint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* leader_hint_;
  int error_code_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class ExactlyOnceRPCInfo : public ::google::protobuf::Message {
 public:
  ExactlyOnceRPCInfo();
  virtual ~ExactlyOnceRPCInfo();

  ExactlyOnceRPCInfo(const ExactlyOnceRPCInfo& from);

  inline ExactlyOnceRPCInfo& operator=(const ExactlyOnceRPCInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExactlyOnceRPCInfo& default_instance();

  void Swap(ExactlyOnceRPCInfo* other);

  // implements Message ----------------------------------------------

  ExactlyOnceRPCInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExactlyOnceRPCInfo& from);
  void MergeFrom(const ExactlyOnceRPCInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline ::google::protobuf::uint64 client_id() const;
  inline void set_client_id(::google::protobuf::uint64 value);

  // required uint64 first_outstanding_rpc = 2;
  inline bool has_first_outstanding_rpc() const;
  inline void clear_first_outstanding_rpc();
  static const int kFirstOutstandingRpcFieldNumber = 2;
  inline ::google::protobuf::uint64 first_outstanding_rpc() const;
  inline void set_first_outstanding_rpc(::google::protobuf::uint64 value);

  // required uint64 rpc_number = 3;
  inline bool has_rpc_number() const;
  inline void clear_rpc_number();
  static const int kRpcNumberFieldNumber = 3;
  inline ::google::protobuf::uint64 rpc_number() const;
  inline void set_rpc_number(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ExactlyOnceRPCInfo)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_first_outstanding_rpc();
  inline void clear_has_first_outstanding_rpc();
  inline void set_has_rpc_number();
  inline void clear_has_rpc_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 client_id_;
  ::google::protobuf::uint64 first_outstanding_rpc_;
  ::google::protobuf::uint64 rpc_number_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ExactlyOnceRPCInfo* default_instance_;
};
// -------------------------------------------------------------------

class VerifyRecipient_Request : public ::google::protobuf::Message {
 public:
  VerifyRecipient_Request();
  virtual ~VerifyRecipient_Request();

  VerifyRecipient_Request(const VerifyRecipient_Request& from);

  inline VerifyRecipient_Request& operator=(const VerifyRecipient_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyRecipient_Request& default_instance();

  void Swap(VerifyRecipient_Request* other);

  // implements Message ----------------------------------------------

  VerifyRecipient_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyRecipient_Request& from);
  void MergeFrom(const VerifyRecipient_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cluster_uuid = 1;
  inline bool has_cluster_uuid() const;
  inline void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 1;
  inline const ::std::string& cluster_uuid() const;
  inline void set_cluster_uuid(const ::std::string& value);
  inline void set_cluster_uuid(const char* value);
  inline void set_cluster_uuid(const char* value, size_t size);
  inline ::std::string* mutable_cluster_uuid();
  inline ::std::string* release_cluster_uuid();
  inline void set_allocated_cluster_uuid(::std::string* cluster_uuid);

  // optional uint64 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.VerifyRecipient.Request)
 private:
  inline void set_has_cluster_uuid();
  inline void clear_has_cluster_uuid();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cluster_uuid_;
  ::google::protobuf::uint64 server_id_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static VerifyRecipient_Request* default_instance_;
};
// -------------------------------------------------------------------

class VerifyRecipient_Response : public ::google::protobuf::Message {
 public:
  VerifyRecipient_Response();
  virtual ~VerifyRecipient_Response();

  VerifyRecipient_Response(const VerifyRecipient_Response& from);

  inline VerifyRecipient_Response& operator=(const VerifyRecipient_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyRecipient_Response& default_instance();

  void Swap(VerifyRecipient_Response* other);

  // implements Message ----------------------------------------------

  VerifyRecipient_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyRecipient_Response& from);
  void MergeFrom(const VerifyRecipient_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cluster_uuid = 1;
  inline bool has_cluster_uuid() const;
  inline void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 1;
  inline const ::std::string& cluster_uuid() const;
  inline void set_cluster_uuid(const ::std::string& value);
  inline void set_cluster_uuid(const char* value);
  inline void set_cluster_uuid(const char* value, size_t size);
  inline ::std::string* mutable_cluster_uuid();
  inline ::std::string* release_cluster_uuid();
  inline void set_allocated_cluster_uuid(::std::string* cluster_uuid);

  // optional uint64 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // optional bool ok = 3;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 3;
  inline bool ok() const;
  inline void set_ok(bool value);

  // optional string error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.VerifyRecipient.Response)
 private:
  inline void set_has_cluster_uuid();
  inline void clear_has_cluster_uuid();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ok();
  inline void clear_has_ok();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cluster_uuid_;
  ::google::protobuf::uint64 server_id_;
  ::std::string* error_;
  bool ok_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static VerifyRecipient_Response* default_instance_;
};
// -------------------------------------------------------------------

class VerifyRecipient : public ::google::protobuf::Message {
 public:
  VerifyRecipient();
  virtual ~VerifyRecipient();

  VerifyRecipient(const VerifyRecipient& from);

  inline VerifyRecipient& operator=(const VerifyRecipient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyRecipient& default_instance();

  void Swap(VerifyRecipient* other);

  // implements Message ----------------------------------------------

  VerifyRecipient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyRecipient& from);
  void MergeFrom(const VerifyRecipient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VerifyRecipient_Request Request;
  typedef VerifyRecipient_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.VerifyRecipient)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static VerifyRecipient* default_instance_;
};
// -------------------------------------------------------------------

class OpenSession_Request : public ::google::protobuf::Message {
 public:
  OpenSession_Request();
  virtual ~OpenSession_Request();

  OpenSession_Request(const OpenSession_Request& from);

  inline OpenSession_Request& operator=(const OpenSession_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSession_Request& default_instance();

  void Swap(OpenSession_Request* other);

  // implements Message ----------------------------------------------

  OpenSession_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenSession_Request& from);
  void MergeFrom(const OpenSession_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.OpenSession.Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static OpenSession_Request* default_instance_;
};
// -------------------------------------------------------------------

class OpenSession_Response : public ::google::protobuf::Message {
 public:
  OpenSession_Response();
  virtual ~OpenSession_Response();

  OpenSession_Response(const OpenSession_Response& from);

  inline OpenSession_Response& operator=(const OpenSession_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSession_Response& default_instance();

  void Swap(OpenSession_Response* other);

  // implements Message ----------------------------------------------

  OpenSession_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenSession_Response& from);
  void MergeFrom(const OpenSession_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline ::google::protobuf::uint64 client_id() const;
  inline void set_client_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.OpenSession.Response)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 client_id_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static OpenSession_Response* default_instance_;
};
// -------------------------------------------------------------------

class OpenSession : public ::google::protobuf::Message {
 public:
  OpenSession();
  virtual ~OpenSession();

  OpenSession(const OpenSession& from);

  inline OpenSession& operator=(const OpenSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSession& default_instance();

  void Swap(OpenSession* other);

  // implements Message ----------------------------------------------

  OpenSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenSession& from);
  void MergeFrom(const OpenSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OpenSession_Request Request;
  typedef OpenSession_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.OpenSession)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static OpenSession* default_instance_;
};
// -------------------------------------------------------------------

class CloseSession_Request : public ::google::protobuf::Message {
 public:
  CloseSession_Request();
  virtual ~CloseSession_Request();

  CloseSession_Request(const CloseSession_Request& from);

  inline CloseSession_Request& operator=(const CloseSession_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseSession_Request& default_instance();

  void Swap(CloseSession_Request* other);

  // implements Message ----------------------------------------------

  CloseSession_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseSession_Request& from);
  void MergeFrom(const CloseSession_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline ::google::protobuf::uint64 client_id() const;
  inline void set_client_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.CloseSession.Request)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 client_id_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static CloseSession_Request* default_instance_;
};
// -------------------------------------------------------------------

class CloseSession_Response : public ::google::protobuf::Message {
 public:
  CloseSession_Response();
  virtual ~CloseSession_Response();

  CloseSession_Response(const CloseSession_Response& from);

  inline CloseSession_Response& operator=(const CloseSession_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseSession_Response& default_instance();

  void Swap(CloseSession_Response* other);

  // implements Message ----------------------------------------------

  CloseSession_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseSession_Response& from);
  void MergeFrom(const CloseSession_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.CloseSession.Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static CloseSession_Response* default_instance_;
};
// -------------------------------------------------------------------

class CloseSession : public ::google::protobuf::Message {
 public:
  CloseSession();
  virtual ~CloseSession();

  CloseSession(const CloseSession& from);

  inline CloseSession& operator=(const CloseSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseSession& default_instance();

  void Swap(CloseSession* other);

  // implements Message ----------------------------------------------

  CloseSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseSession& from);
  void MergeFrom(const CloseSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CloseSession_Request Request;
  typedef CloseSession_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.CloseSession)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static CloseSession* default_instance_;
};
// -------------------------------------------------------------------

class Server : public ::google::protobuf::Message {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();

  void Swap(Server* other);

  // implements Message ----------------------------------------------

  Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required string addresses = 2;
  inline bool has_addresses() const;
  inline void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  inline const ::std::string& addresses() const;
  inline void set_addresses(const ::std::string& value);
  inline void set_addresses(const char* value);
  inline void set_addresses(const char* value, size_t size);
  inline ::std::string* mutable_addresses();
  inline ::std::string* release_addresses();
  inline void set_allocated_addresses(::std::string* addresses);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.Server)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_addresses();
  inline void clear_has_addresses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::std::string* addresses_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// -------------------------------------------------------------------

class GetConfiguration_Request : public ::google::protobuf::Message {
 public:
  GetConfiguration_Request();
  virtual ~GetConfiguration_Request();

  GetConfiguration_Request(const GetConfiguration_Request& from);

  inline GetConfiguration_Request& operator=(const GetConfiguration_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConfiguration_Request& default_instance();

  void Swap(GetConfiguration_Request* other);

  // implements Message ----------------------------------------------

  GetConfiguration_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetConfiguration_Request& from);
  void MergeFrom(const GetConfiguration_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.GetConfiguration.Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static GetConfiguration_Request* default_instance_;
};
// -------------------------------------------------------------------

class GetConfiguration_Response : public ::google::protobuf::Message {
 public:
  GetConfiguration_Response();
  virtual ~GetConfiguration_Response();

  GetConfiguration_Response(const GetConfiguration_Response& from);

  inline GetConfiguration_Response& operator=(const GetConfiguration_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConfiguration_Response& default_instance();

  void Swap(GetConfiguration_Response* other);

  // implements Message ----------------------------------------------

  GetConfiguration_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetConfiguration_Response& from);
  void MergeFrom(const GetConfiguration_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated .LogCabin.Protocol.Client.Server servers = 2;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 2;
  inline const ::LogCabin::Protocol::Client::Server& servers(int index) const;
  inline ::LogCabin::Protocol::Client::Server* mutable_servers(int index);
  inline ::LogCabin::Protocol::Client::Server* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.GetConfiguration.Response)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server > servers_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static GetConfiguration_Response* default_instance_;
};
// -------------------------------------------------------------------

class GetConfiguration : public ::google::protobuf::Message {
 public:
  GetConfiguration();
  virtual ~GetConfiguration();

  GetConfiguration(const GetConfiguration& from);

  inline GetConfiguration& operator=(const GetConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConfiguration& default_instance();

  void Swap(GetConfiguration* other);

  // implements Message ----------------------------------------------

  GetConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetConfiguration& from);
  void MergeFrom(const GetConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetConfiguration_Request Request;
  typedef GetConfiguration_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.GetConfiguration)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static GetConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class SetConfiguration_Request : public ::google::protobuf::Message {
 public:
  SetConfiguration_Request();
  virtual ~SetConfiguration_Request();

  SetConfiguration_Request(const SetConfiguration_Request& from);

  inline SetConfiguration_Request& operator=(const SetConfiguration_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfiguration_Request& default_instance();

  void Swap(SetConfiguration_Request* other);

  // implements Message ----------------------------------------------

  SetConfiguration_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetConfiguration_Request& from);
  void MergeFrom(const SetConfiguration_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 old_id = 1;
  inline bool has_old_id() const;
  inline void clear_old_id();
  static const int kOldIdFieldNumber = 1;
  inline ::google::protobuf::uint64 old_id() const;
  inline void set_old_id(::google::protobuf::uint64 value);

  // repeated .LogCabin.Protocol.Client.Server new_servers = 2;
  inline int new_servers_size() const;
  inline void clear_new_servers();
  static const int kNewServersFieldNumber = 2;
  inline const ::LogCabin::Protocol::Client::Server& new_servers(int index) const;
  inline ::LogCabin::Protocol::Client::Server* mutable_new_servers(int index);
  inline ::LogCabin::Protocol::Client::Server* add_new_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >&
      new_servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >*
      mutable_new_servers();

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.SetConfiguration.Request)
 private:
  inline void set_has_old_id();
  inline void clear_has_old_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 old_id_;
  ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server > new_servers_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static SetConfiguration_Request* default_instance_;
};
// -------------------------------------------------------------------

class SetConfiguration_Response_OK : public ::google::protobuf::Message {
 public:
  SetConfiguration_Response_OK();
  virtual ~SetConfiguration_Response_OK();

  SetConfiguration_Response_OK(const SetConfiguration_Response_OK& from);

  inline SetConfiguration_Response_OK& operator=(const SetConfiguration_Response_OK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfiguration_Response_OK& default_instance();

  void Swap(SetConfiguration_Response_OK* other);

  // implements Message ----------------------------------------------

  SetConfiguration_Response_OK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetConfiguration_Response_OK& from);
  void MergeFrom(const SetConfiguration_Response_OK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.SetConfiguration.Response.OK)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static SetConfiguration_Response_OK* default_instance_;
};
// -------------------------------------------------------------------

class SetConfiguration_Response_ConfigurationChanged : public ::google::protobuf::Message {
 public:
  SetConfiguration_Response_ConfigurationChanged();
  virtual ~SetConfiguration_Response_ConfigurationChanged();

  SetConfiguration_Response_ConfigurationChanged(const SetConfiguration_Response_ConfigurationChanged& from);

  inline SetConfiguration_Response_ConfigurationChanged& operator=(const SetConfiguration_Response_ConfigurationChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfiguration_Response_ConfigurationChanged& default_instance();

  void Swap(SetConfiguration_Response_ConfigurationChanged* other);

  // implements Message ----------------------------------------------

  SetConfiguration_Response_ConfigurationChanged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetConfiguration_Response_ConfigurationChanged& from);
  void MergeFrom(const SetConfiguration_Response_ConfigurationChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static SetConfiguration_Response_ConfigurationChanged* default_instance_;
};
// -------------------------------------------------------------------

class SetConfiguration_Response_ConfigurationBad : public ::google::protobuf::Message {
 public:
  SetConfiguration_Response_ConfigurationBad();
  virtual ~SetConfiguration_Response_ConfigurationBad();

  SetConfiguration_Response_ConfigurationBad(const SetConfiguration_Response_ConfigurationBad& from);

  inline SetConfiguration_Response_ConfigurationBad& operator=(const SetConfiguration_Response_ConfigurationBad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfiguration_Response_ConfigurationBad& default_instance();

  void Swap(SetConfiguration_Response_ConfigurationBad* other);

  // implements Message ----------------------------------------------

  SetConfiguration_Response_ConfigurationBad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetConfiguration_Response_ConfigurationBad& from);
  void MergeFrom(const SetConfiguration_Response_ConfigurationBad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
  inline int bad_servers_size() const;
  inline void clear_bad_servers();
  static const int kBadServersFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::Server& bad_servers(int index) const;
  inline ::LogCabin::Protocol::Client::Server* mutable_bad_servers(int index);
  inline ::LogCabin::Protocol::Client::Server* add_bad_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >&
      bad_servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >*
      mutable_bad_servers();

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server > bad_servers_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static SetConfiguration_Response_ConfigurationBad* default_instance_;
};
// -------------------------------------------------------------------

class SetConfiguration_Response : public ::google::protobuf::Message {
 public:
  SetConfiguration_Response();
  virtual ~SetConfiguration_Response();

  SetConfiguration_Response(const SetConfiguration_Response& from);

  inline SetConfiguration_Response& operator=(const SetConfiguration_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfiguration_Response& default_instance();

  void Swap(SetConfiguration_Response* other);

  // implements Message ----------------------------------------------

  SetConfiguration_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetConfiguration_Response& from);
  void MergeFrom(const SetConfiguration_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SetConfiguration_Response_OK OK;
  typedef SetConfiguration_Response_ConfigurationChanged ConfigurationChanged;
  typedef SetConfiguration_Response_ConfigurationBad ConfigurationBad;

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
  inline bool has_ok() const;
  inline void clear_ok();
  static const int kOkFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::SetConfiguration_Response_OK& ok() const;
  inline ::LogCabin::Protocol::Client::SetConfiguration_Response_OK* mutable_ok();
  inline ::LogCabin::Protocol::Client::SetConfiguration_Response_OK* release_ok();
  inline void set_allocated_ok(::LogCabin::Protocol::Client::SetConfiguration_Response_OK* ok);

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
  inline bool has_configuration_changed() const;
  inline void clear_configuration_changed();
  static const int kConfigurationChangedFieldNumber = 2;
  inline const ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged& configuration_changed() const;
  inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* mutable_configuration_changed();
  inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* release_configuration_changed();
  inline void set_allocated_configuration_changed(::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* configuration_changed);

  // optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
  inline bool has_configuration_bad() const;
  inline void clear_configuration_bad();
  static const int kConfigurationBadFieldNumber = 3;
  inline const ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad& configuration_bad() const;
  inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* mutable_configuration_bad();
  inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* release_configuration_bad();
  inline void set_allocated_configuration_bad(::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* configuration_bad);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.SetConfiguration.Response)
 private:
  inline void set_has_ok();
  inline void clear_has_ok();
  inline void set_has_configuration_changed();
  inline void clear_has_configuration_changed();
  inline void set_has_configuration_bad();
  inline void clear_has_configuration_bad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::SetConfiguration_Response_OK* ok_;
  ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* configuration_changed_;
  ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* configuration_bad_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static SetConfiguration_Response* default_instance_;
};
// -------------------------------------------------------------------

class SetConfiguration : public ::google::protobuf::Message {
 public:
  SetConfiguration();
  virtual ~SetConfiguration();

  SetConfiguration(const SetConfiguration& from);

  inline SetConfiguration& operator=(const SetConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetConfiguration& default_instance();

  void Swap(SetConfiguration* other);

  // implements Message ----------------------------------------------

  SetConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetConfiguration& from);
  void MergeFrom(const SetConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SetConfiguration_Request Request;
  typedef SetConfiguration_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.SetConfiguration)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static SetConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class TreeCondition : public ::google::protobuf::Message {
 public:
  TreeCondition();
  virtual ~TreeCondition();

  TreeCondition(const TreeCondition& from);

  inline TreeCondition& operator=(const TreeCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeCondition& default_instance();

  void Swap(TreeCondition* other);

  // implements Message ----------------------------------------------

  TreeCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeCondition& from);
  void MergeFrom(const TreeCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.TreeCondition)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* contents_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static TreeCondition* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree_Request_ListDirectory : public ::google::protobuf::Message {
 public:
  ReadOnlyTree_Request_ListDirectory();
  virtual ~ReadOnlyTree_Request_ListDirectory();

  ReadOnlyTree_Request_ListDirectory(const ReadOnlyTree_Request_ListDirectory& from);

  inline ReadOnlyTree_Request_ListDirectory& operator=(const ReadOnlyTree_Request_ListDirectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree_Request_ListDirectory& default_instance();

  void Swap(ReadOnlyTree_Request_ListDirectory* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree_Request_ListDirectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree_Request_ListDirectory& from);
  void MergeFrom(const ReadOnlyTree_Request_ListDirectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree_Request_ListDirectory* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree_Request_Read : public ::google::protobuf::Message {
 public:
  ReadOnlyTree_Request_Read();
  virtual ~ReadOnlyTree_Request_Read();

  ReadOnlyTree_Request_Read(const ReadOnlyTree_Request_Read& from);

  inline ReadOnlyTree_Request_Read& operator=(const ReadOnlyTree_Request_Read& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree_Request_Read& default_instance();

  void Swap(ReadOnlyTree_Request_Read* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree_Request_Read* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree_Request_Read& from);
  void MergeFrom(const ReadOnlyTree_Request_Read& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree_Request_Read* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree_Request : public ::google::protobuf::Message {
 public:
  ReadOnlyTree_Request();
  virtual ~ReadOnlyTree_Request();

  ReadOnlyTree_Request(const ReadOnlyTree_Request& from);

  inline ReadOnlyTree_Request& operator=(const ReadOnlyTree_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree_Request& default_instance();

  void Swap(ReadOnlyTree_Request* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree_Request& from);
  void MergeFrom(const ReadOnlyTree_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadOnlyTree_Request_ListDirectory ListDirectory;
  typedef ReadOnlyTree_Request_Read Read;

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 11;
  inline const ::LogCabin::Protocol::Client::TreeCondition& condition() const;
  inline ::LogCabin::Protocol::Client::TreeCondition* mutable_condition();
  inline ::LogCabin::Protocol::Client::TreeCondition* release_condition();
  inline void set_allocated_condition(::LogCabin::Protocol::Client::TreeCondition* condition);

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
  inline bool has_list_directory() const;
  inline void clear_list_directory();
  static const int kListDirectoryFieldNumber = 2;
  inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory& list_directory() const;
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* mutable_list_directory();
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* release_list_directory();
  inline void set_allocated_list_directory(::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* list_directory);

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 5;
  inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read& read() const;
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* mutable_read();
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* release_read();
  inline void set_allocated_read(::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* read);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree.Request)
 private:
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_list_directory();
  inline void clear_has_list_directory();
  inline void set_has_read();
  inline void clear_has_read();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::TreeCondition* condition_;
  ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* list_directory_;
  ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* read_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree_Request* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree_Response_ListDirectory : public ::google::protobuf::Message {
 public:
  ReadOnlyTree_Response_ListDirectory();
  virtual ~ReadOnlyTree_Response_ListDirectory();

  ReadOnlyTree_Response_ListDirectory(const ReadOnlyTree_Response_ListDirectory& from);

  inline ReadOnlyTree_Response_ListDirectory& operator=(const ReadOnlyTree_Response_ListDirectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree_Response_ListDirectory& default_instance();

  void Swap(ReadOnlyTree_Response_ListDirectory* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree_Response_ListDirectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree_Response_ListDirectory& from);
  void MergeFrom(const ReadOnlyTree_Response_ListDirectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string child = 1;
  inline int child_size() const;
  inline void clear_child();
  static const int kChildFieldNumber = 1;
  inline const ::std::string& child(int index) const;
  inline ::std::string* mutable_child(int index);
  inline void set_child(int index, const ::std::string& value);
  inline void set_child(int index, const char* value);
  inline void set_child(int index, const char* value, size_t size);
  inline ::std::string* add_child();
  inline void add_child(const ::std::string& value);
  inline void add_child(const char* value);
  inline void add_child(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& child() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_child();

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> child_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree_Response_ListDirectory* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree_Response_Read : public ::google::protobuf::Message {
 public:
  ReadOnlyTree_Response_Read();
  virtual ~ReadOnlyTree_Response_Read();

  ReadOnlyTree_Response_Read(const ReadOnlyTree_Response_Read& from);

  inline ReadOnlyTree_Response_Read& operator=(const ReadOnlyTree_Response_Read& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree_Response_Read& default_instance();

  void Swap(ReadOnlyTree_Response_Read* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree_Response_Read* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree_Response_Read& from);
  void MergeFrom(const ReadOnlyTree_Response_Read& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes contents = 1;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read)
 private:
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* contents_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree_Response_Read* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree_Response : public ::google::protobuf::Message {
 public:
  ReadOnlyTree_Response();
  virtual ~ReadOnlyTree_Response();

  ReadOnlyTree_Response(const ReadOnlyTree_Response& from);

  inline ReadOnlyTree_Response& operator=(const ReadOnlyTree_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree_Response& default_instance();

  void Swap(ReadOnlyTree_Response* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree_Response& from);
  void MergeFrom(const ReadOnlyTree_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadOnlyTree_Response_ListDirectory ListDirectory;
  typedef ReadOnlyTree_Response_Read Read;

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::LogCabin::Protocol::Client::Status status() const;
  inline void set_status(::LogCabin::Protocol::Client::Status value);

  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
  inline bool has_list_directory() const;
  inline void clear_list_directory();
  static const int kListDirectoryFieldNumber = 3;
  inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory& list_directory() const;
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* mutable_list_directory();
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* release_list_directory();
  inline void set_allocated_list_directory(::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* list_directory);

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 4;
  inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read& read() const;
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* mutable_read();
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* release_read();
  inline void set_allocated_read(::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* read);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree.Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_list_directory();
  inline void clear_has_list_directory();
  inline void set_has_read();
  inline void clear_has_read();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_;
  ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* list_directory_;
  ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* read_;
  int status_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree_Response* default_instance_;
};
// -------------------------------------------------------------------

class ReadOnlyTree : public ::google::protobuf::Message {
 public:
  ReadOnlyTree();
  virtual ~ReadOnlyTree();

  ReadOnlyTree(const ReadOnlyTree& from);

  inline ReadOnlyTree& operator=(const ReadOnlyTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOnlyTree& default_instance();

  void Swap(ReadOnlyTree* other);

  // implements Message ----------------------------------------------

  ReadOnlyTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOnlyTree& from);
  void MergeFrom(const ReadOnlyTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadOnlyTree_Request Request;
  typedef ReadOnlyTree_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadOnlyTree)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadOnlyTree* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree_Request_MakeDirectory : public ::google::protobuf::Message {
 public:
  ReadWriteTree_Request_MakeDirectory();
  virtual ~ReadWriteTree_Request_MakeDirectory();

  ReadWriteTree_Request_MakeDirectory(const ReadWriteTree_Request_MakeDirectory& from);

  inline ReadWriteTree_Request_MakeDirectory& operator=(const ReadWriteTree_Request_MakeDirectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree_Request_MakeDirectory& default_instance();

  void Swap(ReadWriteTree_Request_MakeDirectory* other);

  // implements Message ----------------------------------------------

  ReadWriteTree_Request_MakeDirectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree_Request_MakeDirectory& from);
  void MergeFrom(const ReadWriteTree_Request_MakeDirectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree_Request_MakeDirectory* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree_Request_RemoveDirectory : public ::google::protobuf::Message {
 public:
  ReadWriteTree_Request_RemoveDirectory();
  virtual ~ReadWriteTree_Request_RemoveDirectory();

  ReadWriteTree_Request_RemoveDirectory(const ReadWriteTree_Request_RemoveDirectory& from);

  inline ReadWriteTree_Request_RemoveDirectory& operator=(const ReadWriteTree_Request_RemoveDirectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree_Request_RemoveDirectory& default_instance();

  void Swap(ReadWriteTree_Request_RemoveDirectory* other);

  // implements Message ----------------------------------------------

  ReadWriteTree_Request_RemoveDirectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree_Request_RemoveDirectory& from);
  void MergeFrom(const ReadWriteTree_Request_RemoveDirectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree_Request_RemoveDirectory* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree_Request_Write : public ::google::protobuf::Message {
 public:
  ReadWriteTree_Request_Write();
  virtual ~ReadWriteTree_Request_Write();

  ReadWriteTree_Request_Write(const ReadWriteTree_Request_Write& from);

  inline ReadWriteTree_Request_Write& operator=(const ReadWriteTree_Request_Write& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree_Request_Write& default_instance();

  void Swap(ReadWriteTree_Request_Write* other);

  // implements Message ----------------------------------------------

  ReadWriteTree_Request_Write* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree_Request_Write& from);
  void MergeFrom(const ReadWriteTree_Request_Write& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree.Request.Write)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* contents_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree_Request_Write* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree_Request_RemoveFile : public ::google::protobuf::Message {
 public:
  ReadWriteTree_Request_RemoveFile();
  virtual ~ReadWriteTree_Request_RemoveFile();

  ReadWriteTree_Request_RemoveFile(const ReadWriteTree_Request_RemoveFile& from);

  inline ReadWriteTree_Request_RemoveFile& operator=(const ReadWriteTree_Request_RemoveFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree_Request_RemoveFile& default_instance();

  void Swap(ReadWriteTree_Request_RemoveFile* other);

  // implements Message ----------------------------------------------

  ReadWriteTree_Request_RemoveFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree_Request_RemoveFile& from);
  void MergeFrom(const ReadWriteTree_Request_RemoveFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree_Request_RemoveFile* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree_Request : public ::google::protobuf::Message {
 public:
  ReadWriteTree_Request();
  virtual ~ReadWriteTree_Request();

  ReadWriteTree_Request(const ReadWriteTree_Request& from);

  inline ReadWriteTree_Request& operator=(const ReadWriteTree_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree_Request& default_instance();

  void Swap(ReadWriteTree_Request* other);

  // implements Message ----------------------------------------------

  ReadWriteTree_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree_Request& from);
  void MergeFrom(const ReadWriteTree_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadWriteTree_Request_MakeDirectory MakeDirectory;
  typedef ReadWriteTree_Request_RemoveDirectory RemoveDirectory;
  typedef ReadWriteTree_Request_Write Write;
  typedef ReadWriteTree_Request_RemoveFile RemoveFile;

  // accessors -------------------------------------------------------

  // required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
  inline bool has_exactly_once() const;
  inline void clear_exactly_once();
  static const int kExactlyOnceFieldNumber = 10;
  inline const ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo& exactly_once() const;
  inline ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* mutable_exactly_once();
  inline ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* release_exactly_once();
  inline void set_allocated_exactly_once(::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* exactly_once);

  // optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 11;
  inline const ::LogCabin::Protocol::Client::TreeCondition& condition() const;
  inline ::LogCabin::Protocol::Client::TreeCondition* mutable_condition();
  inline ::LogCabin::Protocol::Client::TreeCondition* release_condition();
  inline void set_allocated_condition(::LogCabin::Protocol::Client::TreeCondition* condition);

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
  inline bool has_make_directory() const;
  inline void clear_make_directory();
  static const int kMakeDirectoryFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory& make_directory() const;
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* mutable_make_directory();
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* release_make_directory();
  inline void set_allocated_make_directory(::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* make_directory);

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
  inline bool has_remove_directory() const;
  inline void clear_remove_directory();
  static const int kRemoveDirectoryFieldNumber = 3;
  inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory& remove_directory() const;
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* mutable_remove_directory();
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* release_remove_directory();
  inline void set_allocated_remove_directory(::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* remove_directory);

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
  inline bool has_write() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 4;
  inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write& write() const;
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* mutable_write();
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* release_write();
  inline void set_allocated_write(::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* write);

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
  inline bool has_remove_file() const;
  inline void clear_remove_file();
  static const int kRemoveFileFieldNumber = 6;
  inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile& remove_file() const;
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* mutable_remove_file();
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* release_remove_file();
  inline void set_allocated_remove_file(::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* remove_file);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree.Request)
 private:
  inline void set_has_exactly_once();
  inline void clear_has_exactly_once();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_make_directory();
  inline void clear_has_make_directory();
  inline void set_has_remove_directory();
  inline void clear_has_remove_directory();
  inline void set_has_write();
  inline void clear_has_write();
  inline void set_has_remove_file();
  inline void clear_has_remove_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* exactly_once_;
  ::LogCabin::Protocol::Client::TreeCondition* condition_;
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* make_directory_;
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* remove_directory_;
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* write_;
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* remove_file_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree_Request* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree_Response : public ::google::protobuf::Message {
 public:
  ReadWriteTree_Response();
  virtual ~ReadWriteTree_Response();

  ReadWriteTree_Response(const ReadWriteTree_Response& from);

  inline ReadWriteTree_Response& operator=(const ReadWriteTree_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree_Response& default_instance();

  void Swap(ReadWriteTree_Response* other);

  // implements Message ----------------------------------------------

  ReadWriteTree_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree_Response& from);
  void MergeFrom(const ReadWriteTree_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::LogCabin::Protocol::Client::Status status() const;
  inline void set_status(::LogCabin::Protocol::Client::Status value);

  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree.Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_;
  int status_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree_Response* default_instance_;
};
// -------------------------------------------------------------------

class ReadWriteTree : public ::google::protobuf::Message {
 public:
  ReadWriteTree();
  virtual ~ReadWriteTree();

  ReadWriteTree(const ReadWriteTree& from);

  inline ReadWriteTree& operator=(const ReadWriteTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWriteTree& default_instance();

  void Swap(ReadWriteTree* other);

  // implements Message ----------------------------------------------

  ReadWriteTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWriteTree& from);
  void MergeFrom(const ReadWriteTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReadWriteTree_Request Request;
  typedef ReadWriteTree_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.ReadWriteTree)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static ReadWriteTree* default_instance_;
};
// -------------------------------------------------------------------

class GetServerInfo_Request : public ::google::protobuf::Message {
 public:
  GetServerInfo_Request();
  virtual ~GetServerInfo_Request();

  GetServerInfo_Request(const GetServerInfo_Request& from);

  inline GetServerInfo_Request& operator=(const GetServerInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerInfo_Request& default_instance();

  void Swap(GetServerInfo_Request* other);

  // implements Message ----------------------------------------------

  GetServerInfo_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerInfo_Request& from);
  void MergeFrom(const GetServerInfo_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.GetServerInfo.Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static GetServerInfo_Request* default_instance_;
};
// -------------------------------------------------------------------

class GetServerInfo_Response : public ::google::protobuf::Message {
 public:
  GetServerInfo_Response();
  virtual ~GetServerInfo_Response();

  GetServerInfo_Response(const GetServerInfo_Response& from);

  inline GetServerInfo_Response& operator=(const GetServerInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerInfo_Response& default_instance();

  void Swap(GetServerInfo_Response* other);

  // implements Message ----------------------------------------------

  GetServerInfo_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerInfo_Response& from);
  void MergeFrom(const GetServerInfo_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .LogCabin.Protocol.Client.Server server_info = 1;
  inline bool has_server_info() const;
  inline void clear_server_info();
  static const int kServerInfoFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::Server& server_info() const;
  inline ::LogCabin::Protocol::Client::Server* mutable_server_info();
  inline ::LogCabin::Protocol::Client::Server* release_server_info();
  inline void set_allocated_server_info(::LogCabin::Protocol::Client::Server* server_info);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.GetServerInfo.Response)
 private:
  inline void set_has_server_info();
  inline void clear_has_server_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::Server* server_info_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static GetServerInfo_Response* default_instance_;
};
// -------------------------------------------------------------------

class GetServerInfo : public ::google::protobuf::Message {
 public:
  GetServerInfo();
  virtual ~GetServerInfo();

  GetServerInfo(const GetServerInfo& from);

  inline GetServerInfo& operator=(const GetServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerInfo& default_instance();

  void Swap(GetServerInfo* other);

  // implements Message ----------------------------------------------

  GetServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerInfo& from);
  void MergeFrom(const GetServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetServerInfo_Request Request;
  typedef GetServerInfo_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.GetServerInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static GetServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdvanceStateMachineVersion_Request : public ::google::protobuf::Message {
 public:
  AdvanceStateMachineVersion_Request();
  virtual ~AdvanceStateMachineVersion_Request();

  AdvanceStateMachineVersion_Request(const AdvanceStateMachineVersion_Request& from);

  inline AdvanceStateMachineVersion_Request& operator=(const AdvanceStateMachineVersion_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvanceStateMachineVersion_Request& default_instance();

  void Swap(AdvanceStateMachineVersion_Request* other);

  // implements Message ----------------------------------------------

  AdvanceStateMachineVersion_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvanceStateMachineVersion_Request& from);
  void MergeFrom(const AdvanceStateMachineVersion_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 requested_version = 1;
  inline bool has_requested_version() const;
  inline void clear_requested_version();
  static const int kRequestedVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 requested_version() const;
  inline void set_requested_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request)
 private:
  inline void set_has_requested_version();
  inline void clear_has_requested_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 requested_version_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static AdvanceStateMachineVersion_Request* default_instance_;
};
// -------------------------------------------------------------------

class AdvanceStateMachineVersion_Response : public ::google::protobuf::Message {
 public:
  AdvanceStateMachineVersion_Response();
  virtual ~AdvanceStateMachineVersion_Response();

  AdvanceStateMachineVersion_Response(const AdvanceStateMachineVersion_Response& from);

  inline AdvanceStateMachineVersion_Response& operator=(const AdvanceStateMachineVersion_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvanceStateMachineVersion_Response& default_instance();

  void Swap(AdvanceStateMachineVersion_Response* other);

  // implements Message ----------------------------------------------

  AdvanceStateMachineVersion_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvanceStateMachineVersion_Response& from);
  void MergeFrom(const AdvanceStateMachineVersion_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 running_version = 1;
  inline bool has_running_version() const;
  inline void clear_running_version();
  static const int kRunningVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 running_version() const;
  inline void set_running_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response)
 private:
  inline void set_has_running_version();
  inline void clear_has_running_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 running_version_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static AdvanceStateMachineVersion_Response* default_instance_;
};
// -------------------------------------------------------------------

class AdvanceStateMachineVersion : public ::google::protobuf::Message {
 public:
  AdvanceStateMachineVersion();
  virtual ~AdvanceStateMachineVersion();

  AdvanceStateMachineVersion(const AdvanceStateMachineVersion& from);

  inline AdvanceStateMachineVersion& operator=(const AdvanceStateMachineVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvanceStateMachineVersion& default_instance();

  void Swap(AdvanceStateMachineVersion* other);

  // implements Message ----------------------------------------------

  AdvanceStateMachineVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvanceStateMachineVersion& from);
  void MergeFrom(const AdvanceStateMachineVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdvanceStateMachineVersion_Request Request;
  typedef AdvanceStateMachineVersion_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.AdvanceStateMachineVersion)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static AdvanceStateMachineVersion* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineCommand_Request : public ::google::protobuf::Message {
 public:
  StateMachineCommand_Request();
  virtual ~StateMachineCommand_Request();

  StateMachineCommand_Request(const StateMachineCommand_Request& from);

  inline StateMachineCommand_Request& operator=(const StateMachineCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineCommand_Request& default_instance();

  void Swap(StateMachineCommand_Request* other);

  // implements Message ----------------------------------------------

  StateMachineCommand_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineCommand_Request& from);
  void MergeFrom(const StateMachineCommand_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 1;
  inline bool has_open_session() const;
  inline void clear_open_session();
  static const int kOpenSessionFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::OpenSession_Request& open_session() const;
  inline ::LogCabin::Protocol::Client::OpenSession_Request* mutable_open_session();
  inline ::LogCabin::Protocol::Client::OpenSession_Request* release_open_session();
  inline void set_allocated_open_session(::LogCabin::Protocol::Client::OpenSession_Request* open_session);

  // optional .LogCabin.Protocol.Client.CloseSession.Request close_session = 4;
  inline bool has_close_session() const;
  inline void clear_close_session();
  static const int kCloseSessionFieldNumber = 4;
  inline const ::LogCabin::Protocol::Client::CloseSession_Request& close_session() const;
  inline ::LogCabin::Protocol::Client::CloseSession_Request* mutable_close_session();
  inline ::LogCabin::Protocol::Client::CloseSession_Request* release_close_session();
  inline void set_allocated_close_session(::LogCabin::Protocol::Client::CloseSession_Request* close_session);

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 2;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 2;
  inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request& tree() const;
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request* mutable_tree();
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Request* release_tree();
  inline void set_allocated_tree(::LogCabin::Protocol::Client::ReadWriteTree_Request* tree);

  // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request advance_version = 3;
  inline bool has_advance_version() const;
  inline void clear_advance_version();
  static const int kAdvanceVersionFieldNumber = 3;
  inline const ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request& advance_version() const;
  inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* mutable_advance_version();
  inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* release_advance_version();
  inline void set_allocated_advance_version(::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* advance_version);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.StateMachineCommand.Request)
 private:
  inline void set_has_open_session();
  inline void clear_has_open_session();
  inline void set_has_close_session();
  inline void clear_has_close_session();
  inline void set_has_tree();
  inline void clear_has_tree();
  inline void set_has_advance_version();
  inline void clear_has_advance_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::OpenSession_Request* open_session_;
  ::LogCabin::Protocol::Client::CloseSession_Request* close_session_;
  ::LogCabin::Protocol::Client::ReadWriteTree_Request* tree_;
  ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* advance_version_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static StateMachineCommand_Request* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineCommand_Response : public ::google::protobuf::Message {
 public:
  StateMachineCommand_Response();
  virtual ~StateMachineCommand_Response();

  StateMachineCommand_Response(const StateMachineCommand_Response& from);

  inline StateMachineCommand_Response& operator=(const StateMachineCommand_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineCommand_Response& default_instance();

  void Swap(StateMachineCommand_Response* other);

  // implements Message ----------------------------------------------

  StateMachineCommand_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineCommand_Response& from);
  void MergeFrom(const StateMachineCommand_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 1;
  inline bool has_open_session() const;
  inline void clear_open_session();
  static const int kOpenSessionFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::OpenSession_Response& open_session() const;
  inline ::LogCabin::Protocol::Client::OpenSession_Response* mutable_open_session();
  inline ::LogCabin::Protocol::Client::OpenSession_Response* release_open_session();
  inline void set_allocated_open_session(::LogCabin::Protocol::Client::OpenSession_Response* open_session);

  // optional .LogCabin.Protocol.Client.CloseSession.Response close_session = 4;
  inline bool has_close_session() const;
  inline void clear_close_session();
  static const int kCloseSessionFieldNumber = 4;
  inline const ::LogCabin::Protocol::Client::CloseSession_Response& close_session() const;
  inline ::LogCabin::Protocol::Client::CloseSession_Response* mutable_close_session();
  inline ::LogCabin::Protocol::Client::CloseSession_Response* release_close_session();
  inline void set_allocated_close_session(::LogCabin::Protocol::Client::CloseSession_Response* close_session);

  // optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 2;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 2;
  inline const ::LogCabin::Protocol::Client::ReadWriteTree_Response& tree() const;
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Response* mutable_tree();
  inline ::LogCabin::Protocol::Client::ReadWriteTree_Response* release_tree();
  inline void set_allocated_tree(::LogCabin::Protocol::Client::ReadWriteTree_Response* tree);

  // optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response advance_version = 3;
  inline bool has_advance_version() const;
  inline void clear_advance_version();
  static const int kAdvanceVersionFieldNumber = 3;
  inline const ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response& advance_version() const;
  inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* mutable_advance_version();
  inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* release_advance_version();
  inline void set_allocated_advance_version(::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* advance_version);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.StateMachineCommand.Response)
 private:
  inline void set_has_open_session();
  inline void clear_has_open_session();
  inline void set_has_close_session();
  inline void clear_has_close_session();
  inline void set_has_tree();
  inline void clear_has_tree();
  inline void set_has_advance_version();
  inline void clear_has_advance_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::OpenSession_Response* open_session_;
  ::LogCabin::Protocol::Client::CloseSession_Response* close_session_;
  ::LogCabin::Protocol::Client::ReadWriteTree_Response* tree_;
  ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* advance_version_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static StateMachineCommand_Response* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineCommand : public ::google::protobuf::Message {
 public:
  StateMachineCommand();
  virtual ~StateMachineCommand();

  StateMachineCommand(const StateMachineCommand& from);

  inline StateMachineCommand& operator=(const StateMachineCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineCommand& default_instance();

  void Swap(StateMachineCommand* other);

  // implements Message ----------------------------------------------

  StateMachineCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineCommand& from);
  void MergeFrom(const StateMachineCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StateMachineCommand_Request Request;
  typedef StateMachineCommand_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.StateMachineCommand)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static StateMachineCommand* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineQuery_Request : public ::google::protobuf::Message {
 public:
  StateMachineQuery_Request();
  virtual ~StateMachineQuery_Request();

  StateMachineQuery_Request(const StateMachineQuery_Request& from);

  inline StateMachineQuery_Request& operator=(const StateMachineQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineQuery_Request& default_instance();

  void Swap(StateMachineQuery_Request* other);

  // implements Message ----------------------------------------------

  StateMachineQuery_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineQuery_Request& from);
  void MergeFrom(const StateMachineQuery_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Request tree = 1;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Request& tree() const;
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request* mutable_tree();
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request* release_tree();
  inline void set_allocated_tree(::LogCabin::Protocol::Client::ReadOnlyTree_Request* tree);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.StateMachineQuery.Request)
 private:
  inline void set_has_tree();
  inline void clear_has_tree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::ReadOnlyTree_Request* tree_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static StateMachineQuery_Request* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineQuery_Response : public ::google::protobuf::Message {
 public:
  StateMachineQuery_Response();
  virtual ~StateMachineQuery_Response();

  StateMachineQuery_Response(const StateMachineQuery_Response& from);

  inline StateMachineQuery_Response& operator=(const StateMachineQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineQuery_Response& default_instance();

  void Swap(StateMachineQuery_Response* other);

  // implements Message ----------------------------------------------

  StateMachineQuery_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineQuery_Response& from);
  void MergeFrom(const StateMachineQuery_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LogCabin.Protocol.Client.ReadOnlyTree.Response tree = 1;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 1;
  inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Response& tree() const;
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response* mutable_tree();
  inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response* release_tree();
  inline void set_allocated_tree(::LogCabin::Protocol::Client::ReadOnlyTree_Response* tree);

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.StateMachineQuery.Response)
 private:
  inline void set_has_tree();
  inline void clear_has_tree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::LogCabin::Protocol::Client::ReadOnlyTree_Response* tree_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static StateMachineQuery_Response* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineQuery : public ::google::protobuf::Message {
 public:
  StateMachineQuery();
  virtual ~StateMachineQuery();

  StateMachineQuery(const StateMachineQuery& from);

  inline StateMachineQuery& operator=(const StateMachineQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineQuery& default_instance();

  void Swap(StateMachineQuery* other);

  // implements Message ----------------------------------------------

  StateMachineQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineQuery& from);
  void MergeFrom(const StateMachineQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StateMachineQuery_Request Request;
  typedef StateMachineQuery_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogCabin.Protocol.Client.StateMachineQuery)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_AssignDesc_Protocol_2fClient_2fClient_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2fClient_2fClient_2eproto();

  void InitAsDefaultInstance();
  static StateMachineQuery* default_instance_;
};
// ===================================================================


// ===================================================================

// Error

// optional .LogCabin.Protocol.Client.Error.Code error_code = 1;
inline bool Error::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::LogCabin::Protocol::Client::Error_Code Error::error_code() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.Error.error_code)
  return static_cast< ::LogCabin::Protocol::Client::Error_Code >(error_code_);
}
inline void Error::set_error_code(::LogCabin::Protocol::Client::Error_Code value) {
  assert(::LogCabin::Protocol::Client::Error_Code_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.Error.error_code)
}

// optional string leader_hint = 2;
inline bool Error::has_leader_hint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_leader_hint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_leader_hint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_leader_hint() {
  if (leader_hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_hint_->clear();
  }
  clear_has_leader_hint();
}
inline const ::std::string& Error::leader_hint() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.Error.leader_hint)
  return *leader_hint_;
}
inline void Error::set_leader_hint(const ::std::string& value) {
  set_has_leader_hint();
  if (leader_hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_hint_ = new ::std::string;
  }
  leader_hint_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.Error.leader_hint)
}
inline void Error::set_leader_hint(const char* value) {
  set_has_leader_hint();
  if (leader_hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_hint_ = new ::std::string;
  }
  leader_hint_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.Error.leader_hint)
}
inline void Error::set_leader_hint(const char* value, size_t size) {
  set_has_leader_hint();
  if (leader_hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_hint_ = new ::std::string;
  }
  leader_hint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.Error.leader_hint)
}
inline ::std::string* Error::mutable_leader_hint() {
  set_has_leader_hint();
  if (leader_hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_hint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.Error.leader_hint)
  return leader_hint_;
}
inline ::std::string* Error::release_leader_hint() {
  clear_has_leader_hint();
  if (leader_hint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_hint_;
    leader_hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Error::set_allocated_leader_hint(::std::string* leader_hint) {
  if (leader_hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_hint_;
  }
  if (leader_hint) {
    set_has_leader_hint();
    leader_hint_ = leader_hint;
  } else {
    clear_has_leader_hint();
    leader_hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.Error.leader_hint)
}

// -------------------------------------------------------------------

// ExactlyOnceRPCInfo

// required uint64 client_id = 1;
inline bool ExactlyOnceRPCInfo::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExactlyOnceRPCInfo::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExactlyOnceRPCInfo::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExactlyOnceRPCInfo::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
inline ::google::protobuf::uint64 ExactlyOnceRPCInfo::client_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ExactlyOnceRPCInfo.client_id)
  return client_id_;
}
inline void ExactlyOnceRPCInfo::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ExactlyOnceRPCInfo.client_id)
}

// required uint64 first_outstanding_rpc = 2;
inline bool ExactlyOnceRPCInfo::has_first_outstanding_rpc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExactlyOnceRPCInfo::set_has_first_outstanding_rpc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExactlyOnceRPCInfo::clear_has_first_outstanding_rpc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExactlyOnceRPCInfo::clear_first_outstanding_rpc() {
  first_outstanding_rpc_ = GOOGLE_ULONGLONG(0);
  clear_has_first_outstanding_rpc();
}
inline ::google::protobuf::uint64 ExactlyOnceRPCInfo::first_outstanding_rpc() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ExactlyOnceRPCInfo.first_outstanding_rpc)
  return first_outstanding_rpc_;
}
inline void ExactlyOnceRPCInfo::set_first_outstanding_rpc(::google::protobuf::uint64 value) {
  set_has_first_outstanding_rpc();
  first_outstanding_rpc_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ExactlyOnceRPCInfo.first_outstanding_rpc)
}

// required uint64 rpc_number = 3;
inline bool ExactlyOnceRPCInfo::has_rpc_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExactlyOnceRPCInfo::set_has_rpc_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExactlyOnceRPCInfo::clear_has_rpc_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExactlyOnceRPCInfo::clear_rpc_number() {
  rpc_number_ = GOOGLE_ULONGLONG(0);
  clear_has_rpc_number();
}
inline ::google::protobuf::uint64 ExactlyOnceRPCInfo::rpc_number() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ExactlyOnceRPCInfo.rpc_number)
  return rpc_number_;
}
inline void ExactlyOnceRPCInfo::set_rpc_number(::google::protobuf::uint64 value) {
  set_has_rpc_number();
  rpc_number_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ExactlyOnceRPCInfo.rpc_number)
}

// -------------------------------------------------------------------

// VerifyRecipient_Request

// optional string cluster_uuid = 1;
inline bool VerifyRecipient_Request::has_cluster_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyRecipient_Request::set_has_cluster_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyRecipient_Request::clear_has_cluster_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyRecipient_Request::clear_cluster_uuid() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_->clear();
  }
  clear_has_cluster_uuid();
}
inline const ::std::string& VerifyRecipient_Request::cluster_uuid() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.VerifyRecipient.Request.cluster_uuid)
  return *cluster_uuid_;
}
inline void VerifyRecipient_Request::set_cluster_uuid(const ::std::string& value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.VerifyRecipient.Request.cluster_uuid)
}
inline void VerifyRecipient_Request::set_cluster_uuid(const char* value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.VerifyRecipient.Request.cluster_uuid)
}
inline void VerifyRecipient_Request::set_cluster_uuid(const char* value, size_t size) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.VerifyRecipient.Request.cluster_uuid)
}
inline ::std::string* VerifyRecipient_Request::mutable_cluster_uuid() {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.VerifyRecipient.Request.cluster_uuid)
  return cluster_uuid_;
}
inline ::std::string* VerifyRecipient_Request::release_cluster_uuid() {
  clear_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cluster_uuid_;
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyRecipient_Request::set_allocated_cluster_uuid(::std::string* cluster_uuid) {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (cluster_uuid) {
    set_has_cluster_uuid();
    cluster_uuid_ = cluster_uuid;
  } else {
    clear_has_cluster_uuid();
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.VerifyRecipient.Request.cluster_uuid)
}

// optional uint64 server_id = 2;
inline bool VerifyRecipient_Request::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyRecipient_Request::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyRecipient_Request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyRecipient_Request::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 VerifyRecipient_Request::server_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.VerifyRecipient.Request.server_id)
  return server_id_;
}
inline void VerifyRecipient_Request::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.VerifyRecipient.Request.server_id)
}

// -------------------------------------------------------------------

// VerifyRecipient_Response

// optional string cluster_uuid = 1;
inline bool VerifyRecipient_Response::has_cluster_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyRecipient_Response::set_has_cluster_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyRecipient_Response::clear_has_cluster_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyRecipient_Response::clear_cluster_uuid() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_->clear();
  }
  clear_has_cluster_uuid();
}
inline const ::std::string& VerifyRecipient_Response::cluster_uuid() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.VerifyRecipient.Response.cluster_uuid)
  return *cluster_uuid_;
}
inline void VerifyRecipient_Response::set_cluster_uuid(const ::std::string& value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.VerifyRecipient.Response.cluster_uuid)
}
inline void VerifyRecipient_Response::set_cluster_uuid(const char* value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.VerifyRecipient.Response.cluster_uuid)
}
inline void VerifyRecipient_Response::set_cluster_uuid(const char* value, size_t size) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.VerifyRecipient.Response.cluster_uuid)
}
inline ::std::string* VerifyRecipient_Response::mutable_cluster_uuid() {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.VerifyRecipient.Response.cluster_uuid)
  return cluster_uuid_;
}
inline ::std::string* VerifyRecipient_Response::release_cluster_uuid() {
  clear_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cluster_uuid_;
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyRecipient_Response::set_allocated_cluster_uuid(::std::string* cluster_uuid) {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (cluster_uuid) {
    set_has_cluster_uuid();
    cluster_uuid_ = cluster_uuid;
  } else {
    clear_has_cluster_uuid();
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.VerifyRecipient.Response.cluster_uuid)
}

// optional uint64 server_id = 2;
inline bool VerifyRecipient_Response::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyRecipient_Response::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyRecipient_Response::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyRecipient_Response::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 VerifyRecipient_Response::server_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.VerifyRecipient.Response.server_id)
  return server_id_;
}
inline void VerifyRecipient_Response::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.VerifyRecipient.Response.server_id)
}

// optional bool ok = 3;
inline bool VerifyRecipient_Response::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyRecipient_Response::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyRecipient_Response::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyRecipient_Response::clear_ok() {
  ok_ = false;
  clear_has_ok();
}
inline bool VerifyRecipient_Response::ok() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.VerifyRecipient.Response.ok)
  return ok_;
}
inline void VerifyRecipient_Response::set_ok(bool value) {
  set_has_ok();
  ok_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.VerifyRecipient.Response.ok)
}

// optional string error = 4;
inline bool VerifyRecipient_Response::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyRecipient_Response::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyRecipient_Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyRecipient_Response::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& VerifyRecipient_Response::error() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.VerifyRecipient.Response.error)
  return *error_;
}
inline void VerifyRecipient_Response::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.VerifyRecipient.Response.error)
}
inline void VerifyRecipient_Response::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.VerifyRecipient.Response.error)
}
inline void VerifyRecipient_Response::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.VerifyRecipient.Response.error)
}
inline ::std::string* VerifyRecipient_Response::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.VerifyRecipient.Response.error)
  return error_;
}
inline ::std::string* VerifyRecipient_Response::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyRecipient_Response::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.VerifyRecipient.Response.error)
}

// -------------------------------------------------------------------

// VerifyRecipient

// -------------------------------------------------------------------

// OpenSession_Request

// -------------------------------------------------------------------

// OpenSession_Response

// required uint64 client_id = 1;
inline bool OpenSession_Response::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSession_Response::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSession_Response::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSession_Response::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
inline ::google::protobuf::uint64 OpenSession_Response::client_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.OpenSession.Response.client_id)
  return client_id_;
}
inline void OpenSession_Response::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.OpenSession.Response.client_id)
}

// -------------------------------------------------------------------

// OpenSession

// -------------------------------------------------------------------

// CloseSession_Request

// required uint64 client_id = 1;
inline bool CloseSession_Request::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseSession_Request::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloseSession_Request::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloseSession_Request::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
inline ::google::protobuf::uint64 CloseSession_Request::client_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.CloseSession.Request.client_id)
  return client_id_;
}
inline void CloseSession_Request::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.CloseSession.Request.client_id)
}

// -------------------------------------------------------------------

// CloseSession_Response

// -------------------------------------------------------------------

// CloseSession

// -------------------------------------------------------------------

// Server

// required uint64 server_id = 1;
inline bool Server::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Server::server_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.Server.server_id)
  return server_id_;
}
inline void Server::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.Server.server_id)
}

// required string addresses = 2;
inline bool Server::has_addresses() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server::set_has_addresses() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server::clear_has_addresses() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server::clear_addresses() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_->clear();
  }
  clear_has_addresses();
}
inline const ::std::string& Server::addresses() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.Server.addresses)
  return *addresses_;
}
inline void Server::set_addresses(const ::std::string& value) {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  addresses_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.Server.addresses)
}
inline void Server::set_addresses(const char* value) {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  addresses_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.Server.addresses)
}
inline void Server::set_addresses(const char* value, size_t size) {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  addresses_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.Server.addresses)
}
inline ::std::string* Server::mutable_addresses() {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.Server.addresses)
  return addresses_;
}
inline ::std::string* Server::release_addresses() {
  clear_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addresses_;
    addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Server::set_allocated_addresses(::std::string* addresses) {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (addresses) {
    set_has_addresses();
    addresses_ = addresses;
  } else {
    clear_has_addresses();
    addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.Server.addresses)
}

// -------------------------------------------------------------------

// GetConfiguration_Request

// -------------------------------------------------------------------

// GetConfiguration_Response

// required uint64 id = 1;
inline bool GetConfiguration_Response::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConfiguration_Response::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConfiguration_Response::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConfiguration_Response::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GetConfiguration_Response::id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.GetConfiguration.Response.id)
  return id_;
}
inline void GetConfiguration_Response::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.GetConfiguration.Response.id)
}

// repeated .LogCabin.Protocol.Client.Server servers = 2;
inline int GetConfiguration_Response::servers_size() const {
  return servers_.size();
}
inline void GetConfiguration_Response::clear_servers() {
  servers_.Clear();
}
inline const ::LogCabin::Protocol::Client::Server& GetConfiguration_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.GetConfiguration.Response.servers)
  return servers_.Get(index);
}
inline ::LogCabin::Protocol::Client::Server* GetConfiguration_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.GetConfiguration.Response.servers)
  return servers_.Mutable(index);
}
inline ::LogCabin::Protocol::Client::Server* GetConfiguration_Response::add_servers() {
  // @@protoc_insertion_point(field_add:LogCabin.Protocol.Client.GetConfiguration.Response.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >&
GetConfiguration_Response::servers() const {
  // @@protoc_insertion_point(field_list:LogCabin.Protocol.Client.GetConfiguration.Response.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >*
GetConfiguration_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:LogCabin.Protocol.Client.GetConfiguration.Response.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// GetConfiguration

// -------------------------------------------------------------------

// SetConfiguration_Request

// required uint64 old_id = 1;
inline bool SetConfiguration_Request::has_old_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetConfiguration_Request::set_has_old_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetConfiguration_Request::clear_has_old_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetConfiguration_Request::clear_old_id() {
  old_id_ = GOOGLE_ULONGLONG(0);
  clear_has_old_id();
}
inline ::google::protobuf::uint64 SetConfiguration_Request::old_id() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Request.old_id)
  return old_id_;
}
inline void SetConfiguration_Request::set_old_id(::google::protobuf::uint64 value) {
  set_has_old_id();
  old_id_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.SetConfiguration.Request.old_id)
}

// repeated .LogCabin.Protocol.Client.Server new_servers = 2;
inline int SetConfiguration_Request::new_servers_size() const {
  return new_servers_.size();
}
inline void SetConfiguration_Request::clear_new_servers() {
  new_servers_.Clear();
}
inline const ::LogCabin::Protocol::Client::Server& SetConfiguration_Request::new_servers(int index) const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Request.new_servers)
  return new_servers_.Get(index);
}
inline ::LogCabin::Protocol::Client::Server* SetConfiguration_Request::mutable_new_servers(int index) {
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.SetConfiguration.Request.new_servers)
  return new_servers_.Mutable(index);
}
inline ::LogCabin::Protocol::Client::Server* SetConfiguration_Request::add_new_servers() {
  // @@protoc_insertion_point(field_add:LogCabin.Protocol.Client.SetConfiguration.Request.new_servers)
  return new_servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >&
SetConfiguration_Request::new_servers() const {
  // @@protoc_insertion_point(field_list:LogCabin.Protocol.Client.SetConfiguration.Request.new_servers)
  return new_servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >*
SetConfiguration_Request::mutable_new_servers() {
  // @@protoc_insertion_point(field_mutable_list:LogCabin.Protocol.Client.SetConfiguration.Request.new_servers)
  return &new_servers_;
}

// -------------------------------------------------------------------

// SetConfiguration_Response_OK

// -------------------------------------------------------------------

// SetConfiguration_Response_ConfigurationChanged

// optional string error = 1;
inline bool SetConfiguration_Response_ConfigurationChanged::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetConfiguration_Response_ConfigurationChanged::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetConfiguration_Response_ConfigurationChanged::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetConfiguration_Response_ConfigurationChanged::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& SetConfiguration_Response_ConfigurationChanged::error() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged.error)
  return *error_;
}
inline void SetConfiguration_Response_ConfigurationChanged::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged.error)
}
inline void SetConfiguration_Response_ConfigurationChanged::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged.error)
}
inline void SetConfiguration_Response_ConfigurationChanged::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged.error)
}
inline ::std::string* SetConfiguration_Response_ConfigurationChanged::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged.error)
  return error_;
}
inline ::std::string* SetConfiguration_Response_ConfigurationChanged::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetConfiguration_Response_ConfigurationChanged::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged.error)
}

// -------------------------------------------------------------------

// SetConfiguration_Response_ConfigurationBad

// repeated .LogCabin.Protocol.Client.Server bad_servers = 1;
inline int SetConfiguration_Response_ConfigurationBad::bad_servers_size() const {
  return bad_servers_.size();
}
inline void SetConfiguration_Response_ConfigurationBad::clear_bad_servers() {
  bad_servers_.Clear();
}
inline const ::LogCabin::Protocol::Client::Server& SetConfiguration_Response_ConfigurationBad::bad_servers(int index) const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad.bad_servers)
  return bad_servers_.Get(index);
}
inline ::LogCabin::Protocol::Client::Server* SetConfiguration_Response_ConfigurationBad::mutable_bad_servers(int index) {
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad.bad_servers)
  return bad_servers_.Mutable(index);
}
inline ::LogCabin::Protocol::Client::Server* SetConfiguration_Response_ConfigurationBad::add_bad_servers() {
  // @@protoc_insertion_point(field_add:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad.bad_servers)
  return bad_servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >&
SetConfiguration_Response_ConfigurationBad::bad_servers() const {
  // @@protoc_insertion_point(field_list:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad.bad_servers)
  return bad_servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogCabin::Protocol::Client::Server >*
SetConfiguration_Response_ConfigurationBad::mutable_bad_servers() {
  // @@protoc_insertion_point(field_mutable_list:LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad.bad_servers)
  return &bad_servers_;
}

// -------------------------------------------------------------------

// SetConfiguration_Response

// optional .LogCabin.Protocol.Client.SetConfiguration.Response.OK ok = 1;
inline bool SetConfiguration_Response::has_ok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetConfiguration_Response::set_has_ok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetConfiguration_Response::clear_has_ok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetConfiguration_Response::clear_ok() {
  if (ok_ != NULL) ok_->::LogCabin::Protocol::Client::SetConfiguration_Response_OK::Clear();
  clear_has_ok();
}
inline const ::LogCabin::Protocol::Client::SetConfiguration_Response_OK& SetConfiguration_Response::ok() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Response.ok)
  return ok_ != NULL ? *ok_ : *default_instance_->ok_;
}
inline ::LogCabin::Protocol::Client::SetConfiguration_Response_OK* SetConfiguration_Response::mutable_ok() {
  set_has_ok();
  if (ok_ == NULL) ok_ = new ::LogCabin::Protocol::Client::SetConfiguration_Response_OK;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.SetConfiguration.Response.ok)
  return ok_;
}
inline ::LogCabin::Protocol::Client::SetConfiguration_Response_OK* SetConfiguration_Response::release_ok() {
  clear_has_ok();
  ::LogCabin::Protocol::Client::SetConfiguration_Response_OK* temp = ok_;
  ok_ = NULL;
  return temp;
}
inline void SetConfiguration_Response::set_allocated_ok(::LogCabin::Protocol::Client::SetConfiguration_Response_OK* ok) {
  delete ok_;
  ok_ = ok;
  if (ok) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.SetConfiguration.Response.ok)
}

// optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationChanged configuration_changed = 2;
inline bool SetConfiguration_Response::has_configuration_changed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetConfiguration_Response::set_has_configuration_changed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetConfiguration_Response::clear_has_configuration_changed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetConfiguration_Response::clear_configuration_changed() {
  if (configuration_changed_ != NULL) configuration_changed_->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged::Clear();
  clear_has_configuration_changed();
}
inline const ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged& SetConfiguration_Response::configuration_changed() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Response.configuration_changed)
  return configuration_changed_ != NULL ? *configuration_changed_ : *default_instance_->configuration_changed_;
}
inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* SetConfiguration_Response::mutable_configuration_changed() {
  set_has_configuration_changed();
  if (configuration_changed_ == NULL) configuration_changed_ = new ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.SetConfiguration.Response.configuration_changed)
  return configuration_changed_;
}
inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* SetConfiguration_Response::release_configuration_changed() {
  clear_has_configuration_changed();
  ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* temp = configuration_changed_;
  configuration_changed_ = NULL;
  return temp;
}
inline void SetConfiguration_Response::set_allocated_configuration_changed(::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationChanged* configuration_changed) {
  delete configuration_changed_;
  configuration_changed_ = configuration_changed;
  if (configuration_changed) {
    set_has_configuration_changed();
  } else {
    clear_has_configuration_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.SetConfiguration.Response.configuration_changed)
}

// optional .LogCabin.Protocol.Client.SetConfiguration.Response.ConfigurationBad configuration_bad = 3;
inline bool SetConfiguration_Response::has_configuration_bad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetConfiguration_Response::set_has_configuration_bad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetConfiguration_Response::clear_has_configuration_bad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetConfiguration_Response::clear_configuration_bad() {
  if (configuration_bad_ != NULL) configuration_bad_->::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad::Clear();
  clear_has_configuration_bad();
}
inline const ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad& SetConfiguration_Response::configuration_bad() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.SetConfiguration.Response.configuration_bad)
  return configuration_bad_ != NULL ? *configuration_bad_ : *default_instance_->configuration_bad_;
}
inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* SetConfiguration_Response::mutable_configuration_bad() {
  set_has_configuration_bad();
  if (configuration_bad_ == NULL) configuration_bad_ = new ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.SetConfiguration.Response.configuration_bad)
  return configuration_bad_;
}
inline ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* SetConfiguration_Response::release_configuration_bad() {
  clear_has_configuration_bad();
  ::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* temp = configuration_bad_;
  configuration_bad_ = NULL;
  return temp;
}
inline void SetConfiguration_Response::set_allocated_configuration_bad(::LogCabin::Protocol::Client::SetConfiguration_Response_ConfigurationBad* configuration_bad) {
  delete configuration_bad_;
  configuration_bad_ = configuration_bad;
  if (configuration_bad) {
    set_has_configuration_bad();
  } else {
    clear_has_configuration_bad();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.SetConfiguration.Response.configuration_bad)
}

// -------------------------------------------------------------------

// SetConfiguration

// -------------------------------------------------------------------

// TreeCondition

// required string path = 1;
inline bool TreeCondition::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreeCondition::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreeCondition::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreeCondition::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& TreeCondition::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.TreeCondition.path)
  return *path_;
}
inline void TreeCondition::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.TreeCondition.path)
}
inline void TreeCondition::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.TreeCondition.path)
}
inline void TreeCondition::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.TreeCondition.path)
}
inline ::std::string* TreeCondition::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.TreeCondition.path)
  return path_;
}
inline ::std::string* TreeCondition::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeCondition::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.TreeCondition.path)
}

// required bytes contents = 2;
inline bool TreeCondition::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreeCondition::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreeCondition::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreeCondition::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& TreeCondition::contents() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.TreeCondition.contents)
  return *contents_;
}
inline void TreeCondition::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.TreeCondition.contents)
}
inline void TreeCondition::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.TreeCondition.contents)
}
inline void TreeCondition::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.TreeCondition.contents)
}
inline ::std::string* TreeCondition::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.TreeCondition.contents)
  return contents_;
}
inline ::std::string* TreeCondition::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeCondition::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.TreeCondition.contents)
}

// -------------------------------------------------------------------

// ReadOnlyTree_Request_ListDirectory

// required string path = 1;
inline bool ReadOnlyTree_Request_ListDirectory::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadOnlyTree_Request_ListDirectory::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadOnlyTree_Request_ListDirectory::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadOnlyTree_Request_ListDirectory::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReadOnlyTree_Request_ListDirectory::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory.path)
  return *path_;
}
inline void ReadOnlyTree_Request_ListDirectory::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory.path)
}
inline void ReadOnlyTree_Request_ListDirectory::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory.path)
}
inline void ReadOnlyTree_Request_ListDirectory::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory.path)
}
inline ::std::string* ReadOnlyTree_Request_ListDirectory::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory.path)
  return path_;
}
inline ::std::string* ReadOnlyTree_Request_ListDirectory::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadOnlyTree_Request_ListDirectory::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory.path)
}

// -------------------------------------------------------------------

// ReadOnlyTree_Request_Read

// required string path = 1;
inline bool ReadOnlyTree_Request_Read::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadOnlyTree_Request_Read::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadOnlyTree_Request_Read::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadOnlyTree_Request_Read::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReadOnlyTree_Request_Read::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read.path)
  return *path_;
}
inline void ReadOnlyTree_Request_Read::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read.path)
}
inline void ReadOnlyTree_Request_Read::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read.path)
}
inline void ReadOnlyTree_Request_Read::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read.path)
}
inline ::std::string* ReadOnlyTree_Request_Read::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read.path)
  return path_;
}
inline ::std::string* ReadOnlyTree_Request_Read::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadOnlyTree_Request_Read::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Request.Read.path)
}

// -------------------------------------------------------------------

// ReadOnlyTree_Request

// optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
inline bool ReadOnlyTree_Request::has_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadOnlyTree_Request::set_has_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadOnlyTree_Request::clear_has_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadOnlyTree_Request::clear_condition() {
  if (condition_ != NULL) condition_->::LogCabin::Protocol::Client::TreeCondition::Clear();
  clear_has_condition();
}
inline const ::LogCabin::Protocol::Client::TreeCondition& ReadOnlyTree_Request::condition() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Request.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
inline ::LogCabin::Protocol::Client::TreeCondition* ReadOnlyTree_Request::mutable_condition() {
  set_has_condition();
  if (condition_ == NULL) condition_ = new ::LogCabin::Protocol::Client::TreeCondition;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Request.condition)
  return condition_;
}
inline ::LogCabin::Protocol::Client::TreeCondition* ReadOnlyTree_Request::release_condition() {
  clear_has_condition();
  ::LogCabin::Protocol::Client::TreeCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline void ReadOnlyTree_Request::set_allocated_condition(::LogCabin::Protocol::Client::TreeCondition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Request.condition)
}

// optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.ListDirectory list_directory = 2;
inline bool ReadOnlyTree_Request::has_list_directory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadOnlyTree_Request::set_has_list_directory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadOnlyTree_Request::clear_has_list_directory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadOnlyTree_Request::clear_list_directory() {
  if (list_directory_ != NULL) list_directory_->::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory::Clear();
  clear_has_list_directory();
}
inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory& ReadOnlyTree_Request::list_directory() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Request.list_directory)
  return list_directory_ != NULL ? *list_directory_ : *default_instance_->list_directory_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* ReadOnlyTree_Request::mutable_list_directory() {
  set_has_list_directory();
  if (list_directory_ == NULL) list_directory_ = new ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Request.list_directory)
  return list_directory_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* ReadOnlyTree_Request::release_list_directory() {
  clear_has_list_directory();
  ::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* temp = list_directory_;
  list_directory_ = NULL;
  return temp;
}
inline void ReadOnlyTree_Request::set_allocated_list_directory(::LogCabin::Protocol::Client::ReadOnlyTree_Request_ListDirectory* list_directory) {
  delete list_directory_;
  list_directory_ = list_directory;
  if (list_directory) {
    set_has_list_directory();
  } else {
    clear_has_list_directory();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Request.list_directory)
}

// optional .LogCabin.Protocol.Client.ReadOnlyTree.Request.Read read = 5;
inline bool ReadOnlyTree_Request::has_read() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadOnlyTree_Request::set_has_read() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadOnlyTree_Request::clear_has_read() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadOnlyTree_Request::clear_read() {
  if (read_ != NULL) read_->::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read::Clear();
  clear_has_read();
}
inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read& ReadOnlyTree_Request::read() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Request.read)
  return read_ != NULL ? *read_ : *default_instance_->read_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* ReadOnlyTree_Request::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Request.read)
  return read_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* ReadOnlyTree_Request::release_read() {
  clear_has_read();
  ::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* temp = read_;
  read_ = NULL;
  return temp;
}
inline void ReadOnlyTree_Request::set_allocated_read(::LogCabin::Protocol::Client::ReadOnlyTree_Request_Read* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Request.read)
}

// -------------------------------------------------------------------

// ReadOnlyTree_Response_ListDirectory

// repeated string child = 1;
inline int ReadOnlyTree_Response_ListDirectory::child_size() const {
  return child_.size();
}
inline void ReadOnlyTree_Response_ListDirectory::clear_child() {
  child_.Clear();
}
inline const ::std::string& ReadOnlyTree_Response_ListDirectory::child(int index) const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
  return child_.Get(index);
}
inline ::std::string* ReadOnlyTree_Response_ListDirectory::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
  return child_.Mutable(index);
}
inline void ReadOnlyTree_Response_ListDirectory::set_child(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
  child_.Mutable(index)->assign(value);
}
inline void ReadOnlyTree_Response_ListDirectory::set_child(int index, const char* value) {
  child_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
}
inline void ReadOnlyTree_Response_ListDirectory::set_child(int index, const char* value, size_t size) {
  child_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
}
inline ::std::string* ReadOnlyTree_Response_ListDirectory::add_child() {
  return child_.Add();
}
inline void ReadOnlyTree_Response_ListDirectory::add_child(const ::std::string& value) {
  child_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
}
inline void ReadOnlyTree_Response_ListDirectory::add_child(const char* value) {
  child_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
}
inline void ReadOnlyTree_Response_ListDirectory::add_child(const char* value, size_t size) {
  child_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadOnlyTree_Response_ListDirectory::child() const {
  // @@protoc_insertion_point(field_list:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
  return child_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReadOnlyTree_Response_ListDirectory::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory.child)
  return &child_;
}

// -------------------------------------------------------------------

// ReadOnlyTree_Response_Read

// required bytes contents = 1;
inline bool ReadOnlyTree_Response_Read::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadOnlyTree_Response_Read::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadOnlyTree_Response_Read::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadOnlyTree_Response_Read::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& ReadOnlyTree_Response_Read::contents() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read.contents)
  return *contents_;
}
inline void ReadOnlyTree_Response_Read::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read.contents)
}
inline void ReadOnlyTree_Response_Read::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read.contents)
}
inline void ReadOnlyTree_Response_Read::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read.contents)
}
inline ::std::string* ReadOnlyTree_Response_Read::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read.contents)
  return contents_;
}
inline ::std::string* ReadOnlyTree_Response_Read::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadOnlyTree_Response_Read::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Response.Read.contents)
}

// -------------------------------------------------------------------

// ReadOnlyTree_Response

// optional .LogCabin.Protocol.Client.Status status = 1;
inline bool ReadOnlyTree_Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadOnlyTree_Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadOnlyTree_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadOnlyTree_Response::clear_status() {
  status_ = 10;
  clear_has_status();
}
inline ::LogCabin::Protocol::Client::Status ReadOnlyTree_Response::status() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Response.status)
  return static_cast< ::LogCabin::Protocol::Client::Status >(status_);
}
inline void ReadOnlyTree_Response::set_status(::LogCabin::Protocol::Client::Status value) {
  assert(::LogCabin::Protocol::Client::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadOnlyTree.Response.status)
}

// optional string error = 2;
inline bool ReadOnlyTree_Response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadOnlyTree_Response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadOnlyTree_Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadOnlyTree_Response::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& ReadOnlyTree_Response::error() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Response.error)
  return *error_;
}
inline void ReadOnlyTree_Response::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadOnlyTree.Response.error)
}
inline void ReadOnlyTree_Response::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadOnlyTree.Response.error)
}
inline void ReadOnlyTree_Response::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadOnlyTree.Response.error)
}
inline ::std::string* ReadOnlyTree_Response::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Response.error)
  return error_;
}
inline ::std::string* ReadOnlyTree_Response::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadOnlyTree_Response::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Response.error)
}

// optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.ListDirectory list_directory = 3;
inline bool ReadOnlyTree_Response::has_list_directory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadOnlyTree_Response::set_has_list_directory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadOnlyTree_Response::clear_has_list_directory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadOnlyTree_Response::clear_list_directory() {
  if (list_directory_ != NULL) list_directory_->::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory::Clear();
  clear_has_list_directory();
}
inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory& ReadOnlyTree_Response::list_directory() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Response.list_directory)
  return list_directory_ != NULL ? *list_directory_ : *default_instance_->list_directory_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* ReadOnlyTree_Response::mutable_list_directory() {
  set_has_list_directory();
  if (list_directory_ == NULL) list_directory_ = new ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Response.list_directory)
  return list_directory_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* ReadOnlyTree_Response::release_list_directory() {
  clear_has_list_directory();
  ::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* temp = list_directory_;
  list_directory_ = NULL;
  return temp;
}
inline void ReadOnlyTree_Response::set_allocated_list_directory(::LogCabin::Protocol::Client::ReadOnlyTree_Response_ListDirectory* list_directory) {
  delete list_directory_;
  list_directory_ = list_directory;
  if (list_directory) {
    set_has_list_directory();
  } else {
    clear_has_list_directory();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Response.list_directory)
}

// optional .LogCabin.Protocol.Client.ReadOnlyTree.Response.Read read = 4;
inline bool ReadOnlyTree_Response::has_read() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadOnlyTree_Response::set_has_read() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReadOnlyTree_Response::clear_has_read() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReadOnlyTree_Response::clear_read() {
  if (read_ != NULL) read_->::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read::Clear();
  clear_has_read();
}
inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read& ReadOnlyTree_Response::read() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadOnlyTree.Response.read)
  return read_ != NULL ? *read_ : *default_instance_->read_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* ReadOnlyTree_Response::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadOnlyTree.Response.read)
  return read_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* ReadOnlyTree_Response::release_read() {
  clear_has_read();
  ::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* temp = read_;
  read_ = NULL;
  return temp;
}
inline void ReadOnlyTree_Response::set_allocated_read(::LogCabin::Protocol::Client::ReadOnlyTree_Response_Read* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadOnlyTree.Response.read)
}

// -------------------------------------------------------------------

// ReadOnlyTree

// -------------------------------------------------------------------

// ReadWriteTree_Request_MakeDirectory

// required string path = 1;
inline bool ReadWriteTree_Request_MakeDirectory::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWriteTree_Request_MakeDirectory::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWriteTree_Request_MakeDirectory::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWriteTree_Request_MakeDirectory::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReadWriteTree_Request_MakeDirectory::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory.path)
  return *path_;
}
inline void ReadWriteTree_Request_MakeDirectory::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory.path)
}
inline void ReadWriteTree_Request_MakeDirectory::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory.path)
}
inline void ReadWriteTree_Request_MakeDirectory::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory.path)
}
inline ::std::string* ReadWriteTree_Request_MakeDirectory::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory.path)
  return path_;
}
inline ::std::string* ReadWriteTree_Request_MakeDirectory::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadWriteTree_Request_MakeDirectory::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory.path)
}

// -------------------------------------------------------------------

// ReadWriteTree_Request_RemoveDirectory

// required string path = 1;
inline bool ReadWriteTree_Request_RemoveDirectory::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWriteTree_Request_RemoveDirectory::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWriteTree_Request_RemoveDirectory::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWriteTree_Request_RemoveDirectory::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReadWriteTree_Request_RemoveDirectory::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory.path)
  return *path_;
}
inline void ReadWriteTree_Request_RemoveDirectory::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory.path)
}
inline void ReadWriteTree_Request_RemoveDirectory::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory.path)
}
inline void ReadWriteTree_Request_RemoveDirectory::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory.path)
}
inline ::std::string* ReadWriteTree_Request_RemoveDirectory::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory.path)
  return path_;
}
inline ::std::string* ReadWriteTree_Request_RemoveDirectory::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadWriteTree_Request_RemoveDirectory::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory.path)
}

// -------------------------------------------------------------------

// ReadWriteTree_Request_Write

// required string path = 1;
inline bool ReadWriteTree_Request_Write::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWriteTree_Request_Write::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWriteTree_Request_Write::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWriteTree_Request_Write::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReadWriteTree_Request_Write::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.path)
  return *path_;
}
inline void ReadWriteTree_Request_Write::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.path)
}
inline void ReadWriteTree_Request_Write::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.path)
}
inline void ReadWriteTree_Request_Write::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.path)
}
inline ::std::string* ReadWriteTree_Request_Write::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.path)
  return path_;
}
inline ::std::string* ReadWriteTree_Request_Write::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadWriteTree_Request_Write::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.path)
}

// required bytes contents = 2;
inline bool ReadWriteTree_Request_Write::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWriteTree_Request_Write::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWriteTree_Request_Write::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWriteTree_Request_Write::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& ReadWriteTree_Request_Write::contents() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.contents)
  return *contents_;
}
inline void ReadWriteTree_Request_Write::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.contents)
}
inline void ReadWriteTree_Request_Write::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.contents)
}
inline void ReadWriteTree_Request_Write::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.contents)
}
inline ::std::string* ReadWriteTree_Request_Write::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.contents)
  return contents_;
}
inline ::std::string* ReadWriteTree_Request_Write::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadWriteTree_Request_Write::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.Write.contents)
}

// -------------------------------------------------------------------

// ReadWriteTree_Request_RemoveFile

// required string path = 1;
inline bool ReadWriteTree_Request_RemoveFile::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWriteTree_Request_RemoveFile::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWriteTree_Request_RemoveFile::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWriteTree_Request_RemoveFile::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReadWriteTree_Request_RemoveFile::path() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile.path)
  return *path_;
}
inline void ReadWriteTree_Request_RemoveFile::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile.path)
}
inline void ReadWriteTree_Request_RemoveFile::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile.path)
}
inline void ReadWriteTree_Request_RemoveFile::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile.path)
}
inline ::std::string* ReadWriteTree_Request_RemoveFile::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile.path)
  return path_;
}
inline ::std::string* ReadWriteTree_Request_RemoveFile::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadWriteTree_Request_RemoveFile::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile.path)
}

// -------------------------------------------------------------------

// ReadWriteTree_Request

// required .LogCabin.Protocol.Client.ExactlyOnceRPCInfo exactly_once = 10;
inline bool ReadWriteTree_Request::has_exactly_once() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWriteTree_Request::set_has_exactly_once() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWriteTree_Request::clear_has_exactly_once() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWriteTree_Request::clear_exactly_once() {
  if (exactly_once_ != NULL) exactly_once_->::LogCabin::Protocol::Client::ExactlyOnceRPCInfo::Clear();
  clear_has_exactly_once();
}
inline const ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo& ReadWriteTree_Request::exactly_once() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.exactly_once)
  return exactly_once_ != NULL ? *exactly_once_ : *default_instance_->exactly_once_;
}
inline ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* ReadWriteTree_Request::mutable_exactly_once() {
  set_has_exactly_once();
  if (exactly_once_ == NULL) exactly_once_ = new ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.exactly_once)
  return exactly_once_;
}
inline ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* ReadWriteTree_Request::release_exactly_once() {
  clear_has_exactly_once();
  ::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* temp = exactly_once_;
  exactly_once_ = NULL;
  return temp;
}
inline void ReadWriteTree_Request::set_allocated_exactly_once(::LogCabin::Protocol::Client::ExactlyOnceRPCInfo* exactly_once) {
  delete exactly_once_;
  exactly_once_ = exactly_once;
  if (exactly_once) {
    set_has_exactly_once();
  } else {
    clear_has_exactly_once();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.exactly_once)
}

// optional .LogCabin.Protocol.Client.TreeCondition condition = 11;
inline bool ReadWriteTree_Request::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWriteTree_Request::set_has_condition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWriteTree_Request::clear_has_condition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWriteTree_Request::clear_condition() {
  if (condition_ != NULL) condition_->::LogCabin::Protocol::Client::TreeCondition::Clear();
  clear_has_condition();
}
inline const ::LogCabin::Protocol::Client::TreeCondition& ReadWriteTree_Request::condition() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
inline ::LogCabin::Protocol::Client::TreeCondition* ReadWriteTree_Request::mutable_condition() {
  set_has_condition();
  if (condition_ == NULL) condition_ = new ::LogCabin::Protocol::Client::TreeCondition;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.condition)
  return condition_;
}
inline ::LogCabin::Protocol::Client::TreeCondition* ReadWriteTree_Request::release_condition() {
  clear_has_condition();
  ::LogCabin::Protocol::Client::TreeCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline void ReadWriteTree_Request::set_allocated_condition(::LogCabin::Protocol::Client::TreeCondition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.condition)
}

// optional .LogCabin.Protocol.Client.ReadWriteTree.Request.MakeDirectory make_directory = 1;
inline bool ReadWriteTree_Request::has_make_directory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadWriteTree_Request::set_has_make_directory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadWriteTree_Request::clear_has_make_directory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadWriteTree_Request::clear_make_directory() {
  if (make_directory_ != NULL) make_directory_->::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory::Clear();
  clear_has_make_directory();
}
inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory& ReadWriteTree_Request::make_directory() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.make_directory)
  return make_directory_ != NULL ? *make_directory_ : *default_instance_->make_directory_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* ReadWriteTree_Request::mutable_make_directory() {
  set_has_make_directory();
  if (make_directory_ == NULL) make_directory_ = new ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.make_directory)
  return make_directory_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* ReadWriteTree_Request::release_make_directory() {
  clear_has_make_directory();
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* temp = make_directory_;
  make_directory_ = NULL;
  return temp;
}
inline void ReadWriteTree_Request::set_allocated_make_directory(::LogCabin::Protocol::Client::ReadWriteTree_Request_MakeDirectory* make_directory) {
  delete make_directory_;
  make_directory_ = make_directory;
  if (make_directory) {
    set_has_make_directory();
  } else {
    clear_has_make_directory();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.make_directory)
}

// optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveDirectory remove_directory = 3;
inline bool ReadWriteTree_Request::has_remove_directory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadWriteTree_Request::set_has_remove_directory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReadWriteTree_Request::clear_has_remove_directory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReadWriteTree_Request::clear_remove_directory() {
  if (remove_directory_ != NULL) remove_directory_->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory::Clear();
  clear_has_remove_directory();
}
inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory& ReadWriteTree_Request::remove_directory() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.remove_directory)
  return remove_directory_ != NULL ? *remove_directory_ : *default_instance_->remove_directory_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* ReadWriteTree_Request::mutable_remove_directory() {
  set_has_remove_directory();
  if (remove_directory_ == NULL) remove_directory_ = new ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.remove_directory)
  return remove_directory_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* ReadWriteTree_Request::release_remove_directory() {
  clear_has_remove_directory();
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* temp = remove_directory_;
  remove_directory_ = NULL;
  return temp;
}
inline void ReadWriteTree_Request::set_allocated_remove_directory(::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveDirectory* remove_directory) {
  delete remove_directory_;
  remove_directory_ = remove_directory;
  if (remove_directory) {
    set_has_remove_directory();
  } else {
    clear_has_remove_directory();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.remove_directory)
}

// optional .LogCabin.Protocol.Client.ReadWriteTree.Request.Write write = 4;
inline bool ReadWriteTree_Request::has_write() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadWriteTree_Request::set_has_write() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReadWriteTree_Request::clear_has_write() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReadWriteTree_Request::clear_write() {
  if (write_ != NULL) write_->::LogCabin::Protocol::Client::ReadWriteTree_Request_Write::Clear();
  clear_has_write();
}
inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write& ReadWriteTree_Request::write() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.write)
  return write_ != NULL ? *write_ : *default_instance_->write_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* ReadWriteTree_Request::mutable_write() {
  set_has_write();
  if (write_ == NULL) write_ = new ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.write)
  return write_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* ReadWriteTree_Request::release_write() {
  clear_has_write();
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* temp = write_;
  write_ = NULL;
  return temp;
}
inline void ReadWriteTree_Request::set_allocated_write(::LogCabin::Protocol::Client::ReadWriteTree_Request_Write* write) {
  delete write_;
  write_ = write;
  if (write) {
    set_has_write();
  } else {
    clear_has_write();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.write)
}

// optional .LogCabin.Protocol.Client.ReadWriteTree.Request.RemoveFile remove_file = 6;
inline bool ReadWriteTree_Request::has_remove_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReadWriteTree_Request::set_has_remove_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReadWriteTree_Request::clear_has_remove_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReadWriteTree_Request::clear_remove_file() {
  if (remove_file_ != NULL) remove_file_->::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile::Clear();
  clear_has_remove_file();
}
inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile& ReadWriteTree_Request::remove_file() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Request.remove_file)
  return remove_file_ != NULL ? *remove_file_ : *default_instance_->remove_file_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* ReadWriteTree_Request::mutable_remove_file() {
  set_has_remove_file();
  if (remove_file_ == NULL) remove_file_ = new ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Request.remove_file)
  return remove_file_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* ReadWriteTree_Request::release_remove_file() {
  clear_has_remove_file();
  ::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* temp = remove_file_;
  remove_file_ = NULL;
  return temp;
}
inline void ReadWriteTree_Request::set_allocated_remove_file(::LogCabin::Protocol::Client::ReadWriteTree_Request_RemoveFile* remove_file) {
  delete remove_file_;
  remove_file_ = remove_file;
  if (remove_file) {
    set_has_remove_file();
  } else {
    clear_has_remove_file();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Request.remove_file)
}

// -------------------------------------------------------------------

// ReadWriteTree_Response

// optional .LogCabin.Protocol.Client.Status status = 1;
inline bool ReadWriteTree_Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWriteTree_Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWriteTree_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWriteTree_Response::clear_status() {
  status_ = 10;
  clear_has_status();
}
inline ::LogCabin::Protocol::Client::Status ReadWriteTree_Response::status() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Response.status)
  return static_cast< ::LogCabin::Protocol::Client::Status >(status_);
}
inline void ReadWriteTree_Response::set_status(::LogCabin::Protocol::Client::Status value) {
  assert(::LogCabin::Protocol::Client::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Response.status)
}

// optional string error = 2;
inline bool ReadWriteTree_Response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWriteTree_Response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWriteTree_Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWriteTree_Response::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& ReadWriteTree_Response::error() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.ReadWriteTree.Response.error)
  return *error_;
}
inline void ReadWriteTree_Response::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.ReadWriteTree.Response.error)
}
inline void ReadWriteTree_Response::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogCabin.Protocol.Client.ReadWriteTree.Response.error)
}
inline void ReadWriteTree_Response::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogCabin.Protocol.Client.ReadWriteTree.Response.error)
}
inline ::std::string* ReadWriteTree_Response::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.ReadWriteTree.Response.error)
  return error_;
}
inline ::std::string* ReadWriteTree_Response::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReadWriteTree_Response::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.ReadWriteTree.Response.error)
}

// -------------------------------------------------------------------

// ReadWriteTree

// -------------------------------------------------------------------

// GetServerInfo_Request

// -------------------------------------------------------------------

// GetServerInfo_Response

// required .LogCabin.Protocol.Client.Server server_info = 1;
inline bool GetServerInfo_Response::has_server_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServerInfo_Response::set_has_server_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServerInfo_Response::clear_has_server_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServerInfo_Response::clear_server_info() {
  if (server_info_ != NULL) server_info_->::LogCabin::Protocol::Client::Server::Clear();
  clear_has_server_info();
}
inline const ::LogCabin::Protocol::Client::Server& GetServerInfo_Response::server_info() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.GetServerInfo.Response.server_info)
  return server_info_ != NULL ? *server_info_ : *default_instance_->server_info_;
}
inline ::LogCabin::Protocol::Client::Server* GetServerInfo_Response::mutable_server_info() {
  set_has_server_info();
  if (server_info_ == NULL) server_info_ = new ::LogCabin::Protocol::Client::Server;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.GetServerInfo.Response.server_info)
  return server_info_;
}
inline ::LogCabin::Protocol::Client::Server* GetServerInfo_Response::release_server_info() {
  clear_has_server_info();
  ::LogCabin::Protocol::Client::Server* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
inline void GetServerInfo_Response::set_allocated_server_info(::LogCabin::Protocol::Client::Server* server_info) {
  delete server_info_;
  server_info_ = server_info;
  if (server_info) {
    set_has_server_info();
  } else {
    clear_has_server_info();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.GetServerInfo.Response.server_info)
}

// -------------------------------------------------------------------

// GetServerInfo

// -------------------------------------------------------------------

// AdvanceStateMachineVersion_Request

// required uint32 requested_version = 1;
inline bool AdvanceStateMachineVersion_Request::has_requested_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvanceStateMachineVersion_Request::set_has_requested_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvanceStateMachineVersion_Request::clear_has_requested_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvanceStateMachineVersion_Request::clear_requested_version() {
  requested_version_ = 0u;
  clear_has_requested_version();
}
inline ::google::protobuf::uint32 AdvanceStateMachineVersion_Request::requested_version() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request.requested_version)
  return requested_version_;
}
inline void AdvanceStateMachineVersion_Request::set_requested_version(::google::protobuf::uint32 value) {
  set_has_requested_version();
  requested_version_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request.requested_version)
}

// -------------------------------------------------------------------

// AdvanceStateMachineVersion_Response

// required uint32 running_version = 1;
inline bool AdvanceStateMachineVersion_Response::has_running_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvanceStateMachineVersion_Response::set_has_running_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvanceStateMachineVersion_Response::clear_has_running_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvanceStateMachineVersion_Response::clear_running_version() {
  running_version_ = 0u;
  clear_has_running_version();
}
inline ::google::protobuf::uint32 AdvanceStateMachineVersion_Response::running_version() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response.running_version)
  return running_version_;
}
inline void AdvanceStateMachineVersion_Response::set_running_version(::google::protobuf::uint32 value) {
  set_has_running_version();
  running_version_ = value;
  // @@protoc_insertion_point(field_set:LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response.running_version)
}

// -------------------------------------------------------------------

// AdvanceStateMachineVersion

// -------------------------------------------------------------------

// StateMachineCommand_Request

// optional .LogCabin.Protocol.Client.OpenSession.Request open_session = 1;
inline bool StateMachineCommand_Request::has_open_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachineCommand_Request::set_has_open_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachineCommand_Request::clear_has_open_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachineCommand_Request::clear_open_session() {
  if (open_session_ != NULL) open_session_->::LogCabin::Protocol::Client::OpenSession_Request::Clear();
  clear_has_open_session();
}
inline const ::LogCabin::Protocol::Client::OpenSession_Request& StateMachineCommand_Request::open_session() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Request.open_session)
  return open_session_ != NULL ? *open_session_ : *default_instance_->open_session_;
}
inline ::LogCabin::Protocol::Client::OpenSession_Request* StateMachineCommand_Request::mutable_open_session() {
  set_has_open_session();
  if (open_session_ == NULL) open_session_ = new ::LogCabin::Protocol::Client::OpenSession_Request;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Request.open_session)
  return open_session_;
}
inline ::LogCabin::Protocol::Client::OpenSession_Request* StateMachineCommand_Request::release_open_session() {
  clear_has_open_session();
  ::LogCabin::Protocol::Client::OpenSession_Request* temp = open_session_;
  open_session_ = NULL;
  return temp;
}
inline void StateMachineCommand_Request::set_allocated_open_session(::LogCabin::Protocol::Client::OpenSession_Request* open_session) {
  delete open_session_;
  open_session_ = open_session;
  if (open_session) {
    set_has_open_session();
  } else {
    clear_has_open_session();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Request.open_session)
}

// optional .LogCabin.Protocol.Client.CloseSession.Request close_session = 4;
inline bool StateMachineCommand_Request::has_close_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateMachineCommand_Request::set_has_close_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateMachineCommand_Request::clear_has_close_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateMachineCommand_Request::clear_close_session() {
  if (close_session_ != NULL) close_session_->::LogCabin::Protocol::Client::CloseSession_Request::Clear();
  clear_has_close_session();
}
inline const ::LogCabin::Protocol::Client::CloseSession_Request& StateMachineCommand_Request::close_session() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Request.close_session)
  return close_session_ != NULL ? *close_session_ : *default_instance_->close_session_;
}
inline ::LogCabin::Protocol::Client::CloseSession_Request* StateMachineCommand_Request::mutable_close_session() {
  set_has_close_session();
  if (close_session_ == NULL) close_session_ = new ::LogCabin::Protocol::Client::CloseSession_Request;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Request.close_session)
  return close_session_;
}
inline ::LogCabin::Protocol::Client::CloseSession_Request* StateMachineCommand_Request::release_close_session() {
  clear_has_close_session();
  ::LogCabin::Protocol::Client::CloseSession_Request* temp = close_session_;
  close_session_ = NULL;
  return temp;
}
inline void StateMachineCommand_Request::set_allocated_close_session(::LogCabin::Protocol::Client::CloseSession_Request* close_session) {
  delete close_session_;
  close_session_ = close_session;
  if (close_session) {
    set_has_close_session();
  } else {
    clear_has_close_session();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Request.close_session)
}

// optional .LogCabin.Protocol.Client.ReadWriteTree.Request tree = 2;
inline bool StateMachineCommand_Request::has_tree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateMachineCommand_Request::set_has_tree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateMachineCommand_Request::clear_has_tree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateMachineCommand_Request::clear_tree() {
  if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadWriteTree_Request::Clear();
  clear_has_tree();
}
inline const ::LogCabin::Protocol::Client::ReadWriteTree_Request& StateMachineCommand_Request::tree() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Request.tree)
  return tree_ != NULL ? *tree_ : *default_instance_->tree_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request* StateMachineCommand_Request::mutable_tree() {
  set_has_tree();
  if (tree_ == NULL) tree_ = new ::LogCabin::Protocol::Client::ReadWriteTree_Request;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Request.tree)
  return tree_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Request* StateMachineCommand_Request::release_tree() {
  clear_has_tree();
  ::LogCabin::Protocol::Client::ReadWriteTree_Request* temp = tree_;
  tree_ = NULL;
  return temp;
}
inline void StateMachineCommand_Request::set_allocated_tree(::LogCabin::Protocol::Client::ReadWriteTree_Request* tree) {
  delete tree_;
  tree_ = tree;
  if (tree) {
    set_has_tree();
  } else {
    clear_has_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Request.tree)
}

// optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Request advance_version = 3;
inline bool StateMachineCommand_Request::has_advance_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateMachineCommand_Request::set_has_advance_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateMachineCommand_Request::clear_has_advance_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateMachineCommand_Request::clear_advance_version() {
  if (advance_version_ != NULL) advance_version_->::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request::Clear();
  clear_has_advance_version();
}
inline const ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request& StateMachineCommand_Request::advance_version() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Request.advance_version)
  return advance_version_ != NULL ? *advance_version_ : *default_instance_->advance_version_;
}
inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* StateMachineCommand_Request::mutable_advance_version() {
  set_has_advance_version();
  if (advance_version_ == NULL) advance_version_ = new ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Request.advance_version)
  return advance_version_;
}
inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* StateMachineCommand_Request::release_advance_version() {
  clear_has_advance_version();
  ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* temp = advance_version_;
  advance_version_ = NULL;
  return temp;
}
inline void StateMachineCommand_Request::set_allocated_advance_version(::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Request* advance_version) {
  delete advance_version_;
  advance_version_ = advance_version;
  if (advance_version) {
    set_has_advance_version();
  } else {
    clear_has_advance_version();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Request.advance_version)
}

// -------------------------------------------------------------------

// StateMachineCommand_Response

// optional .LogCabin.Protocol.Client.OpenSession.Response open_session = 1;
inline bool StateMachineCommand_Response::has_open_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachineCommand_Response::set_has_open_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachineCommand_Response::clear_has_open_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachineCommand_Response::clear_open_session() {
  if (open_session_ != NULL) open_session_->::LogCabin::Protocol::Client::OpenSession_Response::Clear();
  clear_has_open_session();
}
inline const ::LogCabin::Protocol::Client::OpenSession_Response& StateMachineCommand_Response::open_session() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Response.open_session)
  return open_session_ != NULL ? *open_session_ : *default_instance_->open_session_;
}
inline ::LogCabin::Protocol::Client::OpenSession_Response* StateMachineCommand_Response::mutable_open_session() {
  set_has_open_session();
  if (open_session_ == NULL) open_session_ = new ::LogCabin::Protocol::Client::OpenSession_Response;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Response.open_session)
  return open_session_;
}
inline ::LogCabin::Protocol::Client::OpenSession_Response* StateMachineCommand_Response::release_open_session() {
  clear_has_open_session();
  ::LogCabin::Protocol::Client::OpenSession_Response* temp = open_session_;
  open_session_ = NULL;
  return temp;
}
inline void StateMachineCommand_Response::set_allocated_open_session(::LogCabin::Protocol::Client::OpenSession_Response* open_session) {
  delete open_session_;
  open_session_ = open_session;
  if (open_session) {
    set_has_open_session();
  } else {
    clear_has_open_session();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Response.open_session)
}

// optional .LogCabin.Protocol.Client.CloseSession.Response close_session = 4;
inline bool StateMachineCommand_Response::has_close_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateMachineCommand_Response::set_has_close_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateMachineCommand_Response::clear_has_close_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateMachineCommand_Response::clear_close_session() {
  if (close_session_ != NULL) close_session_->::LogCabin::Protocol::Client::CloseSession_Response::Clear();
  clear_has_close_session();
}
inline const ::LogCabin::Protocol::Client::CloseSession_Response& StateMachineCommand_Response::close_session() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Response.close_session)
  return close_session_ != NULL ? *close_session_ : *default_instance_->close_session_;
}
inline ::LogCabin::Protocol::Client::CloseSession_Response* StateMachineCommand_Response::mutable_close_session() {
  set_has_close_session();
  if (close_session_ == NULL) close_session_ = new ::LogCabin::Protocol::Client::CloseSession_Response;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Response.close_session)
  return close_session_;
}
inline ::LogCabin::Protocol::Client::CloseSession_Response* StateMachineCommand_Response::release_close_session() {
  clear_has_close_session();
  ::LogCabin::Protocol::Client::CloseSession_Response* temp = close_session_;
  close_session_ = NULL;
  return temp;
}
inline void StateMachineCommand_Response::set_allocated_close_session(::LogCabin::Protocol::Client::CloseSession_Response* close_session) {
  delete close_session_;
  close_session_ = close_session;
  if (close_session) {
    set_has_close_session();
  } else {
    clear_has_close_session();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Response.close_session)
}

// optional .LogCabin.Protocol.Client.ReadWriteTree.Response tree = 2;
inline bool StateMachineCommand_Response::has_tree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateMachineCommand_Response::set_has_tree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateMachineCommand_Response::clear_has_tree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateMachineCommand_Response::clear_tree() {
  if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadWriteTree_Response::Clear();
  clear_has_tree();
}
inline const ::LogCabin::Protocol::Client::ReadWriteTree_Response& StateMachineCommand_Response::tree() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Response.tree)
  return tree_ != NULL ? *tree_ : *default_instance_->tree_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Response* StateMachineCommand_Response::mutable_tree() {
  set_has_tree();
  if (tree_ == NULL) tree_ = new ::LogCabin::Protocol::Client::ReadWriteTree_Response;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Response.tree)
  return tree_;
}
inline ::LogCabin::Protocol::Client::ReadWriteTree_Response* StateMachineCommand_Response::release_tree() {
  clear_has_tree();
  ::LogCabin::Protocol::Client::ReadWriteTree_Response* temp = tree_;
  tree_ = NULL;
  return temp;
}
inline void StateMachineCommand_Response::set_allocated_tree(::LogCabin::Protocol::Client::ReadWriteTree_Response* tree) {
  delete tree_;
  tree_ = tree;
  if (tree) {
    set_has_tree();
  } else {
    clear_has_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Response.tree)
}

// optional .LogCabin.Protocol.Client.AdvanceStateMachineVersion.Response advance_version = 3;
inline bool StateMachineCommand_Response::has_advance_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateMachineCommand_Response::set_has_advance_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateMachineCommand_Response::clear_has_advance_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateMachineCommand_Response::clear_advance_version() {
  if (advance_version_ != NULL) advance_version_->::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response::Clear();
  clear_has_advance_version();
}
inline const ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response& StateMachineCommand_Response::advance_version() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineCommand.Response.advance_version)
  return advance_version_ != NULL ? *advance_version_ : *default_instance_->advance_version_;
}
inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* StateMachineCommand_Response::mutable_advance_version() {
  set_has_advance_version();
  if (advance_version_ == NULL) advance_version_ = new ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineCommand.Response.advance_version)
  return advance_version_;
}
inline ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* StateMachineCommand_Response::release_advance_version() {
  clear_has_advance_version();
  ::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* temp = advance_version_;
  advance_version_ = NULL;
  return temp;
}
inline void StateMachineCommand_Response::set_allocated_advance_version(::LogCabin::Protocol::Client::AdvanceStateMachineVersion_Response* advance_version) {
  delete advance_version_;
  advance_version_ = advance_version;
  if (advance_version) {
    set_has_advance_version();
  } else {
    clear_has_advance_version();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineCommand.Response.advance_version)
}

// -------------------------------------------------------------------

// StateMachineCommand

// -------------------------------------------------------------------

// StateMachineQuery_Request

// optional .LogCabin.Protocol.Client.ReadOnlyTree.Request tree = 1;
inline bool StateMachineQuery_Request::has_tree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachineQuery_Request::set_has_tree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachineQuery_Request::clear_has_tree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachineQuery_Request::clear_tree() {
  if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadOnlyTree_Request::Clear();
  clear_has_tree();
}
inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Request& StateMachineQuery_Request::tree() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineQuery.Request.tree)
  return tree_ != NULL ? *tree_ : *default_instance_->tree_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request* StateMachineQuery_Request::mutable_tree() {
  set_has_tree();
  if (tree_ == NULL) tree_ = new ::LogCabin::Protocol::Client::ReadOnlyTree_Request;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineQuery.Request.tree)
  return tree_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Request* StateMachineQuery_Request::release_tree() {
  clear_has_tree();
  ::LogCabin::Protocol::Client::ReadOnlyTree_Request* temp = tree_;
  tree_ = NULL;
  return temp;
}
inline void StateMachineQuery_Request::set_allocated_tree(::LogCabin::Protocol::Client::ReadOnlyTree_Request* tree) {
  delete tree_;
  tree_ = tree;
  if (tree) {
    set_has_tree();
  } else {
    clear_has_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineQuery.Request.tree)
}

// -------------------------------------------------------------------

// StateMachineQuery_Response

// optional .LogCabin.Protocol.Client.ReadOnlyTree.Response tree = 1;
inline bool StateMachineQuery_Response::has_tree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachineQuery_Response::set_has_tree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachineQuery_Response::clear_has_tree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachineQuery_Response::clear_tree() {
  if (tree_ != NULL) tree_->::LogCabin::Protocol::Client::ReadOnlyTree_Response::Clear();
  clear_has_tree();
}
inline const ::LogCabin::Protocol::Client::ReadOnlyTree_Response& StateMachineQuery_Response::tree() const {
  // @@protoc_insertion_point(field_get:LogCabin.Protocol.Client.StateMachineQuery.Response.tree)
  return tree_ != NULL ? *tree_ : *default_instance_->tree_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response* StateMachineQuery_Response::mutable_tree() {
  set_has_tree();
  if (tree_ == NULL) tree_ = new ::LogCabin::Protocol::Client::ReadOnlyTree_Response;
  // @@protoc_insertion_point(field_mutable:LogCabin.Protocol.Client.StateMachineQuery.Response.tree)
  return tree_;
}
inline ::LogCabin::Protocol::Client::ReadOnlyTree_Response* StateMachineQuery_Response::release_tree() {
  clear_has_tree();
  ::LogCabin::Protocol::Client::ReadOnlyTree_Response* temp = tree_;
  tree_ = NULL;
  return temp;
}
inline void StateMachineQuery_Response::set_allocated_tree(::LogCabin::Protocol::Client::ReadOnlyTree_Response* tree) {
  delete tree_;
  tree_ = tree;
  if (tree) {
    set_has_tree();
  } else {
    clear_has_tree();
  }
  // @@protoc_insertion_point(field_set_allocated:LogCabin.Protocol.Client.StateMachineQuery.Response.tree)
}

// -------------------------------------------------------------------

// StateMachineQuery


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client
}  // namespace Protocol
}  // namespace LogCabin

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LogCabin::Protocol::Client::Error_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogCabin::Protocol::Client::Error_Code>() {
  return ::LogCabin::Protocol::Client::Error_Code_descriptor();
}
template <> struct is_proto_enum< ::LogCabin::Protocol::Client::OpCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogCabin::Protocol::Client::OpCode>() {
  return ::LogCabin::Protocol::Client::OpCode_descriptor();
}
template <> struct is_proto_enum< ::LogCabin::Protocol::Client::Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogCabin::Protocol::Client::Status>() {
  return ::LogCabin::Protocol::Client::Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protocol_2fClient_2fClient_2eproto__INCLUDED
